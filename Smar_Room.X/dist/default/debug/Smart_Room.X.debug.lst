

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Jul 18 16:36:09 2021

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.40
    58                           ; Generated 01/12/2016 GMT
    59                           ; 
    60                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4550 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  002FE2                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _keypad
    97  002FE2  37                 	db	55
    98  002FE3  38                 	db	56
    99  002FE4  39                 	db	57
   100  002FE5  2F                 	db	47
   101  002FE6  34                 	db	52
   102  002FE7  35                 	db	53
   103  002FE8  36                 	db	54
   104  002FE9  2A                 	db	42
   105  002FEA  31                 	db	49
   106  002FEB  32                 	db	50
   107  002FEC  33                 	db	51
   108  002FED  2D                 	db	45
   109  002FEE  20                 	db	32
   110  002FEF  30                 	db	48
   111  002FF0  3D                 	db	61
   112  002FF1  2B                 	db	43
   113                           
   114                           	psect	idataBANK0
   115  002FFA                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for main@F3968
   119  002FFA  31                 	db	49
   120  002FFB  32                 	db	50
   121  002FFC  33                 	db	51
   122  002FFD  34                 	db	52
   123  002FFE  35                 	db	53
   124  002FFF  37                 	db	55
   125  003000  00                 	db	0
   126                           
   127                           	psect	mediumconst
   128  007E16                     __pmediumconst:
   129                           	opt stack 0
   130  007E16  00                 	db	0
   131  007E17                     _dpowers:
   132                           	opt stack 0
   133  007E17  0001               	dw	1
   134  007E19  0000               	dw	0
   135  007E1B  000A               	dw	10
   136  007E1D  0000               	dw	0
   137  007E1F  0064               	dw	100
   138  007E21  0000               	dw	0
   139  007E23  03E8               	dw	1000
   140  007E25  0000               	dw	0
   141  007E27  2710               	dw	10000
   142  007E29  0000               	dw	0
   143  007E2B  86A0               	dw	34464
   144  007E2D  0001               	dw	1
   145  007E2F  4240               	dw	16960
   146  007E31  000F               	dw	15
   147  007E33  9680               	dw	38528
   148  007E35  0098               	dw	152
   149  007E37  E100               	dw	57600
   150  007E39  05F5               	dw	1525
   151  007E3B  CA00               	dw	51712
   152  007E3D  3B9A               	dw	15258
   153  007E3F                     __end_of_dpowers:
   154                           	opt stack 0
   155  007E3F                     __npowers_:
   156                           	opt stack 0
   157  007E3F  00                 	db	0
   158  007E40  80                 	db	128
   159  007E41  3F                 	db	63
   160  007E42  CD                 	db	205
   161  007E43  CC                 	db	204
   162  007E44  3D                 	db	61
   163  007E45  D7                 	db	215
   164  007E46  23                 	db	35
   165  007E47  3C                 	db	60
   166  007E48  12                 	db	18
   167  007E49  83                 	db	131
   168  007E4A  3A                 	db	58
   169  007E4B  B7                 	db	183
   170  007E4C  D1                 	db	209
   171  007E4D  38                 	db	56
   172  007E4E  C6                 	db	198
   173  007E4F  27                 	db	39
   174  007E50  37                 	db	55
   175  007E51  38                 	db	56
   176  007E52  86                 	db	134
   177  007E53  35                 	db	53
   178  007E54  C0                 	db	192
   179  007E55  D6                 	db	214
   180  007E56  33                 	db	51
   181  007E57  CC                 	db	204
   182  007E58  2B                 	db	43
   183  007E59  32                 	db	50
   184  007E5A  70                 	db	112
   185  007E5B  89                 	db	137
   186  007E5C  30                 	db	48
   187  007E5D  E7                 	db	231
   188  007E5E  DB                 	db	219
   189  007E5F  2E                 	db	46
   190  007E60  E5                 	db	229
   191  007E61  3C                 	db	60
   192  007E62  1E                 	db	30
   193  007E63  42                 	db	66
   194  007E64  A2                 	db	162
   195  007E65  0D                 	db	13
   196  007E66                     __end_of__npowers_:
   197                           	opt stack 0
   198  007E66                     __powers_:
   199                           	opt stack 0
   200  007E66  00                 	db	0
   201  007E67  80                 	db	128
   202  007E68  3F                 	db	63
   203  007E69  00                 	db	0
   204  007E6A  20                 	db	32
   205  007E6B  41                 	db	65
   206  007E6C  00                 	db	0
   207  007E6D  C8                 	db	200
   208  007E6E  42                 	db	66
   209  007E6F  00                 	db	0
   210  007E70  7A                 	db	122
   211  007E71  44                 	db	68
   212  007E72  40                 	db	64
   213  007E73  1C                 	db	28
   214  007E74  46                 	db	70
   215  007E75  50                 	db	80
   216  007E76  C3                 	db	195
   217  007E77  47                 	db	71
   218  007E78  24                 	db	36
   219  007E79  74                 	db	116
   220  007E7A  49                 	db	73
   221  007E7B  97                 	db	151
   222  007E7C  18                 	db	24
   223  007E7D  4B                 	db	75
   224  007E7E  BC                 	db	188
   225  007E7F  BE                 	db	190
   226  007E80  4C                 	db	76
   227  007E81  6B                 	db	107
   228  007E82  6E                 	db	110
   229  007E83  4E                 	db	78
   230  007E84  03                 	db	3
   231  007E85  15                 	db	21
   232  007E86  50                 	db	80
   233  007E87  79                 	db	121
   234  007E88  AD                 	db	173
   235  007E89  60                 	db	96
   236  007E8A  F3                 	db	243
   237  007E8B  49                 	db	73
   238  007E8C  71                 	db	113
   239  007E8D                     __end_of__powers_:
   240                           	opt stack 0
   241  0000                     _ADCON0	set	4034
   242  0000                     _ADCON0bits	set	4034
   243  0000                     _ADCON1	set	4033
   244  0000                     _ADCON2	set	4032
   245  0000                     _ADRESH	set	4036
   246  0000                     _ADRESL	set	4035
   247  0000                     _INTCONbits	set	4082
   248  0000                     _LATB	set	3978
   249  0000                     _LATC	set	3979
   250  0000                     _LATCbits	set	3979
   251  0000                     _LATD	set	3980
   252  0000                     _OSCCON	set	4051
   253  0000                     _PIE1bits	set	3997
   254  0000                     _PIR1bits	set	3998
   255  0000                     _PORTA	set	3968
   256  0000                     _PORTAbits	set	3968
   257  0000                     _PORTB	set	3969
   258  0000                     _PORTC	set	3970
   259  0000                     _PORTEbits	set	3972
   260  0000                     _TRISA	set	3986
   261  0000                     _TRISB	set	3987
   262  0000                     _TRISC	set	3988
   263  0000                     _TRISD	set	3989
   264  0000                     _TRISE	set	3990
   265  0000                     _ADIF	set	31990
   266  0000                     _LATD0	set	31840
   267  0000                     _LATD1	set	31841
   268  0000                     _RBPU	set	32655
   269  007E8D                     STR_10:
   270  007E8D  56                 	db	86	;'V'
   271  007E8E  65                 	db	101	;'e'
   272  007E8F  72                 	db	114	;'r'
   273  007E90  69                 	db	105	;'i'
   274  007E91  66                 	db	102	;'f'
   275  007E92  79                 	db	121	;'y'
   276  007E93  20                 	db	32
   277  007E94  6E                 	db	110	;'n'
   278  007E95  65                 	db	101	;'e'
   279  007E96  77                 	db	119	;'w'
   280  007E97  20                 	db	32
   281  007E98  70                 	db	112	;'p'
   282  007E99  61                 	db	97	;'a'
   283  007E9A  73                 	db	115	;'s'
   284  007E9B  73                 	db	115	;'s'
   285  007E9C  20                 	db	32
   286  007E9D  20                 	db	32
   287  007E9E  20                 	db	32
   288  007E9F  20                 	db	32
   289  007EA0  20                 	db	32
   290  007EA1  20                 	db	32
   291  007EA2  20                 	db	32
   292  007EA3  20                 	db	32
   293  007EA4  20                 	db	32
   294  007EA5  20                 	db	32
   295  007EA6  20                 	db	32
   296  007EA7  20                 	db	32
   297  007EA8  20                 	db	32
   298  007EA9  20                 	db	32
   299  007EAA  20                 	db	32
   300  007EAB  00                 	db	0
   301  007EAC                     STR_9:
   302  007EAC  45                 	db	69	;'E'
   303  007EAD  6E                 	db	110	;'n'
   304  007EAE  74                 	db	116	;'t'
   305  007EAF  65                 	db	101	;'e'
   306  007EB0  72                 	db	114	;'r'
   307  007EB1  20                 	db	32
   308  007EB2  6E                 	db	110	;'n'
   309  007EB3  65                 	db	101	;'e'
   310  007EB4  77                 	db	119	;'w'
   311  007EB5  20                 	db	32
   312  007EB6  70                 	db	112	;'p'
   313  007EB7  61                 	db	97	;'a'
   314  007EB8  73                 	db	115	;'s'
   315  007EB9  73                 	db	115	;'s'
   316  007EBA  20                 	db	32
   317  007EBB  20                 	db	32
   318  007EBC  20                 	db	32
   319  007EBD  20                 	db	32
   320  007EBE  20                 	db	32
   321  007EBF  20                 	db	32
   322  007EC0  20                 	db	32
   323  007EC1  20                 	db	32
   324  007EC2  20                 	db	32
   325  007EC3  20                 	db	32
   326  007EC4  20                 	db	32
   327  007EC5  20                 	db	32
   328  007EC6  20                 	db	32
   329  007EC7  20                 	db	32
   330  007EC8  20                 	db	32
   331  007EC9  00                 	db	0
   332  007ECA                     STR_6:
   333  007ECA  4F                 	db	79	;'O'
   334  007ECB  75                 	db	117	;'u'
   335  007ECC  74                 	db	116	;'t'
   336  007ECD  20                 	db	32
   337  007ECE  6F                 	db	111	;'o'
   338  007ECF  66                 	db	102	;'f'
   339  007ED0  20                 	db	32
   340  007ED1  6D                 	db	109	;'m'
   341  007ED2  6F                 	db	111	;'o'
   342  007ED3  76                 	db	118	;'v'
   343  007ED4  65                 	db	101	;'e'
   344  007ED5  20                 	db	32
   345  007ED6  21                 	db	33
   346  007ED7  21                 	db	33
   347  007ED8  21                 	db	33
   348  007ED9  20                 	db	32
   349  007EDA  20                 	db	32
   350  007EDB  20                 	db	32
   351  007EDC  20                 	db	32
   352  007EDD  20                 	db	32
   353  007EDE  20                 	db	32
   354  007EDF  20                 	db	32
   355  007EE0  20                 	db	32
   356  007EE1  20                 	db	32
   357  007EE2  20                 	db	32
   358  007EE3  20                 	db	32
   359  007EE4  20                 	db	32
   360  007EE5  00                 	db	0
   361  007EE6                     STR_2:
   362  007EE6  53                 	db	83	;'S'
   363  007EE7  75                 	db	117	;'u'
   364  007EE8  63                 	db	99	;'c'
   365  007EE9  63                 	db	99	;'c'
   366  007EEA  65                 	db	101	;'e'
   367  007EEB  73                 	db	115	;'s'
   368  007EEC  73                 	db	115	;'s'
   369  007EED  66                 	db	102	;'f'
   370  007EEE  75                 	db	117	;'u'
   371  007EEF  6C                 	db	108	;'l'
   372  007EF0  20                 	db	32
   373  007EF1  20                 	db	32
   374  007EF2  20                 	db	32
   375  007EF3  20                 	db	32
   376  007EF4  20                 	db	32
   377  007EF5  20                 	db	32
   378  007EF6  20                 	db	32
   379  007EF7  20                 	db	32
   380  007EF8  20                 	db	32
   381  007EF9  20                 	db	32
   382  007EFA  20                 	db	32
   383  007EFB  20                 	db	32
   384  007EFC  20                 	db	32
   385  007EFD  20                 	db	32
   386  007EFE  20                 	db	32
   387  007EFF  00                 	db	0
   388  007F00                     STR_1:
   389  007F00  45                 	db	69	;'E'
   390  007F01  6E                 	db	110	;'n'
   391  007F02  74                 	db	116	;'t'
   392  007F03  65                 	db	101	;'e'
   393  007F04  72                 	db	114	;'r'
   394  007F05  20                 	db	32
   395  007F06  70                 	db	112	;'p'
   396  007F07  61                 	db	97	;'a'
   397  007F08  73                 	db	115	;'s'
   398  007F09  73                 	db	115	;'s'
   399  007F0A  21                 	db	33
   400  007F0B  21                 	db	33
   401  007F0C  20                 	db	32
   402  007F0D  20                 	db	32
   403  007F0E  20                 	db	32
   404  007F0F  20                 	db	32
   405  007F10  20                 	db	32
   406  007F11  20                 	db	32
   407  007F12  20                 	db	32
   408  007F13  20                 	db	32
   409  007F14  20                 	db	32
   410  007F15  20                 	db	32
   411  007F16  20                 	db	32
   412  007F17  20                 	db	32
   413  007F18  20                 	db	32
   414  007F19  00                 	db	0
   415  007F1A                     STR_5:
   416  007F1A  46                 	db	70	;'F'
   417  007F1B  61                 	db	97	;'a'
   418  007F1C  6E                 	db	110	;'n'
   419  007F1D  20                 	db	32
   420  007F1E  74                 	db	116	;'t'
   421  007F1F  75                 	db	117	;'u'
   422  007F20  72                 	db	114	;'r'
   423  007F21  6E                 	db	110	;'n'
   424  007F22  69                 	db	105	;'i'
   425  007F23  6E                 	db	110	;'n'
   426  007F24  67                 	db	103	;'g'
   427  007F25  20                 	db	32
   428  007F26  6F                 	db	111	;'o'
   429  007F27  66                 	db	102	;'f'
   430  007F28  66                 	db	102	;'f'
   431  007F29  20                 	db	32
   432  007F2A  20                 	db	32
   433  007F2B  20                 	db	32
   434  007F2C  20                 	db	32
   435  007F2D  20                 	db	32
   436  007F2E  20                 	db	32
   437  007F2F  20                 	db	32
   438  007F30  20                 	db	32
   439  007F31  20                 	db	32
   440  007F32  20                 	db	32
   441  007F33  00                 	db	0
   442  007F34                     STR_4:
   443  007F34  46                 	db	70	;'F'
   444  007F35  61                 	db	97	;'a'
   445  007F36  6E                 	db	110	;'n'
   446  007F37  20                 	db	32
   447  007F38  74                 	db	116	;'t'
   448  007F39  75                 	db	117	;'u'
   449  007F3A  72                 	db	114	;'r'
   450  007F3B  6E                 	db	110	;'n'
   451  007F3C  69                 	db	105	;'i'
   452  007F3D  6E                 	db	110	;'n'
   453  007F3E  67                 	db	103	;'g'
   454  007F3F  20                 	db	32
   455  007F40  6F                 	db	111	;'o'
   456  007F41  6E                 	db	110	;'n'
   457  007F42  20                 	db	32
   458  007F43  20                 	db	32
   459  007F44  20                 	db	32
   460  007F45  20                 	db	32
   461  007F46  20                 	db	32
   462  007F47  20                 	db	32
   463  007F48  20                 	db	32
   464  007F49  20                 	db	32
   465  007F4A  20                 	db	32
   466  007F4B  20                 	db	32
   467  007F4C  00                 	db	0
   468  007F4D                     STR_12:
   469  007F4D  43                 	db	67	;'C'
   470  007F4E  68                 	db	104	;'h'
   471  007F4F  61                 	db	97	;'a'
   472  007F50  6E                 	db	110	;'n'
   473  007F51  67                 	db	103	;'g'
   474  007F52  65                 	db	101	;'e'
   475  007F53  20                 	db	32
   476  007F54  70                 	db	112	;'p'
   477  007F55  61                 	db	97	;'a'
   478  007F56  73                 	db	115	;'s'
   479  007F57  73                 	db	115	;'s'
   480  007F58  20                 	db	32
   481  007F59  46                 	db	70	;'F'
   482  007F5A  41                 	db	65	;'A'
   483  007F5B  49                 	db	73	;'I'
   484  007F5C  4C                 	db	76	;'L'
   485  007F5D  45                 	db	69	;'E'
   486  007F5E  44                 	db	68	;'D'
   487  007F5F  20                 	db	32
   488  007F60  20                 	db	32
   489  007F61  20                 	db	32
   490  007F62  20                 	db	32
   491  007F63  20                 	db	32
   492  007F64  00                 	db	0
   493  007F65                     STR_7:
   494  007F65  46                 	db	70	;'F'
   495  007F66  61                 	db	97	;'a'
   496  007F67  69                 	db	105	;'i'
   497  007F68  6C                 	db	108	;'l'
   498  007F69  65                 	db	101	;'e'
   499  007F6A  64                 	db	100	;'d'
   500  007F6B  20                 	db	32
   501  007F6C  20                 	db	32
   502  007F6D  20                 	db	32
   503  007F6E  20                 	db	32
   504  007F6F  20                 	db	32
   505  007F70  20                 	db	32
   506  007F71  20                 	db	32
   507  007F72  20                 	db	32
   508  007F73  20                 	db	32
   509  007F74  20                 	db	32
   510  007F75  20                 	db	32
   511  007F76  20                 	db	32
   512  007F77  20                 	db	32
   513  007F78  20                 	db	32
   514  007F79  20                 	db	32
   515  007F7A  00                 	db	0
   516  007F7B                     STR_8:
   517  007F7B  45                 	db	69	;'E'
   518  007F7C  6E                 	db	110	;'n'
   519  007F7D  5F                 	db	95	;'_'
   520  007F7E  70                 	db	112	;'p'
   521  007F7F  61                 	db	97	;'a'
   522  007F80  73                 	db	115	;'s'
   523  007F81  73                 	db	115	;'s'
   524  007F82  20                 	db	32
   525  007F83  70                 	db	112	;'p'
   526  007F84  72                 	db	114	;'r'
   527  007F85  65                 	db	101	;'e'
   528  007F86  73                 	db	115	;'s'
   529  007F87  65                 	db	101	;'e'
   530  007F88  6E                 	db	110	;'n'
   531  007F89  74                 	db	116	;'t'
   532  007F8A  20                 	db	32
   533  007F8B  20                 	db	32
   534  007F8C  20                 	db	32
   535  007F8D  20                 	db	32
   536  007F8E  20                 	db	32
   537  007F8F  00                 	db	0
   538  007F90                     STR_14:
   539  007F90  74                 	db	116	;'t'
   540  007F91  6F                 	db	111	;'o'
   541  007F92  20                 	db	32
   542  007F93  72                 	db	114	;'r'
   543  007F94  65                 	db	101	;'e'
   544  007F95  63                 	db	99	;'c'
   545  007F96  68                 	db	104	;'h'
   546  007F97  61                 	db	97	;'a'
   547  007F98  6E                 	db	110	;'n'
   548  007F99  67                 	db	103	;'g'
   549  007F9A  65                 	db	101	;'e'
   550  007F9B  20                 	db	32
   551  007F9C  70                 	db	112	;'p'
   552  007F9D  61                 	db	97	;'a'
   553  007F9E  73                 	db	115	;'s'
   554  007F9F  73                 	db	115	;'s'
   555  007FA0  20                 	db	32
   556  007FA1  20                 	db	32
   557  007FA2  20                 	db	32
   558  007FA3  20                 	db	32
   559  007FA4  00                 	db	0
   560  007FA5                     STR_11:
   561  007FA5  43                 	db	67	;'C'
   562  007FA6  68                 	db	104	;'h'
   563  007FA7  61                 	db	97	;'a'
   564  007FA8  6E                 	db	110	;'n'
   565  007FA9  67                 	db	103	;'g'
   566  007FAA  65                 	db	101	;'e'
   567  007FAB  20                 	db	32
   568  007FAC  70                 	db	112	;'p'
   569  007FAD  61                 	db	97	;'a'
   570  007FAE  73                 	db	115	;'s'
   571  007FAF  73                 	db	115	;'s'
   572  007FB0  20                 	db	32
   573  007FB1  4F                 	db	79	;'O'
   574  007FB2  4B                 	db	75	;'K'
   575  007FB3  20                 	db	32
   576  007FB4  20                 	db	32
   577  007FB5  20                 	db	32
   578  007FB6  20                 	db	32
   579  007FB7  20                 	db	32
   580  007FB8  00                 	db	0
   581  007FB9                     STR_3:
   582  007FB9  54                 	db	84	;'T'
   583  007FBA  65                 	db	101	;'e'
   584  007FBB  6D                 	db	109	;'m'
   585  007FBC  70                 	db	112	;'p'
   586  007FBD  65                 	db	101	;'e'
   587  007FBE  72                 	db	114	;'r'
   588  007FBF  61                 	db	97	;'a'
   589  007FC0  74                 	db	116	;'t'
   590  007FC1  75                 	db	117	;'u'
   591  007FC2  72                 	db	114	;'r'
   592  007FC3  65                 	db	101	;'e'
   593  007FC4  3D                 	db	61	;'='
   594  007FC5  25                 	db	37
   595  007FC6  30                 	db	48	;'0'
   596  007FC7  2E                 	db	46
   597  007FC8  31                 	db	49	;'1'
   598  007FC9  66                 	db	102	;'f'
   599  007FCA  00                 	db	0
   600  007FCB                     STR_18:
   601  007FCB  20                 	db	32
   602  007FCC  50                 	db	80	;'P'
   603  007FCD  52                 	db	82	;'R'
   604  007FCE  45                 	db	69	;'E'
   605  007FCF  53                 	db	83	;'S'
   606  007FD0  53                 	db	83	;'S'
   607  007FD1  20                 	db	32
   608  007FD2  45                 	db	69	;'E'
   609  007FD3  4E                 	db	78	;'N'
   610  007FD4  5F                 	db	95	;'_'
   611  007FD5  4B                 	db	75	;'K'
   612  007FD6  45                 	db	69	;'E'
   613  007FD7  59                 	db	89	;'Y'
   614  007FD8  21                 	db	33
   615  007FD9  21                 	db	33
   616  007FDA  20                 	db	32
   617  007FDB  00                 	db	0
   618  007FDC                     STR_17:
   619  007FDC  57                 	db	87	;'W'
   620  007FDD  45                 	db	69	;'E'
   621  007FDE  4C                 	db	76	;'L'
   622  007FDF  43                 	db	67	;'C'
   623  007FE0  4F                 	db	79	;'O'
   624  007FE1  4D                 	db	77	;'M'
   625  007FE2  45                 	db	69	;'E'
   626  007FE3  20                 	db	32
   627  007FE4  54                 	db	84	;'T'
   628  007FE5  4F                 	db	79	;'O'
   629  007FE6  20                 	db	32
   630  007FE7  48                 	db	72	;'H'
   631  007FE8  4F                 	db	79	;'O'
   632  007FE9  4D                 	db	77	;'M'
   633  007FEA  45                 	db	69	;'E'
   634  007FEB  21                 	db	33
   635  007FEC  00                 	db	0
   636  007FED                     STR_13:
   637  007FED  50                 	db	80	;'P'
   638  007FEE  72                 	db	114	;'r'
   639  007FEF  65                 	db	101	;'e'
   640  007FF0  73                 	db	115	;'s'
   641  007FF1  73                 	db	115	;'s'
   642  007FF2  20                 	db	32
   643  007FF3  52                 	db	82	;'R'
   644  007FF4  45                 	db	69	;'E'
   645  007FF5  53                 	db	83	;'S'
   646  007FF6  45                 	db	69	;'E'
   647  007FF7  54                 	db	84	;'T'
   648  007FF8  5F                 	db	95	;'_'
   649  007FF9  50                 	db	80	;'P'
   650  007FFA  41                 	db	65	;'A'
   651  007FFB  53                 	db	83	;'S'
   652  007FFC  53                 	db	83	;'S'
   653  007FFD  00                 	db	0
   654  0000                     
   655                           ; #config settings
   656  007FFE  00                 	db	0	; dummy byte at the end
   657  0000                     
   658                           	psect	cinit
   659  002C32                     __pcinit:
   660                           	opt stack 0
   661  002C32                     start_initialization:
   662                           	opt stack 0
   663  002C32                     __initialization:
   664                           	opt stack 0
   665                           
   666                           ; Initialize objects allocated to BANK0 (7 bytes)
   667                           ; load TBLPTR registers with __pidataBANK0
   668  002C32  0EFA               	movlw	low __pidataBANK0
   669  002C34  6EF6               	movwf	tblptrl,c
   670  002C36  0E2F               	movlw	high __pidataBANK0
   671  002C38  6EF7               	movwf	tblptrh,c
   672  002C3A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   673  002C3C  6EF8               	movwf	tblptru,c
   674  002C3E  EE00  F0F3         	lfsr	0,__pdataBANK0
   675  002C42  EE10 F007          	lfsr	1,7
   676  002C46                     copy_data0:
   677  002C46  0009               	tblrd		*+
   678  002C48  CFF5 FFEE          	movff	tablat,postinc0
   679  002C4C  50E5               	movf	postdec1,w,c
   680  002C4E  50E1               	movf	fsr1l,w,c
   681  002C50  E1FA               	bnz	copy_data0
   682                           
   683                           ; Initialize objects allocated to COMRAM (16 bytes)
   684                           ; load TBLPTR registers with __pidataCOMRAM
   685  002C52  0EE2               	movlw	low __pidataCOMRAM
   686  002C54  6EF6               	movwf	tblptrl,c
   687  002C56  0E2F               	movlw	high __pidataCOMRAM
   688  002C58  6EF7               	movwf	tblptrh,c
   689  002C5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   690  002C5C  6EF8               	movwf	tblptru,c
   691  002C5E  EE00  F046         	lfsr	0,__pdataCOMRAM
   692  002C62  EE10 F010          	lfsr	1,16
   693  002C66                     copy_data1:
   694  002C66  0009               	tblrd		*+
   695  002C68  CFF5 FFEE          	movff	tablat,postinc0
   696  002C6C  50E5               	movf	postdec1,w,c
   697  002C6E  50E1               	movf	fsr1l,w,c
   698  002C70  E1FA               	bnz	copy_data1
   699                           
   700                           ; Clear objects allocated to BANK1 (50 bytes)
   701  002C72  EE01  F000         	lfsr	0,__pbssBANK1
   702  002C76  0E32               	movlw	50
   703  002C78                     clear_0:
   704  002C78  6AEE               	clrf	postinc0,c
   705  002C7A  06E8               	decf	wreg,f,c
   706  002C7C  E1FD               	bnz	clear_0
   707                           
   708                           ; Clear objects allocated to BANK0 (20 bytes)
   709  002C7E  EE00  F0DF         	lfsr	0,__pbssBANK0
   710  002C82  0E14               	movlw	20
   711  002C84                     clear_1:
   712  002C84  6AEE               	clrf	postinc0,c
   713  002C86  06E8               	decf	wreg,f,c
   714  002C88  E1FD               	bnz	clear_1
   715                           
   716                           ; Clear objects allocated to COMRAM (3 bytes)
   717  002C8A  6A58               	clrf	(__pbssCOMRAM+2)& (0+255),c
   718  002C8C  6A57               	clrf	(__pbssCOMRAM+1)& (0+255),c
   719  002C8E  6A56               	clrf	__pbssCOMRAM& (0+255),c
   720  002C90                     end_of_initialization:
   721                           	opt stack 0
   722  002C90                     __end_of__initialization:
   723                           	opt stack 0
   724  002C90  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   725  002C92  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   726  002C94  0E00               	movlw	low (__Lmediumconst shr (0+16))
   727  002C96  6EF8               	movwf	tblptru,c
   728  002C98  0100               	movlb	0
   729  002C9A  EFAC  F005         	goto	_main	;jump to C main() function
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	bssCOMRAM
   740  000056                     __pbssCOMRAM:
   741                           	opt stack 0
   742  000056                     _value_adc:
   743                           	opt stack 0
   744  000056                     	ds	3
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	dataCOMRAM
   755  000046                     __pdataCOMRAM:
   756                           	opt stack 0
   757  000046                     _keypad:
   758                           	opt stack 0
   759  000046                     	ds	16
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           
   769                           	psect	bssBANK0
   770  0000DF                     __pbssBANK0:
   771                           	opt stack 0
   772  0000DF                     main@F3964:
   773                           	opt stack 0
   774  0000DF                     	ds	7
   775  0000E6                     main@F3966:
   776                           	opt stack 0
   777  0000E6                     	ds	7
   778  0000ED                     _tempurture:
   779                           	opt stack 0
   780  0000ED                     	ds	3
   781  0000F0                     _col_loc:
   782                           	opt stack 0
   783  0000F0                     	ds	1
   784  0000F1                     _rowloc:
   785                           	opt stack 0
   786  0000F1                     	ds	1
   787  0000F2                     _temp_col:
   788                           	opt stack 0
   789  0000F2                     	ds	1
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           
   799                           	psect	dataBANK0
   800  0000F3                     __pdataBANK0:
   801                           	opt stack 0
   802  0000F3                     main@F3968:
   803                           	opt stack 0
   804  0000F3                     	ds	7
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           postdec1	equ	0xFE5
   812                           fsr1l	equ	0xFE1
   813                           
   814                           	psect	bssBANK1
   815  000100                     __pbssBANK1:
   816                           	opt stack 0
   817  000100                     _buffer:
   818                           	opt stack 0
   819  000100                     	ds	50
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000060                     __pcstackBANK0:
   831                           	opt stack 0
   832  000060                     ??_isdigit:
   833  000060                     ?_strcmp:
   834                           	opt stack 0
   835  000060                     ?___awmod:
   836                           	opt stack 0
   837  000060                     ?___ftpack:
   838                           	opt stack 0
   839  000060                     ?___ftneg:
   840                           	opt stack 0
   841  000060                     ?__tdiv_to_l_:
   842                           	opt stack 0
   843  000060                     ?__div_to_l_:
   844                           	opt stack 0
   845  000060                     ?___lldiv:
   846                           	opt stack 0
   847  000060                     ?___llmod:
   848                           	opt stack 0
   849  000060                     MSdelay@val:
   850                           	opt stack 0
   851  000060                     ___awmod@dividend:
   852                           	opt stack 0
   853  000060                     memset@p1:
   854                           	opt stack 0
   855  000060                     strcmp@s1:
   856                           	opt stack 0
   857  000060                     __div_to_l_@f1:
   858                           	opt stack 0
   859  000060                     ___ftpack@arg:
   860                           	opt stack 0
   861  000060                     __tdiv_to_l_@f1:
   862                           	opt stack 0
   863  000060                     ___ftge@ff1:
   864                           	opt stack 0
   865  000060                     ___ftneg@f1:
   866                           	opt stack 0
   867  000060                     ___lldiv@dividend:
   868                           	opt stack 0
   869  000060                     ___llmod@dividend:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x0
   873  000060                     	ds	1
   874  000061                     _isdigit$826:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1
   878  000061                     	ds	1
   879  000062                     isdigit@c:
   880                           	opt stack 0
   881  000062                     MSdelay@i:
   882                           	opt stack 0
   883  000062                     ___awmod@divisor:
   884                           	opt stack 0
   885  000062                     memset@c:
   886                           	opt stack 0
   887  000062                     strcmp@s2:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x2
   891  000062                     	ds	1
   892  000063                     ___ftpack@exp:
   893                           	opt stack 0
   894  000063                     __div_to_l_@f2:
   895                           	opt stack 0
   896  000063                     __tdiv_to_l_@f2:
   897                           	opt stack 0
   898  000063                     ___ftge@ff2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x3
   902  000063                     	ds	1
   903  000064                     ??_strcmp:
   904  000064                     ___awmod@counter:
   905                           	opt stack 0
   906  000064                     ___ftpack@sign:
   907                           	opt stack 0
   908  000064                     MSdelay@j:
   909                           	opt stack 0
   910  000064                     memset@n:
   911                           	opt stack 0
   912  000064                     ___lldiv@divisor:
   913                           	opt stack 0
   914  000064                     ___llmod@divisor:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x4
   918  000064                     	ds	1
   919  000065                     ??___ftpack:
   920  000065                     ___awmod@sign:
   921                           	opt stack 0
   922  000065                     strcmp@r:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x5
   926  000065                     	ds	1
   927  000066                     ??_LCD_Command:
   928  000066                     ??_LCD_Char:
   929  000066                     ??__tdiv_to_l_:
   930  000066                     ??___ftge:
   931  000066                     ?___awdiv:
   932                           	opt stack 0
   933  000066                     ___awdiv@dividend:
   934                           	opt stack 0
   935  000066                     memset@p:
   936                           	opt stack 0
   937  000066                     __div_to_l_@quot:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x6
   941  000066                     	ds	1
   942  000067                     LCD_Command@cmd:
   943                           	opt stack 0
   944  000067                     LCD_Char@dat:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x7
   948  000067                     	ds	1
   949  000068                     ?___lltoft:
   950                           	opt stack 0
   951  000068                     ___llmod@counter:
   952                           	opt stack 0
   953  000068                     LCD_String@msg:
   954                           	opt stack 0
   955  000068                     ___awdiv@divisor:
   956                           	opt stack 0
   957  000068                     ___lldiv@quotient:
   958                           	opt stack 0
   959  000068                     ___lltoft@c:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x8
   963  000068                     	ds	1
   964  000069                     __tdiv_to_l_@quot:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x9
   968  000069                     	ds	1
   969  00006A                     ___awdiv@counter:
   970                           	opt stack 0
   971  00006A                     __div_to_l_@cntr:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0xA
   975  00006A                     	ds	1
   976  00006B                     ___awdiv@sign:
   977                           	opt stack 0
   978  00006B                     __div_to_l_@exp1:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0xB
   982  00006B                     	ds	1
   983  00006C                     ??___lltoft:
   984  00006C                     ___lldiv@counter:
   985                           	opt stack 0
   986  00006C                     ___awdiv@quotient:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xC
   990  00006C                     	ds	1
   991  00006D                     __tdiv_to_l_@cntr:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0xD
   995  00006D                     	ds	1
   996  00006E                     ?___wmul:
   997                           	opt stack 0
   998  00006E                     __tdiv_to_l_@exp1:
   999                           	opt stack 0
  1000  00006E                     ___wmul@multiplier:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xE
  1004  00006E                     	ds	2
  1005  000070                     ___lltoft@exp:
  1006                           	opt stack 0
  1007  000070                     ___wmul@multiplicand:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x10
  1011  000070                     	ds	2
  1012  000072                     ___wmul@product:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x12
  1016  000072                     	ds	2
  1017  000074                     ?___ftmul:
  1018                           	opt stack 0
  1019  000074                     ___ftmul@f1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x14
  1023  000074                     	ds	3
  1024  000077                     ___ftmul@f2:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x17
  1028  000077                     	ds	3
  1029  00007A                     ??___ftmul:
  1030                           
  1031                           ; 1 bytes @ 0x1A
  1032  00007A                     	ds	3
  1033  00007D                     ___ftmul@exp:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x1D
  1037  00007D                     	ds	1
  1038  00007E                     ___ftmul@f3_as_product:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x1E
  1042  00007E                     	ds	3
  1043  000081                     ___ftmul@cntr:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x21
  1047  000081                     	ds	1
  1048  000082                     ___ftmul@sign:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x22
  1052  000082                     	ds	1
  1053  000083                     ?_fround:
  1054                           	opt stack 0
  1055  000083                     ?_scale:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x23
  1059  000083                     	ds	3
  1060  000086                     _fround$1157:
  1061                           	opt stack 0
  1062  000086                     _scale$1158:
  1063                           	opt stack 0
  1064                           
  1065                           ; 3 bytes @ 0x26
  1066  000086                     	ds	3
  1067  000089                     scale@scl:
  1068                           	opt stack 0
  1069  000089                     _fround$1156:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x29
  1073  000089                     	ds	1
  1074  00008A                     ?___fttol:
  1075                           	opt stack 0
  1076  00008A                     ___fttol@f1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x2A
  1080  00008A                     	ds	2
  1081  00008C                     fround@prec:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x2C
  1085  00008C                     	ds	1
  1086  00008D                     ?___ftadd:
  1087                           	opt stack 0
  1088  00008D                     ___ftadd@f1:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x2D
  1092  00008D                     	ds	1
  1093  00008E                     ??___fttol:
  1094                           
  1095                           ; 1 bytes @ 0x2E
  1096  00008E                     	ds	2
  1097  000090                     ___ftadd@f2:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x30
  1101  000090                     	ds	3
  1102  000093                     ??___ftadd:
  1103  000093                     ___fttol@sign1:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x33
  1107  000093                     	ds	1
  1108  000094                     ___fttol@lval:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x34
  1112  000094                     	ds	2
  1113  000096                     ___ftadd@sign:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x36
  1117  000096                     	ds	1
  1118  000097                     ___ftadd@exp2:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x37
  1122  000097                     	ds	1
  1123  000098                     ___ftadd@exp1:
  1124                           	opt stack 0
  1125  000098                     ___fttol@exp1:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x38
  1129  000098                     	ds	1
  1130  000099                     ?___ftsub:
  1131                           	opt stack 0
  1132  000099                     ___ftsub@f1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x39
  1136  000099                     	ds	3
  1137  00009C                     ___ftsub@f2:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x3C
  1141  00009C                     	ds	3
  1142  00009F                     ?_sprintf:
  1143                           	opt stack 0
  1144  00009F                     sprintf@sp:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x3F
  1148  00009F                     	ds	2
  1149  0000A1                     sprintf@f:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x41
  1153  0000A1                     	ds	5
  1154  0000A6                     ??_sprintf:
  1155                           
  1156                           ; 1 bytes @ 0x46
  1157  0000A6                     	ds	6
  1158  0000AC                     _sprintf$1159:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x4C
  1162  0000AC                     	ds	3
  1163  0000AF                     sprintf@ap:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x4F
  1167  0000AF                     	ds	2
  1168  0000B1                     sprintf@val:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x51
  1172  0000B1                     	ds	4
  1173  0000B5                     sprintf@tmpval:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x55
  1177  0000B5                     	ds	4
  1178  0000B9                     sprintf@exp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x59
  1182  0000B9                     	ds	2
  1183  0000BB                     sprintf@flag:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x5B
  1187  0000BB                     	ds	2
  1188  0000BD                     sprintf@width:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x5D
  1192  0000BD                     	ds	2
  1193  0000BF                     sprintf@fval:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x5F
  1197  0000BF                     	ds	3
  1198  0000C2                     sprintf@prec:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x62
  1202  0000C2                     	ds	2
  1203  0000C4                     sprintf@c:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x64
  1207  0000C4                     	ds	1
  1208  0000C5                     main@pass_verify:
  1209                           	opt stack 0
  1210                           
  1211                           ; 7 bytes @ 0x65
  1212  0000C5                     	ds	7
  1213  0000CC                     main@pass_cmp:
  1214                           	opt stack 0
  1215                           
  1216                           ; 7 bytes @ 0x6C
  1217  0000CC                     	ds	7
  1218  0000D3                     main@pass:
  1219                           	opt stack 0
  1220                           
  1221                           ; 7 bytes @ 0x73
  1222  0000D3                     	ds	7
  1223  0000DA                     main@count_fail:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x7A
  1227  0000DA                     	ds	2
  1228  0000DC                     main@key:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x7C
  1232  0000DC                     	ds	1
  1233  0000DD                     main@count:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x7D
  1237  0000DD                     	ds	2
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           
  1247                           	psect	cstackCOMRAM
  1248  000001                     __pcstackCOMRAM:
  1249                           	opt stack 0
  1250  000001                     ?i2___ftpack:
  1251                           	opt stack 0
  1252  000001                     i2___ftpack@arg:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x0
  1256  000001                     	ds	3
  1257  000004                     i2___ftpack@exp:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x3
  1261  000004                     	ds	1
  1262  000005                     i2___ftpack@sign:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x4
  1266  000005                     	ds	1
  1267  000006                     ??i2___ftpack:
  1268                           
  1269                           ; 1 bytes @ 0x5
  1270  000006                     	ds	3
  1271  000009                     ?___awtoft:
  1272                           	opt stack 0
  1273  000009                     ?i2___ftmul:
  1274                           	opt stack 0
  1275  000009                     ___awtoft@c:
  1276                           	opt stack 0
  1277  000009                     i2___ftmul@f1:
  1278                           	opt stack 0
  1279                           
  1280                           ; 3 bytes @ 0x8
  1281  000009                     	ds	3
  1282  00000C                     ___awtoft@sign:
  1283                           	opt stack 0
  1284  00000C                     i2___ftmul@f2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0xB
  1288  00000C                     	ds	3
  1289  00000F                     ??i2___ftmul:
  1290                           
  1291                           ; 1 bytes @ 0xE
  1292  00000F                     	ds	3
  1293  000012                     i2___ftmul@exp:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x11
  1297  000012                     	ds	1
  1298  000013                     i2___ftmul@f3_as_product:
  1299                           	opt stack 0
  1300                           
  1301                           ; 3 bytes @ 0x12
  1302  000013                     	ds	3
  1303  000016                     i2___ftmul@cntr:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x15
  1307  000016                     	ds	1
  1308  000017                     i2___ftmul@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x16
  1312  000017                     	ds	1
  1313  000018                     ?___ftdiv:
  1314                           	opt stack 0
  1315  000018                     ___ftdiv@f1:
  1316                           	opt stack 0
  1317                           
  1318                           ; 3 bytes @ 0x17
  1319  000018                     	ds	3
  1320  00001B                     ___ftdiv@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x1A
  1324  00001B                     	ds	3
  1325  00001E                     ??___ftdiv:
  1326                           
  1327                           ; 1 bytes @ 0x1D
  1328  00001E                     	ds	3
  1329  000021                     ___ftdiv@cntr:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x20
  1333  000021                     	ds	1
  1334  000022                     ___ftdiv@f3:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x21
  1338  000022                     	ds	3
  1339  000025                     ___ftdiv@exp:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x24
  1343  000025                     	ds	1
  1344  000026                     ___ftdiv@sign:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x25
  1348  000026                     	ds	1
  1349  000027                     ?i2___ftadd:
  1350                           	opt stack 0
  1351  000027                     i2___ftadd@f1:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x26
  1355  000027                     	ds	3
  1356  00002A                     i2___ftadd@f2:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x29
  1360  00002A                     	ds	3
  1361  00002D                     ??i2___ftadd:
  1362                           
  1363                           ; 1 bytes @ 0x2C
  1364  00002D                     	ds	3
  1365  000030                     i2___ftadd@sign:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x2F
  1369  000030                     	ds	1
  1370  000031                     i2___ftadd@exp2:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x30
  1374  000031                     	ds	1
  1375  000032                     i2___ftadd@exp1:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x31
  1379  000032                     	ds	1
  1380  000033                     ??_ADC_ISR:
  1381                           
  1382                           ; 1 bytes @ 0x32
  1383  000033                     	ds	16
  1384  000043                     _ADC_ISR$1155:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x42
  1388  000043                     	ds	3
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398 ;;
  1399 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1400 ;;
  1401 ;; *************** function _main *****************
  1402 ;; Defined at:
  1403 ;;		line 126 in file "newmain.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;		None
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  pass            7  115[BANK0 ] unsigned char [7]
  1408 ;;  pass_cmp        7  108[BANK0 ] unsigned char [7]
  1409 ;;  pass_verify     7  101[BANK0 ] unsigned char [7]
  1410 ;;  count           2  125[BANK0 ] int 
  1411 ;;  count_fail      2  122[BANK0 ] int 
  1412 ;;  key             1  124[BANK0 ] unsigned char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1422 ;;      Params:         0       0       0       0       0       0       0       0       0
  1423 ;;      Locals:         0      26       0       0       0       0       0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1425 ;;      Totals:         0      26       0       0       0       0       0       0       0
  1426 ;;Total ram usage:       26 bytes
  1427 ;; Hardware stack levels required when called:    7
  1428 ;; This function calls:
  1429 ;;		_ADC_Interrupt_Init
  1430 ;;		_LCD_Char
  1431 ;;		_LCD_Clear
  1432 ;;		_LCD_Command
  1433 ;;		_LCD_Init
  1434 ;;		_LCD_String
  1435 ;;		_MSdelay
  1436 ;;		___ftge
  1437 ;;		_keyfind
  1438 ;;		_memset
  1439 ;;		_sprintf
  1440 ;;		_strcmp
  1441 ;; This function is called by:
  1442 ;;		Startup code after reset
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text0
  1447  000B58                     __ptext0:
  1448                           	opt stack 0
  1449  000B58                     _main:
  1450                           	opt stack 24
  1451                           
  1452                           ;newmain.c: 127: OSCCON=0x72;
  1453                           
  1454                           ;incstack = 0
  1455  000B58  0E72               	movlw	114
  1456  000B5A  6ED3               	movwf	4051,c	;volatile
  1457                           
  1458                           ;newmain.c: 128: LCD_Init();
  1459  000B5C  EC9A  F017         	call	_LCD_Init	;wreg free
  1460                           
  1461                           ;newmain.c: 129: ADC_Interrupt_Init();
  1462  000B60  ECE0  F017         	call	_ADC_Interrupt_Init	;wreg free
  1463                           
  1464                           ;newmain.c: 130: RBPU=0;
  1465  000B64  9EF1               	bcf	intcon2,7,c	;volatile
  1466                           
  1467                           ;newmain.c: 131: TRISA = 0xFF;
  1468  000B66  6892               	setf	3986,c	;volatile
  1469                           
  1470                           ;newmain.c: 132: PORTA=0xFF;
  1471  000B68  6880               	setf	3968,c	;volatile
  1472                           
  1473                           ;newmain.c: 133: TRISC=0x00;
  1474  000B6A  0E00               	movlw	0
  1475  000B6C  6E94               	movwf	3988,c	;volatile
  1476                           
  1477                           ;newmain.c: 134: LATC=0;
  1478  000B6E  0E00               	movlw	0
  1479  000B70  6E8B               	movwf	3979,c	;volatile
  1480                           
  1481                           ;newmain.c: 135: PORTC=0;
  1482  000B72  0E00               	movlw	0
  1483  000B74  6E82               	movwf	3970,c	;volatile
  1484                           
  1485                           ;newmain.c: 136: TRISE=0x07;
  1486  000B76  0E07               	movlw	7
  1487  000B78  6E96               	movwf	3990,c	;volatile
  1488                           
  1489                           ;newmain.c: 137: int count=0;
  1490  000B7A  0E00               	movlw	0
  1491  000B7C  0100               	movlb	0	; () banked
  1492  000B7E  6FDE               	movwf	(main@count+1)& (0+255),b
  1493  000B80  0E00               	movlw	0
  1494  000B82  6FDD               	movwf	main@count& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;newmain.c: 138: int count_fail=0;
  1498  000B84  0E00               	movlw	0
  1499  000B86  0100               	movlb	0	; () banked
  1500  000B88  6FDB               	movwf	(main@count_fail+1)& (0+255),b
  1501  000B8A  0E00               	movlw	0
  1502  000B8C  6FDA               	movwf	main@count_fail& (0+255),b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;newmain.c: 139: char pass[7]={0,};
  1506  000B8E  EE20  F0DF         	lfsr	2,main@F3964
  1507  000B92  EE10  F0D3         	lfsr	1,main@pass
  1508  000B96  0E06               	movlw	6
  1509  000B98                     u4371:
  1510  000B98  CFDB FFE3          	movff	plusw2,plusw1
  1511  000B9C  06E8               	decf	wreg,f,c
  1512  000B9E  E2FC               	bc	u4371
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;newmain.c: 140: char pass_verify[7]={0,};
  1516  000BA0  EE20  F0E6         	lfsr	2,main@F3966
  1517  000BA4  EE10  F0C5         	lfsr	1,main@pass_verify
  1518  000BA8  0E06               	movlw	6
  1519  000BAA                     u4381:
  1520  000BAA  CFDB FFE3          	movff	plusw2,plusw1
  1521  000BAE  06E8               	decf	wreg,f,c
  1522  000BB0  E2FC               	bc	u4381
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;newmain.c: 141: char pass_cmp[7]="123457";
  1526  000BB2  EE20  F0F3         	lfsr	2,main@F3968
  1527  000BB6  EE10  F0CC         	lfsr	1,main@pass_cmp
  1528  000BBA  0E06               	movlw	6
  1529  000BBC                     u4391:
  1530  000BBC  CFDB FFE3          	movff	plusw2,plusw1
  1531  000BC0  06E8               	decf	wreg,f,c
  1532  000BC2  E2FC               	bc	u4391
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;newmain.c: 142: unsigned char key=0;
  1536  000BC4  0E00               	movlw	0
  1537  000BC6  0100               	movlb	0	; () banked
  1538  000BC8  6FDC               	movwf	main@key& (0+255),b
  1539  000BCA                     l3823:
  1540                           
  1541                           ;newmain.c: 144: ADCON0bits.GO = 1;
  1542  000BCA  82C2               	bsf	4034,1,c	;volatile
  1543                           
  1544                           ;newmain.c: 147: if(PORTAbits.RA1==0){
  1545  000BCC  B280               	btfsc	3968,1,c	;volatile
  1546  000BCE  D0F4               	goto	l3903
  1547                           
  1548                           ;newmain.c: 148: LCD_Clear();
  1549  000BD0  ECF9  F017         	call	_LCD_Clear	;wreg free
  1550                           
  1551                           ;newmain.c: 149: LCD_Command(0x80);
  1552  000BD4  0E80               	movlw	128
  1553  000BD6  EC7C  F016         	call	_LCD_Command
  1554                           
  1555                           ;newmain.c: 150: LCD_String("Enter pass!!             ");
  1556  000BDA  0E00               	movlw	low STR_1
  1557  000BDC  0100               	movlb	0	; () banked
  1558  000BDE  6F68               	movwf	LCD_String@msg& (0+255),b
  1559  000BE0  0E7F               	movlw	high STR_1
  1560  000BE2  0100               	movlb	0	; () banked
  1561  000BE4  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1562  000BE6  ECD4  F016         	call	_LCD_String	;wreg free
  1563                           
  1564                           ;newmain.c: 151: LCD_Command(0xC0);
  1565  000BEA  0EC0               	movlw	192
  1566  000BEC  EC7C  F016         	call	_LCD_Command
  1567                           
  1568                           ;newmain.c: 152: while(count<6){
  1569  000BF0  D019               	goto	l3843
  1570  000BF2                     l3833:
  1571                           
  1572                           ;newmain.c: 153: key=keyfind();
  1573  000BF2  EC21  F011         	call	_keyfind	;wreg free
  1574  000BF6  0100               	movlb	0	; () banked
  1575  000BF8  6FDC               	movwf	main@key& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;newmain.c: 154: if(key>0){
  1579  000BFA  0100               	movlb	0	; () banked
  1580  000BFC  51DC               	movf	main@key& (0+255),w,b
  1581  000BFE  0100               	movlb	0	; () banked
  1582  000C00  B4D8               	btfsc	status,2,c
  1583  000C02  D010               	goto	l3843
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;newmain.c: 155: pass[count]=key;
  1587  000C04  0ED3               	movlw	low main@pass
  1588  000C06  0100               	movlb	0	; () banked
  1589  000C08  25DD               	addwf	main@count& (0+255),w,b
  1590  000C0A  6ED9               	movwf	fsr2l,c
  1591  000C0C  0E00               	movlw	high main@pass
  1592  000C0E  0100               	movlb	0	; () banked
  1593  000C10  21DE               	addwfc	(main@count+1)& (0+255),w,b
  1594  000C12  6EDA               	movwf	fsr2h,c
  1595  000C14  C0DC  FFDF         	movff	main@key,indf2
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;newmain.c: 156: LCD_Char('*');
  1599  000C18  0E2A               	movlw	42
  1600  000C1A  EC4F  F016         	call	_LCD_Char
  1601                           
  1602                           ;newmain.c: 157: count++;
  1603  000C1E  0100               	movlb	0	; () banked
  1604  000C20  4BDD               	infsnz	main@count& (0+255),f,b
  1605  000C22  2BDE               	incf	(main@count+1)& (0+255),f,b
  1606  000C24                     l3843:
  1607  000C24  0100               	movlb	0	; () banked
  1608  000C26  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  1609  000C28  D7E4               	goto	l3833
  1610  000C2A  0100               	movlb	0	; () banked
  1611  000C2C  51DE               	movf	(main@count+1)& (0+255),w,b
  1612  000C2E  E105               	bnz	l3845
  1613  000C30  0E06               	movlw	6
  1614  000C32  0100               	movlb	0	; () banked
  1615  000C34  5DDD               	subwf	main@count& (0+255),w,b
  1616  000C36  A0D8               	btfss	status,0,c
  1617  000C38  D7DC               	goto	l3833
  1618  000C3A                     l3845:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;newmain.c: 158: }
  1622                           ;newmain.c: 159: }
  1623                           ;newmain.c: 160: count=0;
  1624  000C3A  0E00               	movlw	0
  1625  000C3C  0100               	movlb	0	; () banked
  1626  000C3E  6FDE               	movwf	(main@count+1)& (0+255),b
  1627  000C40  0E00               	movlw	0
  1628  000C42  6FDD               	movwf	main@count& (0+255),b
  1629                           
  1630                           ;newmain.c: 161: pass[6]='\0';
  1631  000C44  0E00               	movlw	0
  1632  000C46  0100               	movlb	0	; () banked
  1633  000C48  6FD9               	movwf	(main@pass+6)& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;newmain.c: 162: if(!strcmp(pass,pass_cmp)){
  1637  000C4A  0ED3               	movlw	low main@pass
  1638  000C4C  0100               	movlb	0	; () banked
  1639  000C4E  6F60               	movwf	strcmp@s1& (0+255),b
  1640  000C50  0E00               	movlw	high main@pass
  1641  000C52  0100               	movlb	0	; () banked
  1642  000C54  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  1643  000C56  0ECC               	movlw	low main@pass_cmp
  1644  000C58  0100               	movlb	0	; () banked
  1645  000C5A  6F62               	movwf	strcmp@s2& (0+255),b
  1646  000C5C  0E00               	movlw	high main@pass_cmp
  1647  000C5E  0100               	movlb	0	; () banked
  1648  000C60  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1649  000C62  ECA9  F016         	call	_strcmp	;wreg free
  1650  000C66  0100               	movlb	0	; () banked
  1651  000C68  5160               	movf	?_strcmp& (0+255),w,b
  1652  000C6A  0100               	movlb	0	; () banked
  1653  000C6C  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1654  000C6E  A4D8               	btfss	status,2,c
  1655  000C70  D070               	goto	l3887
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;newmain.c: 163: count_fail=0;
  1659  000C72  0E00               	movlw	0
  1660  000C74  0100               	movlb	0	; () banked
  1661  000C76  6FDB               	movwf	(main@count_fail+1)& (0+255),b
  1662  000C78  0E00               	movlw	0
  1663  000C7A  6FDA               	movwf	main@count_fail& (0+255),b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;newmain.c: 164: LATCbits.LATC2=1;
  1667  000C7C  848B               	bsf	3979,2,c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;newmain.c: 165: LCD_Command(0xC0);
  1671  000C7E  0EC0               	movlw	192
  1672  000C80  EC7C  F016         	call	_LCD_Command
  1673                           
  1674                           ;newmain.c: 166: LCD_String("Successful               ");
  1675  000C84  0EE6               	movlw	low STR_2
  1676  000C86  0100               	movlb	0	; () banked
  1677  000C88  6F68               	movwf	LCD_String@msg& (0+255),b
  1678  000C8A  0E7E               	movlw	high STR_2
  1679  000C8C  0100               	movlb	0	; () banked
  1680  000C8E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1681  000C90  ECD4  F016         	call	_LCD_String	;wreg free
  1682                           
  1683                           ;newmain.c: 167: LCD_Command(0x80);
  1684  000C94  0E80               	movlw	128
  1685  000C96  EC7C  F016         	call	_LCD_Command
  1686                           
  1687                           ;newmain.c: 168: sprintf(buffer,"Temperature=%0.1f",tempurture);
  1688  000C9A  0E00               	movlw	low _buffer
  1689  000C9C  0100               	movlb	0	; () banked
  1690  000C9E  6F9F               	movwf	sprintf@sp& (0+255),b
  1691  000CA0  0E01               	movlw	high _buffer
  1692  000CA2  0100               	movlb	0	; () banked
  1693  000CA4  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1694  000CA6  0EB9               	movlw	low STR_3
  1695  000CA8  0100               	movlb	0	; () banked
  1696  000CAA  6FA1               	movwf	sprintf@f& (0+255),b
  1697  000CAC  0E7F               	movlw	high STR_3
  1698  000CAE  0100               	movlb	0	; () banked
  1699  000CB0  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1700  000CB2  C0ED  F0A3         	movff	_tempurture,?_sprintf+4
  1701  000CB6  C0EE  F0A4         	movff	_tempurture+1,?_sprintf+5
  1702  000CBA  C0EF  F0A5         	movff	_tempurture+2,?_sprintf+6
  1703  000CBE  EC09  F000         	call	_sprintf	;wreg free
  1704                           
  1705                           ;newmain.c: 169: LCD_String(buffer);
  1706  000CC2  0E00               	movlw	low _buffer
  1707  000CC4  0100               	movlb	0	; () banked
  1708  000CC6  6F68               	movwf	LCD_String@msg& (0+255),b
  1709  000CC8  0E01               	movlw	high _buffer
  1710  000CCA  0100               	movlb	0	; () banked
  1711  000CCC  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1712  000CCE  ECD4  F016         	call	_LCD_String	;wreg free
  1713                           
  1714                           ;newmain.c: 170: if(tempurture>29.0){
  1715  000CD2  0E00               	movlw	0
  1716  000CD4  0100               	movlb	0	; () banked
  1717  000CD6  6F60               	movwf	___ftge@ff1& (0+255),b
  1718  000CD8  0EE8               	movlw	232
  1719  000CDA  0100               	movlb	0	; () banked
  1720  000CDC  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  1721  000CDE  0E41               	movlw	65
  1722  000CE0  0100               	movlb	0	; () banked
  1723  000CE2  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  1724  000CE4  C0ED  F063         	movff	_tempurture,___ftge@ff2
  1725  000CE8  C0EE  F064         	movff	_tempurture+1,___ftge@ff2+1
  1726  000CEC  C0EF  F065         	movff	_tempurture+2,___ftge@ff2+2
  1727  000CF0  ECC5  F013         	call	___ftge	;wreg free
  1728  000CF4  0100               	movlb	0	; () banked
  1729  000CF6  B0D8               	btfsc	status,0,c
  1730  000CF8  D00D               	goto	l113
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;newmain.c: 171: LATCbits.LATC6=1;
  1734  000CFA  8C8B               	bsf	3979,6,c	;volatile
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;newmain.c: 172: LCD_Command(0xC0);
  1738  000CFC  0EC0               	movlw	192
  1739  000CFE  EC7C  F016         	call	_LCD_Command
  1740                           
  1741                           ;newmain.c: 173: LCD_String("Fan turning on          ");
  1742  000D02  0E34               	movlw	low STR_4
  1743  000D04  0100               	movlb	0	; () banked
  1744  000D06  6F68               	movwf	LCD_String@msg& (0+255),b
  1745  000D08  0E7F               	movlw	high STR_4
  1746  000D0A  0100               	movlb	0	; () banked
  1747  000D0C  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1748  000D0E  ECD4  F016         	call	_LCD_String	;wreg free
  1749                           
  1750                           ;newmain.c: 174: }
  1751  000D12  D00C               	goto	l3875
  1752  000D14                     l113:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;newmain.c: 175: else{
  1756                           ;newmain.c: 176: LATCbits.LATC6=0;
  1757  000D14  9C8B               	bcf	3979,6,c	;volatile
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;newmain.c: 177: LCD_Command(0xC0);
  1761  000D16  0EC0               	movlw	192
  1762  000D18  EC7C  F016         	call	_LCD_Command
  1763                           
  1764                           ;newmain.c: 178: LCD_String("Fan turning off          ");
  1765  000D1C  0E1A               	movlw	low STR_5
  1766  000D1E  0100               	movlb	0	; () banked
  1767  000D20  6F68               	movwf	LCD_String@msg& (0+255),b
  1768  000D22  0E7F               	movlw	high STR_5
  1769  000D24  0100               	movlb	0	; () banked
  1770  000D26  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1771  000D28  ECD4  F016         	call	_LCD_String	;wreg free
  1772  000D2C                     l3875:
  1773                           
  1774                           ;newmain.c: 179: }
  1775                           ;newmain.c: 180: MSdelay(3000);
  1776  000D2C  0E0B               	movlw	11
  1777  000D2E  0100               	movlb	0	; () banked
  1778  000D30  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1779  000D32  0EB8               	movlw	184
  1780  000D34  6F60               	movwf	MSdelay@val& (0+255),b
  1781  000D36  EC24  F017         	call	_MSdelay	;wreg free
  1782                           
  1783                           ;newmain.c: 181: LATCbits.LATC0=1;
  1784  000D3A  808B               	bsf	3979,0,c	;volatile
  1785                           
  1786                           ;newmain.c: 182: LATCbits.LATC1=0;
  1787  000D3C  928B               	bcf	3979,1,c	;volatile
  1788                           
  1789                           ;newmain.c: 183: MSdelay(5000);
  1790  000D3E  0E13               	movlw	19
  1791  000D40  0100               	movlb	0	; () banked
  1792  000D42  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1793  000D44  0E88               	movlw	136
  1794  000D46  6F60               	movwf	MSdelay@val& (0+255),b
  1795  000D48  EC24  F017         	call	_MSdelay	;wreg free
  1796                           
  1797                           ;newmain.c: 184: LATCbits.LATC0=0;
  1798  000D4C  908B               	bcf	3979,0,c	;volatile
  1799                           
  1800                           ;newmain.c: 185: LATCbits.LATC1=0;
  1801  000D4E  928B               	bcf	3979,1,c	;volatile
  1802                           
  1803                           ;newmain.c: 186: }
  1804  000D50  D033               	goto	l3903
  1805  000D52                     l3887:
  1806                           
  1807                           ;newmain.c: 187: else{
  1808                           ;newmain.c: 188: count_fail++;
  1809  000D52  0100               	movlb	0	; () banked
  1810  000D54  4BDA               	infsnz	main@count_fail& (0+255),f,b
  1811  000D56  2BDB               	incf	(main@count_fail+1)& (0+255),f,b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;newmain.c: 189: if(count_fail>2){
  1815  000D58  0100               	movlb	0	; () banked
  1816  000D5A  BFDB               	btfsc	(main@count_fail+1)& (0+255),7,b
  1817  000D5C  D01B               	goto	l3897
  1818  000D5E  0100               	movlb	0	; () banked
  1819  000D60  51DB               	movf	(main@count_fail+1)& (0+255),w,b
  1820  000D62  E105               	bnz	u4450
  1821  000D64  0E03               	movlw	3
  1822  000D66  0100               	movlb	0	; () banked
  1823  000D68  5DDA               	subwf	main@count_fail& (0+255),w,b
  1824  000D6A  A0D8               	btfss	status,0,c
  1825  000D6C  D013               	goto	l3897
  1826  000D6E                     u4450:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;newmain.c: 190: LCD_Command(0xC0);
  1830  000D6E  0EC0               	movlw	192
  1831  000D70  EC7C  F016         	call	_LCD_Command
  1832                           
  1833                           ;newmain.c: 191: LCD_String("Out of move !!!            ");
  1834  000D74  0ECA               	movlw	low STR_6
  1835  000D76  0100               	movlb	0	; () banked
  1836  000D78  6F68               	movwf	LCD_String@msg& (0+255),b
  1837  000D7A  0E7E               	movlw	high STR_6
  1838  000D7C  0100               	movlb	0	; () banked
  1839  000D7E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1840  000D80  ECD4  F016         	call	_LCD_String	;wreg free
  1841                           
  1842                           ;newmain.c: 192: MSdelay(2000);
  1843  000D84  0E07               	movlw	7
  1844  000D86  0100               	movlb	0	; () banked
  1845  000D88  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1846  000D8A  0ED0               	movlw	208
  1847  000D8C  6F60               	movwf	MSdelay@val& (0+255),b
  1848  000D8E  EC24  F017         	call	_MSdelay	;wreg free
  1849                           
  1850                           ;newmain.c: 194: }
  1851  000D92  D012               	goto	l3903
  1852  000D94                     l3897:
  1853                           
  1854                           ;newmain.c: 195: else{
  1855                           ;newmain.c: 196: LCD_Command(0xC0);
  1856  000D94  0EC0               	movlw	192
  1857  000D96  EC7C  F016         	call	_LCD_Command
  1858                           
  1859                           ;newmain.c: 197: LCD_String("Failed               ");
  1860  000D9A  0E65               	movlw	low STR_7
  1861  000D9C  0100               	movlb	0	; () banked
  1862  000D9E  6F68               	movwf	LCD_String@msg& (0+255),b
  1863  000DA0  0E7F               	movlw	high STR_7
  1864  000DA2  0100               	movlb	0	; () banked
  1865  000DA4  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1866  000DA6  ECD4  F016         	call	_LCD_String	;wreg free
  1867                           
  1868                           ;newmain.c: 198: MSdelay(2000);
  1869  000DAA  0E07               	movlw	7
  1870  000DAC  0100               	movlb	0	; () banked
  1871  000DAE  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1872  000DB0  0ED0               	movlw	208
  1873  000DB2  6F60               	movwf	MSdelay@val& (0+255),b
  1874  000DB4  EC24  F017         	call	_MSdelay	;wreg free
  1875  000DB8                     l3903:
  1876                           
  1877                           ;newmain.c: 199: }
  1878                           ;newmain.c: 200: }
  1879                           ;newmain.c: 201: }
  1880                           ;newmain.c: 206: if(PORTAbits.RA2==0) LATCbits.LATC2=0;
  1881  000DB8  A480               	btfss	3968,2,c	;volatile
  1882  000DBA  948B               	bcf	3979,2,c	;volatile
  1883                           
  1884                           ;newmain.c: 207: if(PORTEbits.RE2==0) LATCbits.LATC2=1;
  1885  000DBC  A484               	btfss	3972,2,c	;volatile
  1886  000DBE  848B               	bsf	3979,2,c	;volatile
  1887                           
  1888                           ;newmain.c: 208: if(PORTAbits.RA3==0){
  1889  000DC0  B680               	btfsc	3968,3,c	;volatile
  1890  000DC2  D00A               	goto	l3915
  1891                           
  1892                           ;newmain.c: 209: LATCbits.LATC0=0;
  1893  000DC4  908B               	bcf	3979,0,c	;volatile
  1894                           
  1895                           ;newmain.c: 210: LATCbits.LATC1=1;
  1896  000DC6  828B               	bsf	3979,1,c	;volatile
  1897                           
  1898                           ;newmain.c: 211: MSdelay(5000);
  1899  000DC8  0E13               	movlw	19
  1900  000DCA  0100               	movlb	0	; () banked
  1901  000DCC  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1902  000DCE  0E88               	movlw	136
  1903  000DD0  6F60               	movwf	MSdelay@val& (0+255),b
  1904  000DD2  EC24  F017         	call	_MSdelay	;wreg free
  1905                           
  1906                           ;newmain.c: 212: LATCbits.LATC0=0;
  1907  000DD6  908B               	bcf	3979,0,c	;volatile
  1908  000DD8                     l3915:
  1909                           
  1910                           ;newmain.c: 213: }
  1911                           ;newmain.c: 214: if(PORTAbits.RA4==0){
  1912  000DD8  B880               	btfsc	3968,4,c	;volatile
  1913  000DDA  D00B               	goto	l3925
  1914                           
  1915                           ;newmain.c: 215: LATCbits.LATC0=1;
  1916  000DDC  808B               	bsf	3979,0,c	;volatile
  1917                           
  1918                           ;newmain.c: 216: LATCbits.LATC1=0;
  1919  000DDE  928B               	bcf	3979,1,c	;volatile
  1920                           
  1921                           ;newmain.c: 217: MSdelay(5000);
  1922  000DE0  0E13               	movlw	19
  1923  000DE2  0100               	movlb	0	; () banked
  1924  000DE4  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1925  000DE6  0E88               	movlw	136
  1926  000DE8  6F60               	movwf	MSdelay@val& (0+255),b
  1927  000DEA  EC24  F017         	call	_MSdelay	;wreg free
  1928                           
  1929                           ;newmain.c: 218: LATCbits.LATC0=0;
  1930  000DEE  908B               	bcf	3979,0,c	;volatile
  1931                           
  1932                           ;newmain.c: 219: LATCbits.LATC1=0;
  1933  000DF0  928B               	bcf	3979,1,c	;volatile
  1934  000DF2                     l3925:
  1935                           
  1936                           ;newmain.c: 220: }
  1937                           ;newmain.c: 221: if(PORTEbits.RE0==0){
  1938  000DF2  A084               	btfss	3972,0,c	;volatile
  1939                           
  1940                           ;newmain.c: 222: LATCbits.LATC6=1;
  1941  000DF4  8C8B               	bsf	3979,6,c	;volatile
  1942                           
  1943                           ;newmain.c: 223: }
  1944                           ;newmain.c: 224: if(PORTEbits.RE1==0){
  1945  000DF6  A284               	btfss	3972,1,c	;volatile
  1946                           
  1947                           ;newmain.c: 225: LATCbits.LATC6=0;
  1948  000DF8  9C8B               	bcf	3979,6,c	;volatile
  1949                           
  1950                           ;newmain.c: 226: }
  1951                           ;newmain.c: 230: if(PORTAbits.RA5==0){
  1952  000DFA  BA80               	btfsc	3968,5,c	;volatile
  1953  000DFC  D147               	goto	l4027
  1954                           
  1955                           ;newmain.c: 231: LCD_Clear();
  1956  000DFE  ECF9  F017         	call	_LCD_Clear	;wreg free
  1957                           
  1958                           ;newmain.c: 232: LCD_Command(0x80);
  1959  000E02  0E80               	movlw	128
  1960  000E04  EC7C  F016         	call	_LCD_Command
  1961                           
  1962                           ;newmain.c: 233: LCD_String("En_pass present     ");
  1963  000E08  0E7B               	movlw	low STR_8
  1964  000E0A  0100               	movlb	0	; () banked
  1965  000E0C  6F68               	movwf	LCD_String@msg& (0+255),b
  1966  000E0E  0E7F               	movlw	high STR_8
  1967  000E10  0100               	movlb	0	; () banked
  1968  000E12  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1969  000E14  ECD4  F016         	call	_LCD_String	;wreg free
  1970                           
  1971                           ;newmain.c: 234: LCD_Command(0xC0);
  1972  000E18  0EC0               	movlw	192
  1973  000E1A  EC7C  F016         	call	_LCD_Command
  1974                           
  1975                           ;newmain.c: 235: while(count<6){
  1976  000E1E  D019               	goto	l3947
  1977  000E20                     l3937:
  1978                           
  1979                           ;newmain.c: 236: key=keyfind();
  1980  000E20  EC21  F011         	call	_keyfind	;wreg free
  1981  000E24  0100               	movlb	0	; () banked
  1982  000E26  6FDC               	movwf	main@key& (0+255),b
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;newmain.c: 237: if(key>0){
  1986  000E28  0100               	movlb	0	; () banked
  1987  000E2A  51DC               	movf	main@key& (0+255),w,b
  1988  000E2C  0100               	movlb	0	; () banked
  1989  000E2E  B4D8               	btfsc	status,2,c
  1990  000E30  D010               	goto	l3947
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;newmain.c: 238: pass[count]=key;
  1994  000E32  0ED3               	movlw	low main@pass
  1995  000E34  0100               	movlb	0	; () banked
  1996  000E36  25DD               	addwf	main@count& (0+255),w,b
  1997  000E38  6ED9               	movwf	fsr2l,c
  1998  000E3A  0E00               	movlw	high main@pass
  1999  000E3C  0100               	movlb	0	; () banked
  2000  000E3E  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2001  000E40  6EDA               	movwf	fsr2h,c
  2002  000E42  C0DC  FFDF         	movff	main@key,indf2
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;newmain.c: 239: LCD_Char('*');
  2006  000E46  0E2A               	movlw	42
  2007  000E48  EC4F  F016         	call	_LCD_Char
  2008                           
  2009                           ;newmain.c: 240: count++;
  2010  000E4C  0100               	movlb	0	; () banked
  2011  000E4E  4BDD               	infsnz	main@count& (0+255),f,b
  2012  000E50  2BDE               	incf	(main@count+1)& (0+255),f,b
  2013  000E52                     l3947:
  2014  000E52  0100               	movlb	0	; () banked
  2015  000E54  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2016  000E56  D7E4               	goto	l3937
  2017  000E58  0100               	movlb	0	; () banked
  2018  000E5A  51DE               	movf	(main@count+1)& (0+255),w,b
  2019  000E5C  E105               	bnz	l3949
  2020  000E5E  0E06               	movlw	6
  2021  000E60  0100               	movlb	0	; () banked
  2022  000E62  5DDD               	subwf	main@count& (0+255),w,b
  2023  000E64  A0D8               	btfss	status,0,c
  2024  000E66  D7DC               	goto	l3937
  2025  000E68                     l3949:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;newmain.c: 241: }
  2029                           ;newmain.c: 242: }
  2030                           ;newmain.c: 243: count=0;
  2031  000E68  0E00               	movlw	0
  2032  000E6A  0100               	movlb	0	; () banked
  2033  000E6C  6FDE               	movwf	(main@count+1)& (0+255),b
  2034  000E6E  0E00               	movlw	0
  2035  000E70  6FDD               	movwf	main@count& (0+255),b
  2036                           
  2037                           ;newmain.c: 244: pass[6]='\0';
  2038  000E72  0E00               	movlw	0
  2039  000E74  0100               	movlb	0	; () banked
  2040  000E76  6FD9               	movwf	(main@pass+6)& (0+255),b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;newmain.c: 245: LCD_Clear();
  2044  000E78  ECF9  F017         	call	_LCD_Clear	;wreg free
  2045                           
  2046                           ;newmain.c: 246: if(!strcmp(pass,pass_cmp)){
  2047  000E7C  0ED3               	movlw	low main@pass
  2048  000E7E  0100               	movlb	0	; () banked
  2049  000E80  6F60               	movwf	strcmp@s1& (0+255),b
  2050  000E82  0E00               	movlw	high main@pass
  2051  000E84  0100               	movlb	0	; () banked
  2052  000E86  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  2053  000E88  0ECC               	movlw	low main@pass_cmp
  2054  000E8A  0100               	movlb	0	; () banked
  2055  000E8C  6F62               	movwf	strcmp@s2& (0+255),b
  2056  000E8E  0E00               	movlw	high main@pass_cmp
  2057  000E90  0100               	movlb	0	; () banked
  2058  000E92  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  2059  000E94  ECA9  F016         	call	_strcmp	;wreg free
  2060  000E98  0100               	movlb	0	; () banked
  2061  000E9A  5160               	movf	?_strcmp& (0+255),w,b
  2062  000E9C  0100               	movlb	0	; () banked
  2063  000E9E  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  2064  000EA0  A4D8               	btfss	status,2,c
  2065  000EA2  D0D5               	goto	l4019
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;newmain.c: 247: LCD_Command(0x80);
  2069  000EA4  0E80               	movlw	128
  2070  000EA6  EC7C  F016         	call	_LCD_Command
  2071                           
  2072                           ;newmain.c: 248: LCD_String("Enter new pass               ");
  2073  000EAA  0EAC               	movlw	low STR_9
  2074  000EAC  0100               	movlb	0	; () banked
  2075  000EAE  6F68               	movwf	LCD_String@msg& (0+255),b
  2076  000EB0  0E7E               	movlw	high STR_9
  2077  000EB2  0100               	movlb	0	; () banked
  2078  000EB4  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2079  000EB6  ECD4  F016         	call	_LCD_String	;wreg free
  2080                           
  2081                           ;newmain.c: 249: LCD_Command(0xC0);
  2082  000EBA  0EC0               	movlw	192
  2083  000EBC  EC7C  F016         	call	_LCD_Command
  2084                           
  2085                           ;newmain.c: 250: while(count<6){
  2086  000EC0  D019               	goto	l3971
  2087  000EC2                     l3961:
  2088                           
  2089                           ;newmain.c: 251: key=keyfind();
  2090  000EC2  EC21  F011         	call	_keyfind	;wreg free
  2091  000EC6  0100               	movlb	0	; () banked
  2092  000EC8  6FDC               	movwf	main@key& (0+255),b
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;newmain.c: 252: if(key>0){
  2096  000ECA  0100               	movlb	0	; () banked
  2097  000ECC  51DC               	movf	main@key& (0+255),w,b
  2098  000ECE  0100               	movlb	0	; () banked
  2099  000ED0  B4D8               	btfsc	status,2,c
  2100  000ED2  D010               	goto	l3971
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;newmain.c: 253: pass_cmp[count]=key;
  2104  000ED4  0ECC               	movlw	low main@pass_cmp
  2105  000ED6  0100               	movlb	0	; () banked
  2106  000ED8  25DD               	addwf	main@count& (0+255),w,b
  2107  000EDA  6ED9               	movwf	fsr2l,c
  2108  000EDC  0E00               	movlw	high main@pass_cmp
  2109  000EDE  0100               	movlb	0	; () banked
  2110  000EE0  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2111  000EE2  6EDA               	movwf	fsr2h,c
  2112  000EE4  C0DC  FFDF         	movff	main@key,indf2
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;newmain.c: 254: LCD_Char('*');
  2116  000EE8  0E2A               	movlw	42
  2117  000EEA  EC4F  F016         	call	_LCD_Char
  2118                           
  2119                           ;newmain.c: 255: count++;
  2120  000EEE  0100               	movlb	0	; () banked
  2121  000EF0  4BDD               	infsnz	main@count& (0+255),f,b
  2122  000EF2  2BDE               	incf	(main@count+1)& (0+255),f,b
  2123  000EF4                     l3971:
  2124  000EF4  0100               	movlb	0	; () banked
  2125  000EF6  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2126  000EF8  D7E4               	goto	l3961
  2127  000EFA  0100               	movlb	0	; () banked
  2128  000EFC  51DE               	movf	(main@count+1)& (0+255),w,b
  2129  000EFE  E105               	bnz	l3973
  2130  000F00  0E06               	movlw	6
  2131  000F02  0100               	movlb	0	; () banked
  2132  000F04  5DDD               	subwf	main@count& (0+255),w,b
  2133  000F06  A0D8               	btfss	status,0,c
  2134  000F08  D7DC               	goto	l3961
  2135  000F0A                     l3973:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;newmain.c: 256: }
  2139                           ;newmain.c: 257: }
  2140                           ;newmain.c: 258: count=0;
  2141  000F0A  0E00               	movlw	0
  2142  000F0C  0100               	movlb	0	; () banked
  2143  000F0E  6FDE               	movwf	(main@count+1)& (0+255),b
  2144  000F10  0E00               	movlw	0
  2145  000F12  6FDD               	movwf	main@count& (0+255),b
  2146                           
  2147                           ;newmain.c: 259: pass_cmp[6]='\0';
  2148  000F14  0E00               	movlw	0
  2149  000F16  0100               	movlb	0	; () banked
  2150  000F18  6FD2               	movwf	(main@pass_cmp+6)& (0+255),b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;newmain.c: 260: LCD_Clear();
  2154  000F1A  ECF9  F017         	call	_LCD_Clear	;wreg free
  2155                           
  2156                           ;newmain.c: 261: LCD_Command(0x80);
  2157  000F1E  0E80               	movlw	128
  2158  000F20  EC7C  F016         	call	_LCD_Command
  2159                           
  2160                           ;newmain.c: 262: LCD_String("Verify new pass               ");
  2161  000F24  0E8D               	movlw	low STR_10
  2162  000F26  0100               	movlb	0	; () banked
  2163  000F28  6F68               	movwf	LCD_String@msg& (0+255),b
  2164  000F2A  0E7E               	movlw	high STR_10
  2165  000F2C  0100               	movlb	0	; () banked
  2166  000F2E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2167  000F30  ECD4  F016         	call	_LCD_String	;wreg free
  2168                           
  2169                           ;newmain.c: 263: LCD_Command(0xC0);
  2170  000F34  0EC0               	movlw	192
  2171  000F36  EC7C  F016         	call	_LCD_Command
  2172                           
  2173                           ;newmain.c: 264: while(count<6){
  2174  000F3A  D019               	goto	l3993
  2175  000F3C                     l3983:
  2176                           
  2177                           ;newmain.c: 265: key=keyfind();
  2178  000F3C  EC21  F011         	call	_keyfind	;wreg free
  2179  000F40  0100               	movlb	0	; () banked
  2180  000F42  6FDC               	movwf	main@key& (0+255),b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;newmain.c: 266: if(key>0){
  2184  000F44  0100               	movlb	0	; () banked
  2185  000F46  51DC               	movf	main@key& (0+255),w,b
  2186  000F48  0100               	movlb	0	; () banked
  2187  000F4A  B4D8               	btfsc	status,2,c
  2188  000F4C  D010               	goto	l3993
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;newmain.c: 267: pass_verify[count]=key;
  2192  000F4E  0EC5               	movlw	low main@pass_verify
  2193  000F50  0100               	movlb	0	; () banked
  2194  000F52  25DD               	addwf	main@count& (0+255),w,b
  2195  000F54  6ED9               	movwf	fsr2l,c
  2196  000F56  0E00               	movlw	high main@pass_verify
  2197  000F58  0100               	movlb	0	; () banked
  2198  000F5A  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2199  000F5C  6EDA               	movwf	fsr2h,c
  2200  000F5E  C0DC  FFDF         	movff	main@key,indf2
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;newmain.c: 268: LCD_Char('*');
  2204  000F62  0E2A               	movlw	42
  2205  000F64  EC4F  F016         	call	_LCD_Char
  2206                           
  2207                           ;newmain.c: 269: count++;
  2208  000F68  0100               	movlb	0	; () banked
  2209  000F6A  4BDD               	infsnz	main@count& (0+255),f,b
  2210  000F6C  2BDE               	incf	(main@count+1)& (0+255),f,b
  2211  000F6E                     l3993:
  2212  000F6E  0100               	movlb	0	; () banked
  2213  000F70  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2214  000F72  D7E4               	goto	l3983
  2215  000F74  0100               	movlb	0	; () banked
  2216  000F76  51DE               	movf	(main@count+1)& (0+255),w,b
  2217  000F78  E105               	bnz	l3995
  2218  000F7A  0E06               	movlw	6
  2219  000F7C  0100               	movlb	0	; () banked
  2220  000F7E  5DDD               	subwf	main@count& (0+255),w,b
  2221  000F80  A0D8               	btfss	status,0,c
  2222  000F82  D7DC               	goto	l3983
  2223  000F84                     l3995:
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;newmain.c: 270: }
  2227                           ;newmain.c: 271: }
  2228                           ;newmain.c: 272: count=0;
  2229  000F84  0E00               	movlw	0
  2230  000F86  0100               	movlb	0	; () banked
  2231  000F88  6FDE               	movwf	(main@count+1)& (0+255),b
  2232  000F8A  0E00               	movlw	0
  2233  000F8C  6FDD               	movwf	main@count& (0+255),b
  2234                           
  2235                           ;newmain.c: 273: pass_verify[6]='\0';
  2236  000F8E  0E00               	movlw	0
  2237  000F90  0100               	movlb	0	; () banked
  2238  000F92  6FCB               	movwf	(main@pass_verify+6)& (0+255),b
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;newmain.c: 274: if(!strcmp(pass_verify,pass_cmp)){
  2242  000F94  0EC5               	movlw	low main@pass_verify
  2243  000F96  0100               	movlb	0	; () banked
  2244  000F98  6F60               	movwf	strcmp@s1& (0+255),b
  2245  000F9A  0E00               	movlw	high main@pass_verify
  2246  000F9C  0100               	movlb	0	; () banked
  2247  000F9E  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  2248  000FA0  0ECC               	movlw	low main@pass_cmp
  2249  000FA2  0100               	movlb	0	; () banked
  2250  000FA4  6F62               	movwf	strcmp@s2& (0+255),b
  2251  000FA6  0E00               	movlw	high main@pass_cmp
  2252  000FA8  0100               	movlb	0	; () banked
  2253  000FAA  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  2254  000FAC  ECA9  F016         	call	_strcmp	;wreg free
  2255  000FB0  0100               	movlb	0	; () banked
  2256  000FB2  5160               	movf	?_strcmp& (0+255),w,b
  2257  000FB4  0100               	movlb	0	; () banked
  2258  000FB6  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  2259  000FB8  A4D8               	btfss	status,2,c
  2260  000FBA  D015               	goto	l4005
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;newmain.c: 275: LCD_Clear();
  2264  000FBC  ECF9  F017         	call	_LCD_Clear	;wreg free
  2265                           
  2266                           ;newmain.c: 276: LCD_Command(0x80);
  2267  000FC0  0E80               	movlw	128
  2268  000FC2  EC7C  F016         	call	_LCD_Command
  2269                           
  2270                           ;newmain.c: 277: LCD_String("Change pass OK     ");
  2271  000FC6  0EA5               	movlw	low STR_11
  2272  000FC8  0100               	movlb	0	; () banked
  2273  000FCA  6F68               	movwf	LCD_String@msg& (0+255),b
  2274  000FCC  0E7F               	movlw	high STR_11
  2275  000FCE  0100               	movlb	0	; () banked
  2276  000FD0  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2277  000FD2  ECD4  F016         	call	_LCD_String	;wreg free
  2278                           
  2279                           ;newmain.c: 278: MSdelay(2000);
  2280  000FD6  0E07               	movlw	7
  2281  000FD8  0100               	movlb	0	; () banked
  2282  000FDA  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2283  000FDC  0ED0               	movlw	208
  2284  000FDE  6F60               	movwf	MSdelay@val& (0+255),b
  2285  000FE0  EC24  F017         	call	_MSdelay	;wreg free
  2286                           
  2287                           ;newmain.c: 279: }
  2288  000FE4  D053               	goto	l4027
  2289  000FE6                     l4005:
  2290                           
  2291                           ;newmain.c: 280: else{
  2292                           ;newmain.c: 281: LCD_Clear();
  2293  000FE6  ECF9  F017         	call	_LCD_Clear	;wreg free
  2294                           
  2295                           ;newmain.c: 282: LCD_Command(0x80);
  2296  000FEA  0E80               	movlw	128
  2297  000FEC  EC7C  F016         	call	_LCD_Command
  2298                           
  2299                           ;newmain.c: 283: LCD_String("Change pass FAILED     ");
  2300  000FF0  0E4D               	movlw	low STR_12
  2301  000FF2  0100               	movlb	0	; () banked
  2302  000FF4  6F68               	movwf	LCD_String@msg& (0+255),b
  2303  000FF6  0E7F               	movlw	high STR_12
  2304  000FF8  0100               	movlb	0	; () banked
  2305  000FFA  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2306  000FFC  ECD4  F016         	call	_LCD_String	;wreg free
  2307                           
  2308                           ;newmain.c: 284: MSdelay(1500);
  2309  001000  0E05               	movlw	5
  2310  001002  0100               	movlb	0	; () banked
  2311  001004  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2312  001006  0EDC               	movlw	220
  2313  001008  6F60               	movwf	MSdelay@val& (0+255),b
  2314  00100A  EC24  F017         	call	_MSdelay	;wreg free
  2315                           
  2316                           ;newmain.c: 285: LCD_Clear();
  2317  00100E  ECF9  F017         	call	_LCD_Clear	;wreg free
  2318                           
  2319                           ;newmain.c: 286: LCD_Command(0x80);
  2320  001012  0E80               	movlw	128
  2321  001014  EC7C  F016         	call	_LCD_Command
  2322                           
  2323                           ;newmain.c: 287: LCD_String("Press RESET_PASS");
  2324  001018  0EED               	movlw	low STR_13
  2325  00101A  0100               	movlb	0	; () banked
  2326  00101C  6F68               	movwf	LCD_String@msg& (0+255),b
  2327  00101E  0E7F               	movlw	high STR_13
  2328  001020  0100               	movlb	0	; () banked
  2329  001022  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2330  001024  ECD4  F016         	call	_LCD_String	;wreg free
  2331                           
  2332                           ;newmain.c: 288: LCD_Command(0xC0);
  2333  001028  0EC0               	movlw	192
  2334  00102A  EC7C  F016         	call	_LCD_Command
  2335                           
  2336                           ;newmain.c: 289: LCD_String("to rechange pass    ");
  2337  00102E  0E90               	movlw	low STR_14
  2338  001030  0100               	movlb	0	; () banked
  2339  001032  6F68               	movwf	LCD_String@msg& (0+255),b
  2340  001034  0E7F               	movlw	high STR_14
  2341  001036  0100               	movlb	0	; () banked
  2342  001038  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2343  00103A  ECD4  F016         	call	_LCD_String	;wreg free
  2344                           
  2345                           ;newmain.c: 290: MSdelay(3000);
  2346  00103E  0E0B               	movlw	11
  2347  001040  0100               	movlb	0	; () banked
  2348  001042  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2349  001044  0EB8               	movlw	184
  2350  001046  6F60               	movwf	MSdelay@val& (0+255),b
  2351  001048  EC24  F017         	call	_MSdelay	;wreg free
  2352                           
  2353                           ;newmain.c: 291: }
  2354                           ;newmain.c: 292: }
  2355  00104C  D01F               	goto	l4027
  2356  00104E                     l4019:
  2357                           
  2358                           ;newmain.c: 293: else{
  2359                           ;newmain.c: 294: LCD_Clear();
  2360  00104E  ECF9  F017         	call	_LCD_Clear	;wreg free
  2361                           
  2362                           ;newmain.c: 295: LCD_Command(0x80);
  2363  001052  0E80               	movlw	128
  2364  001054  EC7C  F016         	call	_LCD_Command
  2365                           
  2366                           ;newmain.c: 296: LCD_String("Press RESET_PASS");
  2367  001058  0EED               	movlw	low STR_13
  2368  00105A  0100               	movlb	0	; () banked
  2369  00105C  6F68               	movwf	LCD_String@msg& (0+255),b
  2370  00105E  0E7F               	movlw	high STR_13
  2371  001060  0100               	movlb	0	; () banked
  2372  001062  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2373  001064  ECD4  F016         	call	_LCD_String	;wreg free
  2374                           
  2375                           ;newmain.c: 297: LCD_Command(0xC0);
  2376  001068  0EC0               	movlw	192
  2377  00106A  EC7C  F016         	call	_LCD_Command
  2378                           
  2379                           ;newmain.c: 298: LCD_String("to rechange pass    ");
  2380  00106E  0E90               	movlw	low STR_14
  2381  001070  0100               	movlb	0	; () banked
  2382  001072  6F68               	movwf	LCD_String@msg& (0+255),b
  2383  001074  0E7F               	movlw	high STR_14
  2384  001076  0100               	movlb	0	; () banked
  2385  001078  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2386  00107A  ECD4  F016         	call	_LCD_String	;wreg free
  2387                           
  2388                           ;newmain.c: 299: MSdelay(3000);
  2389  00107E  0E0B               	movlw	11
  2390  001080  0100               	movlb	0	; () banked
  2391  001082  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2392  001084  0EB8               	movlw	184
  2393  001086  6F60               	movwf	MSdelay@val& (0+255),b
  2394  001088  EC24  F017         	call	_MSdelay	;wreg free
  2395  00108C                     l4027:
  2396                           
  2397                           ;newmain.c: 300: }
  2398                           ;newmain.c: 301: }
  2399                           ;newmain.c: 304: LCD_Command(0x80);
  2400  00108C  0E80               	movlw	128
  2401  00108E  EC7C  F016         	call	_LCD_Command
  2402                           
  2403                           ;newmain.c: 305: LCD_String("WELCOME TO HOME!");
  2404  001092  0EDC               	movlw	low STR_17
  2405  001094  0100               	movlb	0	; () banked
  2406  001096  6F68               	movwf	LCD_String@msg& (0+255),b
  2407  001098  0E7F               	movlw	high STR_17
  2408  00109A  0100               	movlb	0	; () banked
  2409  00109C  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2410  00109E  ECD4  F016         	call	_LCD_String	;wreg free
  2411                           
  2412                           ;newmain.c: 306: LCD_Command(0xC0);
  2413  0010A2  0EC0               	movlw	192
  2414  0010A4  EC7C  F016         	call	_LCD_Command
  2415                           
  2416                           ;newmain.c: 307: LCD_String(" PRESS EN_KEY!! ");
  2417  0010A8  0ECB               	movlw	low STR_18
  2418  0010AA  0100               	movlb	0	; () banked
  2419  0010AC  6F68               	movwf	LCD_String@msg& (0+255),b
  2420  0010AE  0E7F               	movlw	high STR_18
  2421  0010B0  0100               	movlb	0	; () banked
  2422  0010B2  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2423  0010B4  ECD4  F016         	call	_LCD_String	;wreg free
  2424                           
  2425                           ;newmain.c: 308: count=0;
  2426  0010B8  0E00               	movlw	0
  2427  0010BA  0100               	movlb	0	; () banked
  2428  0010BC  6FDE               	movwf	(main@count+1)& (0+255),b
  2429  0010BE  0E00               	movlw	0
  2430  0010C0  6FDD               	movwf	main@count& (0+255),b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;newmain.c: 309: memset(pass,0,6);
  2434  0010C2  0ED3               	movlw	low main@pass
  2435  0010C4  0100               	movlb	0	; () banked
  2436  0010C6  6F60               	movwf	memset@p1& (0+255),b
  2437  0010C8  0E00               	movlw	high main@pass
  2438  0010CA  0100               	movlb	0	; () banked
  2439  0010CC  6F61               	movwf	(memset@p1+1)& (0+255),b
  2440  0010CE  0E00               	movlw	0
  2441  0010D0  0100               	movlb	0	; () banked
  2442  0010D2  6F63               	movwf	(memset@c+1)& (0+255),b
  2443  0010D4  0E00               	movlw	0
  2444  0010D6  6F62               	movwf	memset@c& (0+255),b
  2445  0010D8  0E00               	movlw	0
  2446  0010DA  0100               	movlb	0	; () banked
  2447  0010DC  6F65               	movwf	(memset@n+1)& (0+255),b
  2448  0010DE  0E06               	movlw	6
  2449  0010E0  6F64               	movwf	memset@n& (0+255),b
  2450  0010E2  EC80  F017         	call	_memset	;wreg free
  2451                           
  2452                           ;newmain.c: 310: memset(buffer,0,50);
  2453  0010E6  0E00               	movlw	low _buffer
  2454  0010E8  0100               	movlb	0	; () banked
  2455  0010EA  6F60               	movwf	memset@p1& (0+255),b
  2456  0010EC  0E01               	movlw	high _buffer
  2457  0010EE  0100               	movlb	0	; () banked
  2458  0010F0  6F61               	movwf	(memset@p1+1)& (0+255),b
  2459  0010F2  0E00               	movlw	0
  2460  0010F4  0100               	movlb	0	; () banked
  2461  0010F6  6F63               	movwf	(memset@c+1)& (0+255),b
  2462  0010F8  0E00               	movlw	0
  2463  0010FA  6F62               	movwf	memset@c& (0+255),b
  2464  0010FC  0E00               	movlw	0
  2465  0010FE  0100               	movlb	0	; () banked
  2466  001100  6F65               	movwf	(memset@n+1)& (0+255),b
  2467  001102  0E32               	movlw	50
  2468  001104  6F64               	movwf	memset@n& (0+255),b
  2469  001106  EC80  F017         	call	_memset	;wreg free
  2470  00110A  D55F               	goto	l3823
  2471  00110C                     __end_of_main:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           intcon2	equ	0xFF1
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           plusw1	equ	0xFE3
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           plusw2	equ	0xFDB
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _strcmp *****************
  2490 ;; Defined at:
  2491 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  2494 ;;		 -> main@pass_verify(7), main@pass(7), 
  2495 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  2496 ;;		 -> main@pass_cmp(7), 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  r               1    5[BANK0 ] char 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  2    0[BANK0 ] int 
  2501 ;; Registers used:
  2502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2508 ;;      Params:         0       4       0       0       0       0       0       0       0
  2509 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2510 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2511 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2512 ;;Total ram usage:        6 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    3
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text1
  2523  002D52                     __ptext1:
  2524                           	opt stack 0
  2525  002D52                     _strcmp:
  2526                           	opt stack 27
  2527                           
  2528                           ;incstack = 0
  2529  002D52  D006               	goto	l3295
  2530  002D54                     l3293:
  2531  002D54  0100               	movlb	0	; () banked
  2532  002D56  4B60               	infsnz	strcmp@s1& (0+255),f,b
  2533  002D58  2B61               	incf	(strcmp@s1+1)& (0+255),f,b
  2534  002D5A  0100               	movlb	0	; () banked
  2535  002D5C  4B62               	infsnz	strcmp@s2& (0+255),f,b
  2536  002D5E  2B63               	incf	(strcmp@s2+1)& (0+255),f,b
  2537  002D60                     l3295:
  2538  002D60  C060  FFD9         	movff	strcmp@s1,fsr2l
  2539  002D64  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  2540  002D68  50DF               	movf	indf2,w,c
  2541  002D6A  0100               	movlb	0	; () banked
  2542  002D6C  6F64               	movwf	??_strcmp& (0+255),b
  2543  002D6E  C062  FFD9         	movff	strcmp@s2,fsr2l
  2544  002D72  C063  FFDA         	movff	strcmp@s2+1,fsr2h
  2545  002D76  50DF               	movf	indf2,w,c
  2546  002D78  0800               	sublw	0
  2547  002D7A  0100               	movlb	0	; () banked
  2548  002D7C  2564               	addwf	??_strcmp& (0+255),w,b
  2549  002D7E  0100               	movlb	0	; () banked
  2550  002D80  6F65               	movwf	strcmp@r& (0+255),b
  2551  002D82  0100               	movlb	0	; () banked
  2552  002D84  5165               	movf	strcmp@r& (0+255),w,b
  2553  002D86  A4D8               	btfss	status,2,c
  2554  002D88  D007               	goto	l3299
  2555                           
  2556                           ; BSR set to: 0
  2557  002D8A  C060  FFD9         	movff	strcmp@s1,fsr2l
  2558  002D8E  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  2559  002D92  50DF               	movf	indf2,w,c
  2560  002D94  A4D8               	btfss	status,2,c
  2561  002D96  D7DE               	goto	l3293
  2562  002D98                     l3299:
  2563                           
  2564                           ; BSR set to: 0
  2565  002D98  0100               	movlb	0	; () banked
  2566  002D9A  5165               	movf	strcmp@r& (0+255),w,b
  2567  002D9C  0100               	movlb	0	; () banked
  2568  002D9E  6F60               	movwf	?_strcmp& (0+255),b
  2569  002DA0  6B61               	clrf	(?_strcmp+1)& (0+255),b
  2570  002DA2  BF60               	btfsc	?_strcmp& (0+255),7,b
  2571  002DA4  0761               	decf	(?_strcmp+1)& (0+255),f,b
  2572  002DA6  0012               	return	
  2573  002DA8                     __end_of_strcmp:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           intcon2	equ	0xFF1
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postdec1	equ	0xFE5
  2583                           plusw1	equ	0xFE3
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           plusw2	equ	0xFDB
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _sprintf *****************
  2592 ;; Defined at:
  2593 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  2596 ;;		 -> buffer(50), 
  2597 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  2598 ;;		 -> STR_3(18), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  tmpval          4   85[BANK0 ] struct .
  2601 ;;  val             4   81[BANK0 ] unsigned long 
  2602 ;;  fval            3   95[BANK0 ] unsigned long 
  2603 ;;  cp              3    0        PTR const unsigned char 
  2604 ;;  prec            2   98[BANK0 ] int 
  2605 ;;  width           2   93[BANK0 ] int 
  2606 ;;  flag            2   91[BANK0 ] unsigned short 
  2607 ;;  exp             2   89[BANK0 ] int 
  2608 ;;  ap              2   79[BANK0 ] PTR void [1]
  2609 ;;		 -> ?_sprintf(2), 
  2610 ;;  len             2    0        unsigned int 
  2611 ;;  c               1  100[BANK0 ] char 
  2612 ;;  d               1    0        unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  2   63[BANK0 ] int 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2622 ;;      Params:         0       7       0       0       0       0       0       0       0
  2623 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2624 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2625 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2626 ;;Total ram usage:       38 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    6
  2629 ;; This function calls:
  2630 ;;		___awdiv
  2631 ;;		___ftadd
  2632 ;;		___ftge
  2633 ;;		___ftmul
  2634 ;;		___ftneg
  2635 ;;		___ftsub
  2636 ;;		___fttol
  2637 ;;		___lldiv
  2638 ;;		___llmod
  2639 ;;		___lltoft
  2640 ;;		___wmul
  2641 ;;		__div_to_l_
  2642 ;;		__tdiv_to_l_
  2643 ;;		_fround
  2644 ;;		_isdigit
  2645 ;;		_scale
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text2
  2652  000012                     __ptext2:
  2653                           	opt stack 0
  2654  000012                     _sprintf:
  2655                           	opt stack 24
  2656                           
  2657                           ;doprnt.c: 494: va_list ap;
  2658                           ;doprnt.c: 499: signed char c;
  2659                           ;doprnt.c: 501: int width;
  2660                           ;doprnt.c: 504: int prec;
  2661                           ;doprnt.c: 508: unsigned short flag;
  2662                           ;doprnt.c: 515: char d;
  2663                           ;doprnt.c: 516: double fval;
  2664                           ;doprnt.c: 517: int exp;
  2665                           ;doprnt.c: 523: union {
  2666                           ;doprnt.c: 524: unsigned long vd;
  2667                           ;doprnt.c: 525: double integ;
  2668                           ;doprnt.c: 526: } tmpval;
  2669                           ;doprnt.c: 528: unsigned long val;
  2670                           ;doprnt.c: 529: unsigned len;
  2671                           ;doprnt.c: 530: const char * cp;
  2672                           ;doprnt.c: 533: *ap = __va_start();
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;incstack = 0
  2676  000012  0EA3               	movlw	low (?_sprintf+4)
  2677  000014  0100               	movlb	0	; () banked
  2678  000016  6FAF               	movwf	sprintf@ap& (0+255),b
  2679  000018  0E00               	movlw	high (?_sprintf+4)
  2680  00001A  0100               	movlb	0	; () banked
  2681  00001C  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  2682                           
  2683                           ;doprnt.c: 536: while(c = *f++) {
  2684  00001E  EF96  F005         	goto	l3597
  2685  000022                     l3305:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;doprnt.c: 538: if(c != '%')
  2689  000022  0E25               	movlw	37
  2690  000024  0100               	movlb	0	; () banked
  2691  000026  19C4               	xorwf	sprintf@c& (0+255),w,b
  2692  000028  B4D8               	btfsc	status,2,c
  2693  00002A  D008               	goto	l3311
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 540: {
  2697                           ;doprnt.c: 541: ((*sp++ = (c)));
  2698  00002C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2699  000030  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2700  000034  C0C4  FFDF         	movff	sprintf@c,indf2
  2701  000038  EF93  F005         	goto	l3595
  2702  00003C                     l3311:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;doprnt.c: 543: }
  2706                           ;doprnt.c: 546: width = 0;
  2707  00003C  0E00               	movlw	0
  2708  00003E  0100               	movlb	0	; () banked
  2709  000040  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2710  000042  0E00               	movlw	0
  2711  000044  6FBD               	movwf	sprintf@width& (0+255),b
  2712                           
  2713                           ;doprnt.c: 548: flag = 0;
  2714  000046  0E00               	movlw	0
  2715  000048  0100               	movlb	0	; () banked
  2716  00004A  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  2717  00004C  0E00               	movlw	0
  2718  00004E  6FBB               	movwf	sprintf@flag& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;doprnt.c: 551: switch(*f) {
  2722                           
  2723                           ;doprnt.c: 550: for(;;) {
  2724  000050  D005               	goto	l3317
  2725  000052                     l3313:
  2726                           
  2727                           ;doprnt.c: 580: flag |= 0x04;
  2728  000052  0100               	movlb	0	; () banked
  2729  000054  85BB               	bsf	sprintf@flag& (0+255),2,b
  2730                           
  2731                           ;doprnt.c: 581: f++;
  2732  000056  0100               	movlb	0	; () banked
  2733  000058  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2734  00005A  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2735  00005C                     l3317:
  2736  00005C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2737  000060  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2738  000064                     	if	0	;tblptru may be non-zero
  2739  000064                     	endif
  2740  000064                     	if	0	;tblptru may be non-zero
  2741  000064                     	endif
  2742  000064  0008               	tblrd		*
  2743  000066  50F5               	movf	tablat,w,c
  2744                           
  2745                           ; Switch size 1, requested type "space"
  2746                           ; Number of cases is 1, Range of values is 48 to 48
  2747                           ; switch strategies available:
  2748                           ; Name         Instructions Cycles
  2749                           ; simple_byte            4     3 (average)
  2750                           ;	Chosen strategy is simple_byte
  2751  000068  0A30               	xorlw	48	; case 48
  2752  00006A  B4D8               	btfsc	status,2,c
  2753  00006C  D7F2               	goto	l3313
  2754                           
  2755                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2756                           
  2757                           ;doprnt.c: 586: }
  2758                           
  2759                           ;doprnt.c: 585: break;
  2760  00006E  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2761  000072  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2762  000076                     	if	0	;tblptru may be non-zero
  2763  000076                     	endif
  2764  000076                     	if	0	;tblptru may be non-zero
  2765  000076                     	endif
  2766  000076  0008               	tblrd		*
  2767  000078  50F5               	movf	tablat,w,c
  2768  00007A  ECCB  F017         	call	_isdigit
  2769  00007E  A0D8               	btfss	status,0,c
  2770  000080  D040               	goto	l3331
  2771                           
  2772                           ;doprnt.c: 598: width = 0;
  2773  000082  0E00               	movlw	0
  2774  000084  0100               	movlb	0	; () banked
  2775  000086  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2776  000088  0E00               	movlw	0
  2777  00008A  6FBD               	movwf	sprintf@width& (0+255),b
  2778  00008C                     l3323:
  2779                           
  2780                           ;doprnt.c: 600: width *= 10;
  2781  00008C  C0BD  F06E         	movff	sprintf@width,___wmul@multiplier
  2782  000090  C0BE  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  2783  000094  0E00               	movlw	0
  2784  000096  0100               	movlb	0	; () banked
  2785  000098  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2786  00009A  0E0A               	movlw	10
  2787  00009C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2788  00009E  EC65  F017         	call	___wmul	;wreg free
  2789  0000A2  C06E  F0BD         	movff	?___wmul,sprintf@width
  2790  0000A6  C06F  F0BE         	movff	?___wmul+1,sprintf@width+1
  2791                           
  2792                           ;doprnt.c: 601: width += *f++ - '0';
  2793  0000AA  0ED0               	movlw	208
  2794  0000AC  0100               	movlb	0	; () banked
  2795  0000AE  6FA6               	movwf	??_sprintf& (0+255),b
  2796  0000B0  0EFF               	movlw	255
  2797  0000B2  0100               	movlb	0	; () banked
  2798  0000B4  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2799  0000B6  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2800  0000BA  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2801  0000BE                     	if	0	;tblptru may be non-zero
  2802  0000BE                     	endif
  2803  0000BE                     	if	0	;tblptru may be non-zero
  2804  0000BE                     	endif
  2805  0000BE  0008               	tblrd		*
  2806  0000C0  50F5               	movf	tablat,w,c
  2807  0000C2  0100               	movlb	0	; () banked
  2808  0000C4  6FA8               	movwf	(??_sprintf+2)& (0+255),b
  2809  0000C6  6BA9               	clrf	(??_sprintf+3)& (0+255),b
  2810  0000C8  0100               	movlb	0	; () banked
  2811  0000CA  51A6               	movf	??_sprintf& (0+255),w,b
  2812  0000CC  0100               	movlb	0	; () banked
  2813  0000CE  27A8               	addwf	(??_sprintf+2)& (0+255),f,b
  2814  0000D0  0100               	movlb	0	; () banked
  2815  0000D2  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  2816  0000D4  0100               	movlb	0	; () banked
  2817  0000D6  23A9               	addwfc	(??_sprintf+3)& (0+255),f,b
  2818  0000D8  0100               	movlb	0	; () banked
  2819  0000DA  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  2820  0000DC  0100               	movlb	0	; () banked
  2821  0000DE  27BD               	addwf	sprintf@width& (0+255),f,b
  2822  0000E0  0100               	movlb	0	; () banked
  2823  0000E2  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  2824  0000E4  0100               	movlb	0	; () banked
  2825  0000E6  23BE               	addwfc	(sprintf@width+1)& (0+255),f,b
  2826                           
  2827                           ; BSR set to: 0
  2828  0000E8  0100               	movlb	0	; () banked
  2829  0000EA  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2830  0000EC  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2834  0000EE  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2835  0000F2  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2836  0000F6                     	if	0	;tblptru may be non-zero
  2837  0000F6                     	endif
  2838  0000F6                     	if	0	;tblptru may be non-zero
  2839  0000F6                     	endif
  2840  0000F6  0008               	tblrd		*
  2841  0000F8  50F5               	movf	tablat,w,c
  2842  0000FA  ECCB  F017         	call	_isdigit
  2843  0000FE  B0D8               	btfsc	status,0,c
  2844  000100  D7C5               	goto	l3323
  2845  000102                     l3331:
  2846                           
  2847                           ;doprnt.c: 608: }
  2848                           ;doprnt.c: 611: if(*f == '.') {
  2849  000102  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2850  000106  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2851  00010A                     	if	0	;tblptru may be non-zero
  2852  00010A                     	endif
  2853  00010A                     	if	0	;tblptru may be non-zero
  2854  00010A                     	endif
  2855  00010A  0008               	tblrd		*
  2856  00010C  50F5               	movf	tablat,w,c
  2857  00010E  0A2E               	xorlw	46
  2858  000110  A4D8               	btfss	status,2,c
  2859  000112  D039               	goto	l3343
  2860                           
  2861                           ;doprnt.c: 612: flag |= 0x4000;
  2862  000114  0100               	movlb	0	; () banked
  2863  000116  8DBC               	bsf	(sprintf@flag+1)& (0+255),6,b
  2864                           
  2865                           ;doprnt.c: 613: f++;
  2866  000118  0100               	movlb	0	; () banked
  2867  00011A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2868  00011C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;doprnt.c: 620: {
  2872                           ;doprnt.c: 621: prec = 0;
  2873  00011E  0E00               	movlw	0
  2874  000120  0100               	movlb	0	; () banked
  2875  000122  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2876  000124  0E00               	movlw	0
  2877  000126  6FC2               	movwf	sprintf@prec& (0+255),b
  2878                           
  2879                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2880  000128  D023               	goto	l3341
  2881  00012A                     l3337:
  2882                           
  2883                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2884  00012A  C0C2  F06E         	movff	sprintf@prec,___wmul@multiplier
  2885  00012E  C0C3  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2886  000132  0E00               	movlw	0
  2887  000134  0100               	movlb	0	; () banked
  2888  000136  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2889  000138  0E0A               	movlw	10
  2890  00013A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2891  00013C  EC65  F017         	call	___wmul	;wreg free
  2892  000140  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2893  000144  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2894  000148                     	if	0	;tblptru may be non-zero
  2895  000148                     	endif
  2896  000148                     	if	0	;tblptru may be non-zero
  2897  000148                     	endif
  2898  000148  0008               	tblrd		*
  2899  00014A  50F5               	movf	tablat,w,c
  2900  00014C  0100               	movlb	0	; () banked
  2901  00014E  276E               	addwf	?___wmul& (0+255),f,b
  2902  000150  0E00               	movlw	0
  2903  000152  0100               	movlb	0	; () banked
  2904  000154  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  2905  000156  0ED0               	movlw	208
  2906  000158  0100               	movlb	0	; () banked
  2907  00015A  256E               	addwf	?___wmul& (0+255),w,b
  2908  00015C  0100               	movlb	0	; () banked
  2909  00015E  6FC2               	movwf	sprintf@prec& (0+255),b
  2910  000160  0EFF               	movlw	255
  2911  000162  0100               	movlb	0	; () banked
  2912  000164  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2913  000166  0100               	movlb	0	; () banked
  2914  000168  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917  00016A  0100               	movlb	0	; () banked
  2918  00016C  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2919  00016E  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2920  000170                     l3341:
  2921                           
  2922                           ; BSR set to: 0
  2923  000170  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2924  000174  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2925  000178                     	if	0	;tblptru may be non-zero
  2926  000178                     	endif
  2927  000178                     	if	0	;tblptru may be non-zero
  2928  000178                     	endif
  2929  000178  0008               	tblrd		*
  2930  00017A  50F5               	movf	tablat,w,c
  2931  00017C  ECCB  F017         	call	_isdigit
  2932  000180  A0D8               	btfss	status,0,c
  2933  000182  D00C               	goto	l3351
  2934  000184  D7D2               	goto	l3337
  2935  000186                     l3343:
  2936                           
  2937                           ;doprnt.c: 626: prec = 0;
  2938  000186  0E00               	movlw	0
  2939  000188  0100               	movlb	0	; () banked
  2940  00018A  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2941  00018C  0E00               	movlw	0
  2942  00018E  6FC2               	movwf	sprintf@prec& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 628: flag |= 0x1000;
  2946  000190  0100               	movlb	0	; () banked
  2947  000192  89BC               	bsf	(sprintf@flag+1)& (0+255),4,b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;doprnt.c: 630: }
  2951                           ;doprnt.c: 635: switch(c = *f++) {
  2952  000194  D003               	goto	l3351
  2953  000196                     l3347:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;doprnt.c: 663: flag |= 0x400;
  2957  000196  0100               	movlb	0	; () banked
  2958  000198  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2959                           
  2960                           ;doprnt.c: 664: break;
  2961  00019A  D015               	goto	l3353
  2962  00019C                     l3351:
  2963  00019C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2964  0001A0  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2965  0001A4  0100               	movlb	0	; () banked
  2966  0001A6  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2967  0001A8  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2968  0001AA                     	if	0	;tblptru may be non-zero
  2969  0001AA                     	endif
  2970  0001AA                     	if	0	;tblptru may be non-zero
  2971  0001AA                     	endif
  2972  0001AA  0008               	tblrd		*
  2973  0001AC  CFF5 F0C4          	movff	tablat,sprintf@c
  2974  0001B0  0100               	movlb	0	; () banked
  2975  0001B2  51C4               	movf	sprintf@c& (0+255),w,b
  2976                           
  2977                           ; Switch size 1, requested type "space"
  2978                           ; Number of cases is 2, Range of values is 0 to 102
  2979                           ; switch strategies available:
  2980                           ; Name         Instructions Cycles
  2981                           ; simple_byte            7     4 (average)
  2982                           ;	Chosen strategy is simple_byte
  2983  0001B4  0A00               	xorlw	0	; case 0
  2984  0001B6  B4D8               	btfsc	status,2,c
  2985  0001B8  EFA5  F005         	goto	l3599
  2986  0001BC  0A66               	xorlw	102	; case 102
  2987  0001BE  B4D8               	btfsc	status,2,c
  2988  0001C0  D7EA               	goto	l3347
  2989  0001C2  EF96  F005         	goto	l3597
  2990  0001C6                     l3353:
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 825: if(flag & (0x700)) {
  2994  0001C6  0E07               	movlw	7
  2995  0001C8  0100               	movlb	0	; () banked
  2996  0001CA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2997  0001CC  B4D8               	btfsc	status,2,c
  2998  0001CE  D3B1               	goto	l3533
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;doprnt.c: 827: if(flag & 0x1000)
  3002  0001D0  0100               	movlb	0	; () banked
  3003  0001D2  A9BC               	btfss	(sprintf@flag+1)& (0+255),4,b
  3004  0001D4  D005               	goto	l3359
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 829: prec = 6;
  3008  0001D6  0E00               	movlw	0
  3009  0001D8  0100               	movlb	0	; () banked
  3010  0001DA  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  3011  0001DC  0E06               	movlw	6
  3012  0001DE  6FC2               	movwf	sprintf@prec& (0+255),b
  3013  0001E0                     l3359:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3017  0001E0  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  3018  0001E4  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  3019  0001E8  CFDE F0BF          	movff	postinc2,sprintf@fval
  3020  0001EC  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  3021  0001F0  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  3022                           
  3023                           ; BSR set to: 0
  3024  0001F4  0E03               	movlw	3
  3025  0001F6  0100               	movlb	0	; () banked
  3026  0001F8  27AF               	addwf	sprintf@ap& (0+255),f,b
  3027  0001FA  0E00               	movlw	0
  3028  0001FC  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;doprnt.c: 831: if(fval < 0.0) {
  3032  0001FE  0100               	movlb	0	; () banked
  3033  000200  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  3034  000202  D011               	goto	l3369
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;doprnt.c: 832: fval = -fval;
  3038  000204  C0BF  F060         	movff	sprintf@fval,___ftneg@f1
  3039  000208  C0C0  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  3040  00020C  C0C1  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  3041  000210  ECB3  F017         	call	___ftneg	;wreg free
  3042  000214  C060  F0BF         	movff	?___ftneg,sprintf@fval
  3043  000218  C061  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  3044  00021C  C062  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  3045                           
  3046                           ;doprnt.c: 833: flag |= 0x03;
  3047  000220  0E03               	movlw	3
  3048  000222  0100               	movlb	0	; () banked
  3049  000224  13BB               	iorwf	sprintf@flag& (0+255),f,b
  3050  000226                     l3369:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 834: }
  3054                           ;doprnt.c: 835: exp = 0;
  3055  000226  0E00               	movlw	0
  3056  000228  0100               	movlb	0	; () banked
  3057  00022A  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3058  00022C  0E00               	movlw	0
  3059  00022E  6FB9               	movwf	sprintf@exp& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 836: if( fval!=0) {
  3063  000230  0100               	movlb	0	; () banked
  3064  000232  51BF               	movf	sprintf@fval& (0+255),w,b
  3065  000234  0100               	movlb	0	; () banked
  3066  000236  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3067  000238  0100               	movlb	0	; () banked
  3068  00023A  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3069  00023C  B4D8               	btfsc	status,2,c
  3070  00023E  D09B               	goto	l3397
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3074  000240  0E82               	movlw	130
  3075  000242  0100               	movlb	0	; () banked
  3076  000244  6FA6               	movwf	??_sprintf& (0+255),b
  3077  000246  0EFF               	movlw	255
  3078  000248  0100               	movlb	0	; () banked
  3079  00024A  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3080  00024C  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  3081  000250  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  3082  000254  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  3083  000258  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  3084  00025C  0E10               	movlw	16
  3085  00025E  D006               	goto	u3600
  3086  000260                     u3605:
  3087  000260  0100               	movlb	0	; () banked
  3088  000262  90D8               	bcf	status,0,c
  3089  000264  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  3090  000266  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  3091  000268  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  3092  00026A  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  3093  00026C                     u3600:
  3094  00026C  2EE8               	decfsz	wreg,f,c
  3095  00026E  D7F8               	goto	u3605
  3096  000270  0100               	movlb	0	; () banked
  3097  000272  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  3098  000274  0100               	movlb	0	; () banked
  3099  000276  25A6               	addwf	??_sprintf& (0+255),w,b
  3100  000278  0100               	movlb	0	; () banked
  3101  00027A  6FB9               	movwf	sprintf@exp& (0+255),b
  3102  00027C  0E00               	movlw	0
  3103  00027E  0100               	movlb	0	; () banked
  3104  000280  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  3105  000282  0100               	movlb	0	; () banked
  3106  000284  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 838: exp--;
  3110  000286  0100               	movlb	0	; () banked
  3111  000288  07B9               	decf	sprintf@exp& (0+255),f,b
  3112  00028A  A0D8               	btfss	status,0,c
  3113  00028C  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 839: exp *= 3;
  3117  00028E  C0B9  F06E         	movff	sprintf@exp,___wmul@multiplier
  3118  000292  C0BA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3119  000296  0E00               	movlw	0
  3120  000298  0100               	movlb	0	; () banked
  3121  00029A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3122  00029C  0E03               	movlw	3
  3123  00029E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3124  0002A0  EC65  F017         	call	___wmul	;wreg free
  3125  0002A4  C06E  F0B9         	movff	?___wmul,sprintf@exp
  3126  0002A8  C06F  F0BA         	movff	?___wmul+1,sprintf@exp+1
  3127                           
  3128                           ;doprnt.c: 840: exp /= 10;
  3129  0002AC  C0B9  F066         	movff	sprintf@exp,___awdiv@dividend
  3130  0002B0  C0BA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  3131  0002B4  0E00               	movlw	0
  3132  0002B6  0100               	movlb	0	; () banked
  3133  0002B8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3134  0002BA  0E0A               	movlw	10
  3135  0002BC  6F68               	movwf	___awdiv@divisor& (0+255),b
  3136  0002BE  EC29  F014         	call	___awdiv	;wreg free
  3137  0002C2  C066  F0B9         	movff	?___awdiv,sprintf@exp
  3138  0002C6  C067  F0BA         	movff	?___awdiv+1,sprintf@exp+1
  3139                           
  3140                           ;doprnt.c: 841: if(exp < 0)
  3141  0002CA  0100               	movlb	0	; () banked
  3142  0002CC  AFBA               	btfss	(sprintf@exp+1)& (0+255),7,b
  3143  0002CE  D004               	goto	l3385
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 842: exp--;
  3147  0002D0  0100               	movlb	0	; () banked
  3148  0002D2  07B9               	decf	sprintf@exp& (0+255),f,b
  3149  0002D4  A0D8               	btfss	status,0,c
  3150  0002D6  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3151  0002D8                     l3385:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3155  0002D8  0100               	movlb	0	; () banked
  3156  0002DA  51B9               	movf	sprintf@exp& (0+255),w,b
  3157  0002DC  0800               	sublw	0
  3158  0002DE  EC86  F008         	call	_scale
  3159  0002E2  C083  F0B5         	movff	?_scale,sprintf@tmpval
  3160  0002E6  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  3161  0002EA  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  3162                           
  3163                           ;doprnt.c: 847: tmpval.integ *= fval;
  3164  0002EE  C0B5  F074         	movff	sprintf@tmpval,___ftmul@f1
  3165  0002F2  C0B6  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3166  0002F6  C0B7  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3167  0002FA  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  3168  0002FE  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3169  000302  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3170  000306  ECD0  F00F         	call	___ftmul	;wreg free
  3171  00030A  C074  F0B5         	movff	?___ftmul,sprintf@tmpval
  3172  00030E  C075  F0B6         	movff	?___ftmul+1,sprintf@tmpval+1
  3173  000312  C076  F0B7         	movff	?___ftmul+2,sprintf@tmpval+2
  3174                           
  3175                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3176  000316  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3177  00031A  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3178  00031E  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3179  000322  0E00               	movlw	0
  3180  000324  0100               	movlb	0	; () banked
  3181  000326  6F63               	movwf	___ftge@ff2& (0+255),b
  3182  000328  0E80               	movlw	128
  3183  00032A  0100               	movlb	0	; () banked
  3184  00032C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3185  00032E  0E3F               	movlw	63
  3186  000330  0100               	movlb	0	; () banked
  3187  000332  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3188  000334  ECC5  F013         	call	___ftge	;wreg free
  3189  000338  0100               	movlb	0	; () banked
  3190  00033A  B0D8               	btfsc	status,0,c
  3191  00033C  D005               	goto	l3393
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;doprnt.c: 849: exp--;
  3195  00033E  0100               	movlb	0	; () banked
  3196  000340  07B9               	decf	sprintf@exp& (0+255),f,b
  3197  000342  A0D8               	btfss	status,0,c
  3198  000344  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3199  000346  D017               	goto	l3397
  3200  000348                     l3393:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3204  000348  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3205  00034C  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3206  000350  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3207  000354  0E00               	movlw	0
  3208  000356  0100               	movlb	0	; () banked
  3209  000358  6F63               	movwf	___ftge@ff2& (0+255),b
  3210  00035A  0E20               	movlw	32
  3211  00035C  0100               	movlb	0	; () banked
  3212  00035E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3213  000360  0E41               	movlw	65
  3214  000362  0100               	movlb	0	; () banked
  3215  000364  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3216  000366  ECC5  F013         	call	___ftge	;wreg free
  3217  00036A  0100               	movlb	0	; () banked
  3218  00036C  A0D8               	btfss	status,0,c
  3219  00036E  D003               	goto	l3397
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;doprnt.c: 851: exp++;
  3223  000370  0100               	movlb	0	; () banked
  3224  000372  4BB9               	infsnz	sprintf@exp& (0+255),f,b
  3225  000374  2BBA               	incf	(sprintf@exp+1)& (0+255),f,b
  3226  000376                     l3397:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;doprnt.c: 852: }
  3230                           ;doprnt.c: 1112: if(prec <= 12)
  3231  000376  0100               	movlb	0	; () banked
  3232  000378  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3233  00037A  D008               	goto	l3399
  3234  00037C  0100               	movlb	0	; () banked
  3235  00037E  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3236  000380  E11D               	bnz	l3401
  3237  000382  0E0D               	movlw	13
  3238  000384  0100               	movlb	0	; () banked
  3239  000386  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3240  000388  B0D8               	btfsc	status,0,c
  3241  00038A  D018               	goto	l3401
  3242  00038C                     l3399:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 1113: fval += fround(prec);
  3246  00038C  C0BF  F08D         	movff	sprintf@fval,___ftadd@f1
  3247  000390  C0C0  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  3248  000394  C0C1  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  3249  000398  0100               	movlb	0	; () banked
  3250  00039A  51C2               	movf	sprintf@prec& (0+255),w,b
  3251  00039C  ECDD  F00A         	call	_fround
  3252  0003A0  C083  F090         	movff	?_fround,___ftadd@f2
  3253  0003A4  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  3254  0003A8  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  3255  0003AC  EC33  F00C         	call	___ftadd	;wreg free
  3256  0003B0  C08D  F0BF         	movff	?___ftadd,sprintf@fval
  3257  0003B4  C08E  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  3258  0003B8  C08F  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  3259  0003BC                     l3401:
  3260                           
  3261                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3262  0003BC  0100               	movlb	0	; () banked
  3263  0003BE  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3264  0003C0  D008               	goto	l3403
  3265  0003C2  0100               	movlb	0	; () banked
  3266  0003C4  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3267  0003C6  E12A               	bnz	l3409
  3268  0003C8  0E0A               	movlw	10
  3269  0003CA  0100               	movlb	0	; () banked
  3270  0003CC  5DB9               	subwf	sprintf@exp& (0+255),w,b
  3271  0003CE  B0D8               	btfsc	status,0,c
  3272  0003D0  D025               	goto	l3409
  3273  0003D2                     l3403:
  3274                           
  3275                           ; BSR set to: 0
  3276  0003D2  0100               	movlb	0	; () banked
  3277  0003D4  51BF               	movf	sprintf@fval& (0+255),w,b
  3278  0003D6  0100               	movlb	0	; () banked
  3279  0003D8  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3280  0003DA  0100               	movlb	0	; () banked
  3281  0003DC  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3282  0003DE  B4D8               	btfsc	status,2,c
  3283  0003E0  D063               	goto	l3423
  3284                           
  3285                           ; BSR set to: 0
  3286  0003E2  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  3287  0003E6  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3288  0003EA  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3289  0003EE  EC7F  F010         	call	___fttol	;wreg free
  3290  0003F2  0100               	movlb	0	; () banked
  3291  0003F4  518A               	movf	?___fttol& (0+255),w,b
  3292  0003F6  0100               	movlb	0	; () banked
  3293  0003F8  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  3294  0003FA  0100               	movlb	0	; () banked
  3295  0003FC  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  3296  0003FE  0100               	movlb	0	; () banked
  3297  000400  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  3298  000402  A4D8               	btfss	status,2,c
  3299  000404  D051               	goto	l3423
  3300                           
  3301                           ; BSR set to: 0
  3302  000406  0100               	movlb	0	; () banked
  3303  000408  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3304  00040A  D04E               	goto	l3423
  3305  00040C  0100               	movlb	0	; () banked
  3306  00040E  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3307  000410  E105               	bnz	l3409
  3308  000412  0E02               	movlw	2
  3309  000414  0100               	movlb	0	; () banked
  3310  000416  5DB9               	subwf	sprintf@exp& (0+255),w,b
  3311  000418  A0D8               	btfss	status,0,c
  3312  00041A  D046               	goto	l3423
  3313  00041C                     l3409:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3317  00041C  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3318  000420  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3319  000424  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3320  000428  0E70               	movlw	112
  3321  00042A  0100               	movlb	0	; () banked
  3322  00042C  6F63               	movwf	___ftge@ff2& (0+255),b
  3323  00042E  0E89               	movlw	137
  3324  000430  0100               	movlb	0	; () banked
  3325  000432  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3326  000434  0E40               	movlw	64
  3327  000436  0100               	movlb	0	; () banked
  3328  000438  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3329  00043A  ECC5  F013         	call	___ftge	;wreg free
  3330  00043E  0100               	movlb	0	; () banked
  3331  000440  B0D8               	btfsc	status,0,c
  3332  000442  D003               	goto	l3413
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3336  000444  0100               	movlb	0	; () banked
  3337  000446  0EF7               	movlw	247
  3338  000448  D002               	goto	L1
  3339  00044A                     l3413:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3343  00044A  0100               	movlb	0	; () banked
  3344  00044C  0EF8               	movlw	248
  3345  00044E                     L1:
  3346  00044E  27B9               	addwf	sprintf@exp& (0+255),f,b
  3347  000450  0EFF               	movlw	255
  3348  000452  23BA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;doprnt.c: 1124: }
  3352                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3353                           
  3354                           ; BSR set to: 0
  3355  000454  0100               	movlb	0	; () banked
  3356  000456  51B9               	movf	sprintf@exp& (0+255),w,b
  3357  000458  EC86  F008         	call	_scale
  3358  00045C  C083  F0B5         	movff	?_scale,sprintf@tmpval
  3359  000460  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  3360  000464  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  3361                           
  3362                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3363  000468  C0BF  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  3364  00046C  C0C0  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3365  000470  C0C1  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3366  000474  C0B5  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3367  000478  C0B6  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3368  00047C  C0B7  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3369  000480  EC3D  F00E         	call	__tdiv_to_l_	;wreg free
  3370  000484  C060  F0B1         	movff	?__tdiv_to_l_,sprintf@val
  3371  000488  C061  F0B2         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3372  00048C  C062  F0B3         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3373  000490  C063  F0B4         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3374                           
  3375                           ;doprnt.c: 1129: fval = 0.0;
  3376  000494  0E00               	movlw	0
  3377  000496  0100               	movlb	0	; () banked
  3378  000498  6FBF               	movwf	sprintf@fval& (0+255),b
  3379  00049A  0E00               	movlw	0
  3380  00049C  0100               	movlb	0	; () banked
  3381  00049E  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  3382  0004A0  0E00               	movlw	0
  3383  0004A2  0100               	movlb	0	; () banked
  3384  0004A4  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  3385                           
  3386                           ;doprnt.c: 1130: } else {
  3387  0004A6  D033               	goto	l3427
  3388  0004A8                     l3423:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3392  0004A8  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  3393  0004AC  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3394  0004B0  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3395  0004B4  EC7F  F010         	call	___fttol	;wreg free
  3396  0004B8  C08A  F0B1         	movff	?___fttol,sprintf@val
  3397  0004BC  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  3398  0004C0  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  3399  0004C4  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  3400                           
  3401                           ;doprnt.c: 1132: fval -= (double)val;
  3402  0004C8  C0BF  F099         	movff	sprintf@fval,___ftsub@f1
  3403  0004CC  C0C0  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  3404  0004D0  C0C1  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  3405  0004D4  C0B1  F068         	movff	sprintf@val,___lltoft@c
  3406  0004D8  C0B2  F069         	movff	sprintf@val+1,___lltoft@c+1
  3407  0004DC  C0B3  F06A         	movff	sprintf@val+2,___lltoft@c+2
  3408  0004E0  C0B4  F06B         	movff	sprintf@val+3,___lltoft@c+3
  3409  0004E4  ECDB  F015         	call	___lltoft	;wreg free
  3410  0004E8  C068  F09C         	movff	?___lltoft,___ftsub@f2
  3411  0004EC  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  3412  0004F0  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  3413  0004F4  ECFE  F016         	call	___ftsub	;wreg free
  3414  0004F8  C099  F0BF         	movff	?___ftsub,sprintf@fval
  3415  0004FC  C09A  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  3416  000500  C09B  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  3417                           
  3418                           ;doprnt.c: 1133: exp = 0;
  3419  000504  0E00               	movlw	0
  3420  000506  0100               	movlb	0	; () banked
  3421  000508  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3422  00050A  0E00               	movlw	0
  3423  00050C  6FB9               	movwf	sprintf@exp& (0+255),b
  3424  00050E                     l3427:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;doprnt.c: 1134: }
  3428                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3429  00050E  0E01               	movlw	1
  3430  000510  0100               	movlb	0	; () banked
  3431  000512  6FC4               	movwf	sprintf@c& (0+255),b
  3432  000514                     l3429:
  3433                           
  3434                           ; BSR set to: 0
  3435  000514  0E0A               	movlw	10
  3436  000516  0100               	movlb	0	; () banked
  3437  000518  19C4               	xorwf	sprintf@c& (0+255),w,b
  3438  00051A  B4D8               	btfsc	status,2,c
  3439  00051C  D01E               	goto	l3441
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;doprnt.c: 1137: if(val < dpowers[c])
  3443                           
  3444                           ; BSR set to: 0
  3445                           
  3446                           ; BSR set to: 0
  3447  00051E  0100               	movlb	0	; () banked
  3448  000520  51C4               	movf	sprintf@c& (0+255),w,b
  3449  000522  0D04               	mullw	4
  3450  000524  0E17               	movlw	low _dpowers
  3451  000526  24F3               	addwf	prodl,w,c
  3452  000528  6EF6               	movwf	tblptrl,c
  3453  00052A  0E7E               	movlw	high _dpowers
  3454  00052C  20F4               	addwfc	prodh,w,c
  3455  00052E  6EF7               	movwf	tblptrh,c
  3456  000530                     	if	0	;There are less than 3 active tblptr bytes
  3457  000530                     	endif
  3458  000530  0009               	tblrd		*+
  3459  000532  50F5               	movf	tablat,w,c
  3460  000534  0100               	movlb	0	; () banked
  3461  000536  5DB1               	subwf	sprintf@val& (0+255),w,b
  3462  000538  0009               	tblrd		*+
  3463  00053A  50F5               	movf	tablat,w,c
  3464  00053C  0100               	movlb	0	; () banked
  3465  00053E  59B2               	subwfb	(sprintf@val+1)& (0+255),w,b
  3466  000540  0009               	tblrd		*+
  3467  000542  50F5               	movf	tablat,w,c
  3468  000544  0100               	movlb	0	; () banked
  3469  000546  59B3               	subwfb	(sprintf@val+2)& (0+255),w,b
  3470  000548  0009               	tblrd		*+
  3471  00054A  50F5               	movf	tablat,w,c
  3472  00054C  0100               	movlb	0	; () banked
  3473  00054E  59B4               	subwfb	(sprintf@val+3)& (0+255),w,b
  3474  000550  A0D8               	btfss	status,0,c
  3475  000552  D003               	goto	l3441
  3476                           
  3477                           ; BSR set to: 0
  3478                           
  3479                           ; BSR set to: 0
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;doprnt.c: 1138: break;
  3483  000554  0100               	movlb	0	; () banked
  3484  000556  2BC4               	incf	sprintf@c& (0+255),f,b
  3485  000558  D7DD               	goto	l3429
  3486  00055A                     l3441:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;doprnt.c: 1142: width -= prec + c + exp;
  3490  00055A  C0C4  F0A6         	movff	sprintf@c,??_sprintf
  3491  00055E  0100               	movlb	0	; () banked
  3492  000560  6BA7               	clrf	(??_sprintf+1)& (0+255),b
  3493  000562  BFA6               	btfsc	??_sprintf& (0+255),7,b
  3494  000564  07A7               	decf	(??_sprintf+1)& (0+255),f,b
  3495  000566  0100               	movlb	0	; () banked
  3496  000568  51C2               	movf	sprintf@prec& (0+255),w,b
  3497  00056A  0100               	movlb	0	; () banked
  3498  00056C  27A6               	addwf	??_sprintf& (0+255),f,b
  3499  00056E  0100               	movlb	0	; () banked
  3500  000570  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3501  000572  0100               	movlb	0	; () banked
  3502  000574  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  3503  000576  0100               	movlb	0	; () banked
  3504  000578  51B9               	movf	sprintf@exp& (0+255),w,b
  3505  00057A  0100               	movlb	0	; () banked
  3506  00057C  27A6               	addwf	??_sprintf& (0+255),f,b
  3507  00057E  0100               	movlb	0	; () banked
  3508  000580  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3509  000582  0100               	movlb	0	; () banked
  3510  000584  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  3511  000586  0100               	movlb	0	; () banked
  3512  000588  51A6               	movf	??_sprintf& (0+255),w,b
  3513  00058A  0100               	movlb	0	; () banked
  3514  00058C  5FBD               	subwf	sprintf@width& (0+255),f,b
  3515  00058E  0100               	movlb	0	; () banked
  3516  000590  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  3517  000592  0100               	movlb	0	; () banked
  3518  000594  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3519                           
  3520                           ;doprnt.c: 1143: if(
  3521                           ;doprnt.c: 1147: prec)
  3522  000596  0100               	movlb	0	; () banked
  3523  000598  51C2               	movf	sprintf@prec& (0+255),w,b
  3524  00059A  0100               	movlb	0	; () banked
  3525  00059C  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3526  00059E  B4D8               	btfsc	status,2,c
  3527  0005A0  D004               	goto	l3445
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 1148: width--;
  3531  0005A2  0100               	movlb	0	; () banked
  3532  0005A4  07BD               	decf	sprintf@width& (0+255),f,b
  3533  0005A6  A0D8               	btfss	status,0,c
  3534  0005A8  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3535  0005AA                     l3445:
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;doprnt.c: 1149: if(flag & 0x03)
  3539  0005AA  0E03               	movlw	3
  3540  0005AC  0100               	movlb	0	; () banked
  3541  0005AE  15BB               	andwf	sprintf@flag& (0+255),w,b
  3542  0005B0  0100               	movlb	0	; () banked
  3543  0005B2  6FA6               	movwf	??_sprintf& (0+255),b
  3544  0005B4  0E00               	movlw	0
  3545  0005B6  0100               	movlb	0	; () banked
  3546  0005B8  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3547  0005BA  0100               	movlb	0	; () banked
  3548  0005BC  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3549  0005BE  0100               	movlb	0	; () banked
  3550  0005C0  51A6               	movf	??_sprintf& (0+255),w,b
  3551  0005C2  0100               	movlb	0	; () banked
  3552  0005C4  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3553  0005C6  B4D8               	btfsc	status,2,c
  3554  0005C8  D004               	goto	l3449
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;doprnt.c: 1150: width--;
  3558  0005CA  0100               	movlb	0	; () banked
  3559  0005CC  07BD               	decf	sprintf@width& (0+255),f,b
  3560  0005CE  A0D8               	btfss	status,0,c
  3561  0005D0  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3562  0005D2                     l3449:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;doprnt.c: 1153: if(flag & 0x04) {
  3566  0005D2  0100               	movlb	0	; () banked
  3567  0005D4  A5BB               	btfss	sprintf@flag& (0+255),2,b
  3568  0005D6  D03F               	goto	l3471
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;doprnt.c: 1157: if(flag & 0x03)
  3572  0005D8  0E03               	movlw	3
  3573  0005DA  0100               	movlb	0	; () banked
  3574  0005DC  15BB               	andwf	sprintf@flag& (0+255),w,b
  3575  0005DE  0100               	movlb	0	; () banked
  3576  0005E0  6FA6               	movwf	??_sprintf& (0+255),b
  3577  0005E2  0E00               	movlw	0
  3578  0005E4  0100               	movlb	0	; () banked
  3579  0005E6  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3580  0005E8  0100               	movlb	0	; () banked
  3581  0005EA  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3582  0005EC  0100               	movlb	0	; () banked
  3583  0005EE  51A6               	movf	??_sprintf& (0+255),w,b
  3584  0005F0  0100               	movlb	0	; () banked
  3585  0005F2  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3586  0005F4  B4D8               	btfsc	status,2,c
  3587  0005F6  D017               	goto	l3463
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3591  0005F8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3592  0005FC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3593  000600  0E2D               	movlw	45
  3594  000602  6EDF               	movwf	indf2,c
  3595                           
  3596                           ; BSR set to: 0
  3597  000604  0100               	movlb	0	; () banked
  3598  000606  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3599  000608  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;doprnt.c: 1168: while(width > 0) {
  3603  00060A  D00D               	goto	l3463
  3604  00060C                     l3457:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3608  00060C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3609  000610  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3610  000614  0E30               	movlw	48
  3611  000616  6EDF               	movwf	indf2,c
  3612                           
  3613                           ; BSR set to: 0
  3614  000618  0100               	movlb	0	; () banked
  3615  00061A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3616  00061C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;doprnt.c: 1170: width--;
  3620  00061E  0100               	movlb	0	; () banked
  3621  000620  07BD               	decf	sprintf@width& (0+255),f,b
  3622  000622  A0D8               	btfss	status,0,c
  3623  000624  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3624  000626                     l3463:
  3625                           
  3626                           ; BSR set to: 0
  3627  000626  0100               	movlb	0	; () banked
  3628  000628  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  3629  00062A  D084               	goto	l3487
  3630  00062C  0100               	movlb	0	; () banked
  3631  00062E  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3632  000630  E1ED               	bnz	l3457
  3633  000632  0100               	movlb	0	; () banked
  3634  000634  05BD               	decf	sprintf@width& (0+255),w,b
  3635  000636  A0D8               	btfss	status,0,c
  3636  000638  D07D               	goto	l3487
  3637  00063A  D7E8               	goto	l3457
  3638  00063C                     l3465:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3642  00063C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3643  000640  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3644  000644  0E20               	movlw	32
  3645  000646  6EDF               	movwf	indf2,c
  3646                           
  3647                           ; BSR set to: 0
  3648  000648  0100               	movlb	0	; () banked
  3649  00064A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3650  00064C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;doprnt.c: 1182: width--;
  3654  00064E  0100               	movlb	0	; () banked
  3655  000650  07BD               	decf	sprintf@width& (0+255),f,b
  3656  000652  A0D8               	btfss	status,0,c
  3657  000654  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3658  000656                     l3471:
  3659                           
  3660                           ; BSR set to: 0
  3661  000656  0100               	movlb	0	; () banked
  3662  000658  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  3663  00065A  D007               	goto	l3473
  3664  00065C  0100               	movlb	0	; () banked
  3665  00065E  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3666  000660  E1ED               	bnz	l3465
  3667  000662  0100               	movlb	0	; () banked
  3668  000664  05BD               	decf	sprintf@width& (0+255),w,b
  3669  000666  B0D8               	btfsc	status,0,c
  3670  000668  D7E9               	goto	l3465
  3671  00066A                     l3473:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;doprnt.c: 1183: }
  3675                           ;doprnt.c: 1188: if(flag & 0x03)
  3676  00066A  0E03               	movlw	3
  3677  00066C  0100               	movlb	0	; () banked
  3678  00066E  15BB               	andwf	sprintf@flag& (0+255),w,b
  3679  000670  0100               	movlb	0	; () banked
  3680  000672  6FA6               	movwf	??_sprintf& (0+255),b
  3681  000674  0E00               	movlw	0
  3682  000676  0100               	movlb	0	; () banked
  3683  000678  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3684  00067A  0100               	movlb	0	; () banked
  3685  00067C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3686  00067E  0100               	movlb	0	; () banked
  3687  000680  51A6               	movf	??_sprintf& (0+255),w,b
  3688  000682  0100               	movlb	0	; () banked
  3689  000684  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3690  000686  B4D8               	btfsc	status,2,c
  3691  000688  D055               	goto	l3487
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3695  00068A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3696  00068E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3697  000692  0E2D               	movlw	45
  3698  000694  D04D               	goto	L2
  3699  000696                     l3477:
  3700                           
  3701                           ; BSR set to: 0
  3702  000696  0100               	movlb	0	; () banked
  3703  000698  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3704  00069A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;doprnt.c: 1195: }
  3708                           ;doprnt.c: 1196: while(c--) {
  3709                           
  3710                           ; BSR set to: 0
  3711  00069C  D04B               	goto	l3487
  3712  00069E                     l3479:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;doprnt.c: 1200: {
  3716                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3717  00069E  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  3718  0006A2  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3719  0006A6  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3720  0006AA  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3721  0006AE  0100               	movlb	0	; () banked
  3722  0006B0  51C4               	movf	sprintf@c& (0+255),w,b
  3723  0006B2  0D04               	mullw	4
  3724  0006B4  0E17               	movlw	low _dpowers
  3725  0006B6  24F3               	addwf	prodl,w,c
  3726  0006B8  6EF6               	movwf	tblptrl,c
  3727  0006BA  0E7E               	movlw	high _dpowers
  3728  0006BC  20F4               	addwfc	prodh,w,c
  3729  0006BE  6EF7               	movwf	tblptrh,c
  3730  0006C0                     	if	0	;There are less than 3 active tblptr bytes
  3731  0006C0                     	endif
  3732  0006C0  0009               	tblrd		*+
  3733  0006C2  CFF5 F064          	movff	tablat,___lldiv@divisor
  3734  0006C6  0009               	tblrd		*+
  3735  0006C8  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3736  0006CC  0009               	tblrd		*+
  3737  0006CE  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3738  0006D2  000A               	tblrd		*-
  3739  0006D4  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3740  0006D8  EC88  F014         	call	___lldiv	;wreg free
  3741  0006DC  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  3742  0006E0  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  3743  0006E4  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  3744  0006E8  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  3745                           
  3746                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3747  0006EC  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  3748  0006F0  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3749  0006F4  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3750  0006F8  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3751  0006FC  0E0A               	movlw	10
  3752  0006FE  0100               	movlb	0	; () banked
  3753  000700  6F64               	movwf	___llmod@divisor& (0+255),b
  3754  000702  0E00               	movlw	0
  3755  000704  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3756  000706  0E00               	movlw	0
  3757  000708  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3758  00070A  0E00               	movlw	0
  3759  00070C  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3760  00070E  EC8E  F015         	call	___llmod	;wreg free
  3761  000712  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  3762  000716  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  3763  00071A  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  3764  00071E  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  3765                           
  3766                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3767  000722  0100               	movlb	0	; () banked
  3768  000724  51B5               	movf	sprintf@tmpval& (0+255),w,b
  3769  000726  0F30               	addlw	48
  3770  000728  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3771  00072C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3772  000730                     L2:
  3773  000730  6EDF               	movwf	indf2,c
  3774  000732  D7B1               	goto	l3477
  3775  000734                     l3487:
  3776                           
  3777                           ; BSR set to: 0
  3778  000734  0100               	movlb	0	; () banked
  3779  000736  07C4               	decf	sprintf@c& (0+255),f,b
  3780  000738  0100               	movlb	0	; () banked
  3781  00073A  29C4               	incf	sprintf@c& (0+255),w,b
  3782  00073C  B4D8               	btfsc	status,2,c
  3783  00073E  D00E               	goto	l3495
  3784  000740  D7AE               	goto	l3479
  3785  000742                     l3489:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3789  000742  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3790  000746  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3791  00074A  0E30               	movlw	48
  3792  00074C  6EDF               	movwf	indf2,c
  3793                           
  3794                           ; BSR set to: 0
  3795  00074E  0100               	movlb	0	; () banked
  3796  000750  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3797  000752  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;doprnt.c: 1209: exp--;
  3801  000754  0100               	movlb	0	; () banked
  3802  000756  07B9               	decf	sprintf@exp& (0+255),f,b
  3803  000758  A0D8               	btfss	status,0,c
  3804  00075A  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3805  00075C                     l3495:
  3806                           
  3807                           ; BSR set to: 0
  3808  00075C  0100               	movlb	0	; () banked
  3809  00075E  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3810  000760  D007               	goto	l3497
  3811  000762  0100               	movlb	0	; () banked
  3812  000764  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3813  000766  E1ED               	bnz	l3489
  3814  000768  0100               	movlb	0	; () banked
  3815  00076A  05B9               	decf	sprintf@exp& (0+255),w,b
  3816  00076C  B0D8               	btfsc	status,0,c
  3817  00076E  D7E9               	goto	l3489
  3818  000770                     l3497:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1210: }
  3822                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3823  000770  0100               	movlb	0	; () banked
  3824  000772  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3825  000774  D00C               	goto	l302
  3826  000776  0100               	movlb	0	; () banked
  3827  000778  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3828  00077A  E105               	bnz	u3820
  3829  00077C  0E09               	movlw	9
  3830  00077E  0100               	movlb	0	; () banked
  3831  000780  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3832  000782  A0D8               	btfss	status,0,c
  3833  000784  D004               	goto	l302
  3834  000786                     u3820:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3838  000786  0E08               	movlw	8
  3839  000788  0100               	movlb	0	; () banked
  3840  00078A  6FC4               	movwf	sprintf@c& (0+255),b
  3841  00078C  D002               	goto	l3501
  3842  00078E                     l302:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;doprnt.c: 1213: else
  3846                           ;doprnt.c: 1214: c = prec;
  3847  00078E  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  3848  000792                     l3501:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 1215: prec -= c;
  3852  000792  0100               	movlb	0	; () banked
  3853  000794  51C4               	movf	sprintf@c& (0+255),w,b
  3854  000796  0100               	movlb	0	; () banked
  3855  000798  5FC2               	subwf	sprintf@prec& (0+255),f,b
  3856  00079A  0E00               	movlw	0
  3857  00079C  0100               	movlb	0	; () banked
  3858  00079E  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3859  0007A0  0EFF               	movlw	255
  3860  0007A2  0100               	movlb	0	; () banked
  3861  0007A4  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 1219: if(c)
  3865  0007A6  0100               	movlb	0	; () banked
  3866  0007A8  51C4               	movf	sprintf@c& (0+255),w,b
  3867  0007AA  0100               	movlb	0	; () banked
  3868  0007AC  B4D8               	btfsc	status,2,c
  3869  0007AE  D009               	goto	l3509
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3873  0007B0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3874  0007B4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3875  0007B8  0E2E               	movlw	46
  3876  0007BA  6EDF               	movwf	indf2,c
  3877                           
  3878                           ; BSR set to: 0
  3879  0007BC  0100               	movlb	0	; () banked
  3880  0007BE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3881  0007C0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3882  0007C2                     l3509:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3886  0007C2  0100               	movlb	0	; () banked
  3887  0007C4  51C4               	movf	sprintf@c& (0+255),w,b
  3888  0007C6  EC86  F008         	call	_scale
  3889  0007CA  C083  F0AC         	movff	?_scale,_sprintf$1159
  3890  0007CE  C084  F0AD         	movff	?_scale+1,_sprintf$1159+1
  3891  0007D2  C085  F0AE         	movff	?_scale+2,_sprintf$1159+2
  3892                           
  3893                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3894  0007D6  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  3895  0007DA  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3896  0007DE  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3897  0007E2  C0AC  F074         	movff	_sprintf$1159,___ftmul@f1
  3898  0007E6  C0AD  F075         	movff	_sprintf$1159+1,___ftmul@f1+1
  3899  0007EA  C0AE  F076         	movff	_sprintf$1159+2,___ftmul@f1+2
  3900  0007EE  ECD0  F00F         	call	___ftmul	;wreg free
  3901  0007F2  C074  F08A         	movff	?___ftmul,___fttol@f1
  3902  0007F6  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3903  0007FA  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3904  0007FE  EC7F  F010         	call	___fttol	;wreg free
  3905  000802  C08A  F0B1         	movff	?___fttol,sprintf@val
  3906  000806  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  3907  00080A  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  3908  00080E  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  3909                           
  3910                           ;doprnt.c: 1228: while(c--) {
  3911  000812  D074               	goto	l3523
  3912  000814                     l3513:
  3913                           
  3914                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3915  000814  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  3916  000818  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3917  00081C  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3918  000820  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3919  000824  0100               	movlb	0	; () banked
  3920  000826  51C4               	movf	sprintf@c& (0+255),w,b
  3921  000828  0D04               	mullw	4
  3922  00082A  0E17               	movlw	low _dpowers
  3923  00082C  24F3               	addwf	prodl,w,c
  3924  00082E  6EF6               	movwf	tblptrl,c
  3925  000830  0E7E               	movlw	high _dpowers
  3926  000832  20F4               	addwfc	prodh,w,c
  3927  000834  6EF7               	movwf	tblptrh,c
  3928  000836                     	if	0	;There are less than 3 active tblptr bytes
  3929  000836                     	endif
  3930  000836  0009               	tblrd		*+
  3931  000838  CFF5 F064          	movff	tablat,___lldiv@divisor
  3932  00083C  0009               	tblrd		*+
  3933  00083E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3934  000842  0009               	tblrd		*+
  3935  000844  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3936  000848  000A               	tblrd		*-
  3937  00084A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3938  00084E  EC88  F014         	call	___lldiv	;wreg free
  3939  000852  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  3940  000856  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  3941  00085A  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  3942  00085E  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  3943                           
  3944                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3945  000862  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  3946  000866  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3947  00086A  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3948  00086E  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3949  000872  0E0A               	movlw	10
  3950  000874  0100               	movlb	0	; () banked
  3951  000876  6F64               	movwf	___llmod@divisor& (0+255),b
  3952  000878  0E00               	movlw	0
  3953  00087A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3954  00087C  0E00               	movlw	0
  3955  00087E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3956  000880  0E00               	movlw	0
  3957  000882  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3958  000884  EC8E  F015         	call	___llmod	;wreg free
  3959  000888  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  3960  00088C  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  3961  000890  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  3962  000894  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  3963                           
  3964                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3965  000898  0100               	movlb	0	; () banked
  3966  00089A  51B5               	movf	sprintf@tmpval& (0+255),w,b
  3967  00089C  0F30               	addlw	48
  3968  00089E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3969  0008A2  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3970  0008A6  6EDF               	movwf	indf2,c
  3971                           
  3972                           ; BSR set to: 0
  3973  0008A8  0100               	movlb	0	; () banked
  3974  0008AA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3975  0008AC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;doprnt.c: 1232: val %= dpowers[c];
  3979  0008AE  C0B1  F060         	movff	sprintf@val,___llmod@dividend
  3980  0008B2  C0B2  F061         	movff	sprintf@val+1,___llmod@dividend+1
  3981  0008B6  C0B3  F062         	movff	sprintf@val+2,___llmod@dividend+2
  3982  0008BA  C0B4  F063         	movff	sprintf@val+3,___llmod@dividend+3
  3983  0008BE  0100               	movlb	0	; () banked
  3984  0008C0  51C4               	movf	sprintf@c& (0+255),w,b
  3985  0008C2  0D04               	mullw	4
  3986  0008C4  0E17               	movlw	low _dpowers
  3987  0008C6  24F3               	addwf	prodl,w,c
  3988  0008C8  6EF6               	movwf	tblptrl,c
  3989  0008CA  0E7E               	movlw	high _dpowers
  3990  0008CC  20F4               	addwfc	prodh,w,c
  3991  0008CE  6EF7               	movwf	tblptrh,c
  3992  0008D0                     	if	0	;There are less than 3 active tblptr bytes
  3993  0008D0                     	endif
  3994  0008D0  0009               	tblrd		*+
  3995  0008D2  CFF5 F064          	movff	tablat,___llmod@divisor
  3996  0008D6  0009               	tblrd		*+
  3997  0008D8  CFF5 F065          	movff	tablat,___llmod@divisor+1
  3998  0008DC  0009               	tblrd		*+
  3999  0008DE  CFF5 F066          	movff	tablat,___llmod@divisor+2
  4000  0008E2  000A               	tblrd		*-
  4001  0008E4  CFF5 F067          	movff	tablat,___llmod@divisor+3
  4002  0008E8  EC8E  F015         	call	___llmod	;wreg free
  4003  0008EC  C060  F0B1         	movff	?___llmod,sprintf@val
  4004  0008F0  C061  F0B2         	movff	?___llmod+1,sprintf@val+1
  4005  0008F4  C062  F0B3         	movff	?___llmod+2,sprintf@val+2
  4006  0008F8  C063  F0B4         	movff	?___llmod+3,sprintf@val+3
  4007  0008FC                     l3523:
  4008  0008FC  0100               	movlb	0	; () banked
  4009  0008FE  07C4               	decf	sprintf@c& (0+255),f,b
  4010  000900  0100               	movlb	0	; () banked
  4011  000902  29C4               	incf	sprintf@c& (0+255),w,b
  4012  000904  B4D8               	btfsc	status,2,c
  4013  000906  D00E               	goto	l3531
  4014  000908  D785               	goto	l3513
  4015  00090A                     l3525:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4019  00090A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4020  00090E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4021  000912  0E30               	movlw	48
  4022  000914  6EDF               	movwf	indf2,c
  4023                           
  4024                           ; BSR set to: 0
  4025  000916  0100               	movlb	0	; () banked
  4026  000918  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4027  00091A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;doprnt.c: 1237: prec--;
  4031  00091C  0100               	movlb	0	; () banked
  4032  00091E  07C2               	decf	sprintf@prec& (0+255),f,b
  4033  000920  A0D8               	btfss	status,0,c
  4034  000922  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  4035  000924                     l3531:
  4036                           
  4037                           ; BSR set to: 0
  4038  000924  0100               	movlb	0	; () banked
  4039  000926  51C2               	movf	sprintf@prec& (0+255),w,b
  4040  000928  0100               	movlb	0	; () banked
  4041  00092A  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4042  00092C  B4D8               	btfsc	status,2,c
  4043  00092E  D0FE               	goto	l3597
  4044  000930  D7EC               	goto	l3525
  4045  000932                     l3533:
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;doprnt.c: 1246: }
  4049                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4050  000932  0100               	movlb	0	; () banked
  4051  000934  51C2               	movf	sprintf@prec& (0+255),w,b
  4052  000936  0100               	movlb	0	; () banked
  4053  000938  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4054  00093A  A4D8               	btfss	status,2,c
  4055  00093C  D00D               	goto	l3539
  4056                           
  4057                           ; BSR set to: 0
  4058  00093E  0100               	movlb	0	; () banked
  4059  000940  51B1               	movf	sprintf@val& (0+255),w,b
  4060  000942  0100               	movlb	0	; () banked
  4061  000944  11B2               	iorwf	(sprintf@val+1)& (0+255),w,b
  4062  000946  0100               	movlb	0	; () banked
  4063  000948  11B3               	iorwf	(sprintf@val+2)& (0+255),w,b
  4064  00094A  0100               	movlb	0	; () banked
  4065  00094C  11B4               	iorwf	(sprintf@val+3)& (0+255),w,b
  4066  00094E  A4D8               	btfss	status,2,c
  4067  000950  D003               	goto	l3539
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;doprnt.c: 1291: prec++;
  4071  000952  0100               	movlb	0	; () banked
  4072  000954  4BC2               	infsnz	sprintf@prec& (0+255),f,b
  4073  000956  2BC3               	incf	(sprintf@prec+1)& (0+255),f,b
  4074  000958                     l3539:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;doprnt.c: 1339: if(c < prec)
  4078  000958  0E80               	movlw	128
  4079  00095A  0100               	movlb	0	; () banked
  4080  00095C  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4081  00095E  0E7F               	movlw	127
  4082  000960  0100               	movlb	0	; () banked
  4083  000962  6FA6               	movwf	??_sprintf& (0+255),b
  4084  000964  0100               	movlb	0	; () banked
  4085  000966  51C2               	movf	sprintf@prec& (0+255),w,b
  4086  000968  0100               	movlb	0	; () banked
  4087  00096A  5DC4               	subwf	sprintf@c& (0+255),w,b
  4088  00096C  0100               	movlb	0	; () banked
  4089  00096E  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4090  000970  0A80               	xorlw	128
  4091  000972  0100               	movlb	0	; () banked
  4092  000974  59A6               	subwfb	??_sprintf& (0+255),w,b
  4093  000976  B0D8               	btfsc	status,0,c
  4094  000978  D003               	goto	l3543
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;doprnt.c: 1340: c = prec;
  4098  00097A  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  4099  00097E  D018               	goto	l3547
  4100  000980                     l3543:
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;doprnt.c: 1341: else if(prec < c)
  4104  000980  0100               	movlb	0	; () banked
  4105  000982  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4106  000984  0A80               	xorlw	128
  4107  000986  0100               	movlb	0	; () banked
  4108  000988  6FA6               	movwf	??_sprintf& (0+255),b
  4109  00098A  0100               	movlb	0	; () banked
  4110  00098C  51C4               	movf	sprintf@c& (0+255),w,b
  4111  00098E  0100               	movlb	0	; () banked
  4112  000990  5DC2               	subwf	sprintf@prec& (0+255),w,b
  4113  000992  0E80               	movlw	128
  4114  000994  0100               	movlb	0	; () banked
  4115  000996  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4116  000998  0E7F               	movlw	127
  4117  00099A  0100               	movlb	0	; () banked
  4118  00099C  59A6               	subwfb	??_sprintf& (0+255),w,b
  4119  00099E  B0D8               	btfsc	status,0,c
  4120  0009A0  D007               	goto	l3547
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;doprnt.c: 1342: prec = c;
  4124  0009A2  0100               	movlb	0	; () banked
  4125  0009A4  51C4               	movf	sprintf@c& (0+255),w,b
  4126  0009A6  0100               	movlb	0	; () banked
  4127  0009A8  6FC2               	movwf	sprintf@prec& (0+255),b
  4128  0009AA  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  4129  0009AC  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  4130  0009AE  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  4131  0009B0                     l3547:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4135  0009B0  0100               	movlb	0	; () banked
  4136  0009B2  51BD               	movf	sprintf@width& (0+255),w,b
  4137  0009B4  0100               	movlb	0	; () banked
  4138  0009B6  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4139  0009B8  B4D8               	btfsc	status,2,c
  4140  0009BA  D014               	goto	l3553
  4141                           
  4142                           ; BSR set to: 0
  4143  0009BC  0E03               	movlw	3
  4144  0009BE  0100               	movlb	0	; () banked
  4145  0009C0  15BB               	andwf	sprintf@flag& (0+255),w,b
  4146  0009C2  0100               	movlb	0	; () banked
  4147  0009C4  6FA6               	movwf	??_sprintf& (0+255),b
  4148  0009C6  0E00               	movlw	0
  4149  0009C8  0100               	movlb	0	; () banked
  4150  0009CA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4151  0009CC  0100               	movlb	0	; () banked
  4152  0009CE  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4153  0009D0  0100               	movlb	0	; () banked
  4154  0009D2  51A6               	movf	??_sprintf& (0+255),w,b
  4155  0009D4  0100               	movlb	0	; () banked
  4156  0009D6  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4157  0009D8  B4D8               	btfsc	status,2,c
  4158  0009DA  D004               	goto	l3553
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1346: width--;
  4162  0009DC  0100               	movlb	0	; () banked
  4163  0009DE  07BD               	decf	sprintf@width& (0+255),f,b
  4164  0009E0  A0D8               	btfss	status,0,c
  4165  0009E2  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4166  0009E4                     l3553:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4170  0009E4  0100               	movlb	0	; () banked
  4171  0009E6  ADBC               	btfss	(sprintf@flag+1)& (0+255),6,b
  4172  0009E8  D01E               	goto	l3561
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;doprnt.c: 1349: if(width > prec)
  4176  0009EA  0100               	movlb	0	; () banked
  4177  0009EC  51BD               	movf	sprintf@width& (0+255),w,b
  4178  0009EE  0100               	movlb	0	; () banked
  4179  0009F0  5DC2               	subwf	sprintf@prec& (0+255),w,b
  4180  0009F2  0100               	movlb	0	; () banked
  4181  0009F4  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4182  0009F6  0A80               	xorlw	128
  4183  0009F8  0100               	movlb	0	; () banked
  4184  0009FA  6FA6               	movwf	??_sprintf& (0+255),b
  4185  0009FC  0100               	movlb	0	; () banked
  4186  0009FE  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  4187  000A00  0A80               	xorlw	128
  4188  000A02  0100               	movlb	0	; () banked
  4189  000A04  59A6               	subwfb	??_sprintf& (0+255),w,b
  4190  000A06  B0D8               	btfsc	status,0,c
  4191  000A08  D009               	goto	l3559
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;doprnt.c: 1350: width -= prec;
  4195  000A0A  0100               	movlb	0	; () banked
  4196  000A0C  51C2               	movf	sprintf@prec& (0+255),w,b
  4197  000A0E  0100               	movlb	0	; () banked
  4198  000A10  5FBD               	subwf	sprintf@width& (0+255),f,b
  4199  000A12  0100               	movlb	0	; () banked
  4200  000A14  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4201  000A16  0100               	movlb	0	; () banked
  4202  000A18  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  4203  000A1A  D005               	goto	l3561
  4204  000A1C                     l3559:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;doprnt.c: 1351: else
  4208                           ;doprnt.c: 1352: width = 0;
  4209  000A1C  0E00               	movlw	0
  4210  000A1E  0100               	movlb	0	; () banked
  4211  000A20  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  4212  000A22  0E00               	movlw	0
  4213  000A24  6FBD               	movwf	sprintf@width& (0+255),b
  4214  000A26                     l3561:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1353: }
  4218                           ;doprnt.c: 1381: if(width > c)
  4219  000A26  0E80               	movlw	128
  4220  000A28  0100               	movlb	0	; () banked
  4221  000A2A  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4222  000A2C  0E7F               	movlw	127
  4223  000A2E  0100               	movlb	0	; () banked
  4224  000A30  6FA6               	movwf	??_sprintf& (0+255),b
  4225  000A32  0100               	movlb	0	; () banked
  4226  000A34  51BD               	movf	sprintf@width& (0+255),w,b
  4227  000A36  0100               	movlb	0	; () banked
  4228  000A38  5DC4               	subwf	sprintf@c& (0+255),w,b
  4229  000A3A  0100               	movlb	0	; () banked
  4230  000A3C  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  4231  000A3E  0A80               	xorlw	128
  4232  000A40  0100               	movlb	0	; () banked
  4233  000A42  59A6               	subwfb	??_sprintf& (0+255),w,b
  4234  000A44  B0D8               	btfsc	status,0,c
  4235  000A46  D00B               	goto	l3565
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;doprnt.c: 1382: width -= c;
  4239  000A48  0100               	movlb	0	; () banked
  4240  000A4A  51C4               	movf	sprintf@c& (0+255),w,b
  4241  000A4C  0100               	movlb	0	; () banked
  4242  000A4E  5FBD               	subwf	sprintf@width& (0+255),f,b
  4243  000A50  0E00               	movlw	0
  4244  000A52  0100               	movlb	0	; () banked
  4245  000A54  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4246  000A56  0EFF               	movlw	255
  4247  000A58  0100               	movlb	0	; () banked
  4248  000A5A  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  4249  000A5C  D005               	goto	l3567
  4250  000A5E                     l3565:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;doprnt.c: 1383: else
  4254                           ;doprnt.c: 1384: width = 0;
  4255  000A5E  0E00               	movlw	0
  4256  000A60  0100               	movlb	0	; () banked
  4257  000A62  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  4258  000A64  0E00               	movlw	0
  4259  000A66  6FBD               	movwf	sprintf@width& (0+255),b
  4260  000A68                     l3567:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 1387: if(flag & 0x04) {
  4264  000A68  0100               	movlb	0	; () banked
  4265  000A6A  A5BB               	btfss	sprintf@flag& (0+255),2,b
  4266  000A6C  D02D               	goto	l3583
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;doprnt.c: 1392: if(flag & 0x03)
  4270  000A6E  0E03               	movlw	3
  4271  000A70  0100               	movlb	0	; () banked
  4272  000A72  15BB               	andwf	sprintf@flag& (0+255),w,b
  4273  000A74  0100               	movlb	0	; () banked
  4274  000A76  6FA6               	movwf	??_sprintf& (0+255),b
  4275  000A78  0E00               	movlw	0
  4276  000A7A  0100               	movlb	0	; () banked
  4277  000A7C  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4278  000A7E  0100               	movlb	0	; () banked
  4279  000A80  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4280  000A82  0100               	movlb	0	; () banked
  4281  000A84  51A6               	movf	??_sprintf& (0+255),w,b
  4282  000A86  0100               	movlb	0	; () banked
  4283  000A88  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4284  000A8A  B4D8               	btfsc	status,2,c
  4285  000A8C  D009               	goto	l3575
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4289  000A8E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4290  000A92  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4291  000A96  0E2D               	movlw	45
  4292  000A98  6EDF               	movwf	indf2,c
  4293                           
  4294                           ; BSR set to: 0
  4295  000A9A  0100               	movlb	0	; () banked
  4296  000A9C  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4297  000A9E  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4298  000AA0                     l3575:
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;doprnt.c: 1415: if(width)
  4302  000AA0  0100               	movlb	0	; () banked
  4303  000AA2  51BD               	movf	sprintf@width& (0+255),w,b
  4304  000AA4  0100               	movlb	0	; () banked
  4305  000AA6  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4306  000AA8  B4D8               	btfsc	status,2,c
  4307  000AAA  D040               	goto	l3597
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4311                           
  4312                           ; BSR set to: 0
  4313                           
  4314                           ;doprnt.c: 1416: do
  4315  000AAC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4316  000AB0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4317  000AB4  0E30               	movlw	48
  4318  000AB6  6EDF               	movwf	indf2,c
  4319                           
  4320                           ; BSR set to: 0
  4321  000AB8  0100               	movlb	0	; () banked
  4322  000ABA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4323  000ABC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;doprnt.c: 1418: while(--width);
  4327  000ABE  0100               	movlb	0	; () banked
  4328  000AC0  07BD               	decf	sprintf@width& (0+255),f,b
  4329  000AC2  A0D8               	btfss	status,0,c
  4330  000AC4  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4331  000AC6  D7EC               	goto	l3575
  4332  000AC8                     l3583:
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;doprnt.c: 1422: {
  4336                           ;doprnt.c: 1424: if(width
  4337                           ;doprnt.c: 1428: )
  4338  000AC8  0100               	movlb	0	; () banked
  4339  000ACA  51BD               	movf	sprintf@width& (0+255),w,b
  4340  000ACC  0100               	movlb	0	; () banked
  4341  000ACE  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4342  000AD0  B4D8               	btfsc	status,2,c
  4343  000AD2  D013               	goto	l3591
  4344  000AD4                     l3585:
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4348  000AD4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4349  000AD8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4350  000ADC  0E20               	movlw	32
  4351  000ADE  6EDF               	movwf	indf2,c
  4352                           
  4353                           ; BSR set to: 0
  4354  000AE0  0100               	movlb	0	; () banked
  4355  000AE2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4356  000AE4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1431: while(--width);
  4360  000AE6  0100               	movlb	0	; () banked
  4361  000AE8  07BD               	decf	sprintf@width& (0+255),f,b
  4362  000AEA  A0D8               	btfss	status,0,c
  4363  000AEC  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4364  000AEE  0100               	movlb	0	; () banked
  4365  000AF0  51BD               	movf	sprintf@width& (0+255),w,b
  4366  000AF2  0100               	movlb	0	; () banked
  4367  000AF4  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4368  000AF6  A4D8               	btfss	status,2,c
  4369  000AF8  D7ED               	goto	l3585
  4370  000AFA                     l3591:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 1438: if(flag & 0x03)
  4374  000AFA  0E03               	movlw	3
  4375  000AFC  0100               	movlb	0	; () banked
  4376  000AFE  15BB               	andwf	sprintf@flag& (0+255),w,b
  4377  000B00  0100               	movlb	0	; () banked
  4378  000B02  6FA6               	movwf	??_sprintf& (0+255),b
  4379  000B04  0E00               	movlw	0
  4380  000B06  0100               	movlb	0	; () banked
  4381  000B08  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4382  000B0A  0100               	movlb	0	; () banked
  4383  000B0C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4384  000B0E  0100               	movlb	0	; () banked
  4385  000B10  51A6               	movf	??_sprintf& (0+255),w,b
  4386  000B12  0100               	movlb	0	; () banked
  4387  000B14  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4388  000B16  B4D8               	btfsc	status,2,c
  4389  000B18  D009               	goto	l3597
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4393  000B1A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4394  000B1E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4395  000B22  0E2D               	movlw	45
  4396  000B24  6EDF               	movwf	indf2,c
  4397  000B26                     l3595:
  4398                           
  4399                           ; BSR set to: 0
  4400  000B26  0100               	movlb	0	; () banked
  4401  000B28  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4402  000B2A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4403  000B2C                     l3597:
  4404                           
  4405                           ; BSR set to: 0
  4406  000B2C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  4407  000B30  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  4408  000B34  0100               	movlb	0	; () banked
  4409  000B36  4BA1               	infsnz	sprintf@f& (0+255),f,b
  4410  000B38  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  4411  000B3A                     	if	0	;tblptru may be non-zero
  4412  000B3A                     	endif
  4413  000B3A                     	if	0	;tblptru may be non-zero
  4414  000B3A                     	endif
  4415  000B3A  0008               	tblrd		*
  4416  000B3C  CFF5 F0C4          	movff	tablat,sprintf@c
  4417  000B40  0100               	movlb	0	; () banked
  4418  000B42  51C4               	movf	sprintf@c& (0+255),w,b
  4419  000B44  A4D8               	btfss	status,2,c
  4420  000B46  EF11  F000         	goto	l3305
  4421  000B4A                     l3599:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 1538: *sp = 0;
  4425  000B4A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4426  000B4E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4427  000B52  0E00               	movlw	0
  4428  000B54  6EDF               	movwf	indf2,c
  4429  000B56  0012               	return	
  4430  000B58                     __end_of_sprintf:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon2	equ	0xFF1
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           plusw1	equ	0xFE3
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           plusw2	equ	0xFDB
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _scale *****************
  4453 ;; Defined at:
  4454 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  scl             1    wreg     char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  scl             1   41[BANK0 ] char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  3   35[BANK0 ] char 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4468 ;;      Params:         0       3       0       0       0       0       0       0       0
  4469 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4471 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4472 ;;Total ram usage:        7 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    5
  4475 ;; This function calls:
  4476 ;;		___awdiv
  4477 ;;		___awmod
  4478 ;;		___ftmul
  4479 ;;		___wmul
  4480 ;; This function is called by:
  4481 ;;		_sprintf
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text3
  4486  00110C                     __ptext3:
  4487                           	opt stack 0
  4488  00110C                     _scale:
  4489                           	opt stack 24
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;incstack = 0
  4493                           ;scale@scl stored from wreg
  4494  00110C  0100               	movlb	0	; () banked
  4495  00110E  6F89               	movwf	scale@scl& (0+255),b
  4496                           
  4497                           ;doprnt.c: 428: if(scl < 0) {
  4498  001110  0100               	movlb	0	; () banked
  4499  001112  AF89               	btfss	scale@scl& (0+255),7,b
  4500  001114  D12A               	goto	l2867
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;doprnt.c: 429: scl = -scl;
  4504  001116  0100               	movlb	0	; () banked
  4505  001118  6D89               	negf	scale@scl& (0+255),b
  4506                           
  4507                           ;doprnt.c: 430: if(scl>=110)
  4508  00111A  0100               	movlb	0	; () banked
  4509  00111C  5189               	movf	scale@scl& (0+255),w,b
  4510  00111E  0A80               	xorlw	128
  4511  001120  0F12               	addlw	-238
  4512  001122  A0D8               	btfss	status,0,c
  4513  001124  D0AC               	goto	l2857
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4517  001126  0E00               	movlw	0
  4518  001128  0100               	movlb	0	; () banked
  4519  00112A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4520  00112C  0E03               	movlw	3
  4521  00112E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4522  001130  0E00               	movlw	0
  4523  001132  0100               	movlb	0	; () banked
  4524  001134  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4525  001136  0E0A               	movlw	10
  4526  001138  6F68               	movwf	___awdiv@divisor& (0+255),b
  4527  00113A  0E00               	movlw	0
  4528  00113C  0100               	movlb	0	; () banked
  4529  00113E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4530  001140  0E64               	movlw	100
  4531  001142  6F62               	movwf	___awmod@divisor& (0+255),b
  4532  001144  0100               	movlb	0	; () banked
  4533  001146  5189               	movf	scale@scl& (0+255),w,b
  4534  001148  0100               	movlb	0	; () banked
  4535  00114A  6F60               	movwf	___awmod@dividend& (0+255),b
  4536  00114C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4537  00114E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4538  001150  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4539  001152  EC3D  F015         	call	___awmod	;wreg free
  4540  001156  C060  F066         	movff	?___awmod,___awdiv@dividend
  4541  00115A  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4542  00115E  EC29  F014         	call	___awdiv	;wreg free
  4543  001162  0E09               	movlw	9
  4544  001164  0100               	movlb	0	; () banked
  4545  001166  2566               	addwf	?___awdiv& (0+255),w,b
  4546  001168  0100               	movlb	0	; () banked
  4547  00116A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4548  00116C  0E00               	movlw	0
  4549  00116E  0100               	movlb	0	; () banked
  4550  001170  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4551  001172  0100               	movlb	0	; () banked
  4552  001174  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4553  001176  EC65  F017         	call	___wmul	;wreg free
  4554  00117A  0E3F               	movlw	low __npowers_
  4555  00117C  0100               	movlb	0	; () banked
  4556  00117E  256E               	addwf	?___wmul& (0+255),w,b
  4557  001180  6EF6               	movwf	tblptrl,c
  4558  001182  0E7E               	movlw	high __npowers_
  4559  001184  0100               	movlb	0	; () banked
  4560  001186  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4561  001188  6EF7               	movwf	tblptrh,c
  4562  00118A                     	if	0	;There are less than 3 active tblptr bytes
  4563  00118A                     	endif
  4564  00118A  0009               	tblrd		*+
  4565  00118C  CFF5 F077          	movff	tablat,___ftmul@f2
  4566  001190  0009               	tblrd		*+
  4567  001192  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4568  001196  000A               	tblrd		*-
  4569  001198  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4570  00119C  0E00               	movlw	0
  4571  00119E  0100               	movlb	0	; () banked
  4572  0011A0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4573  0011A2  0E64               	movlw	100
  4574  0011A4  6F68               	movwf	___awdiv@divisor& (0+255),b
  4575  0011A6  0100               	movlb	0	; () banked
  4576  0011A8  5189               	movf	scale@scl& (0+255),w,b
  4577  0011AA  0100               	movlb	0	; () banked
  4578  0011AC  6F66               	movwf	___awdiv@dividend& (0+255),b
  4579  0011AE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4580  0011B0  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4581  0011B2  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4582  0011B4  EC29  F014         	call	___awdiv	;wreg free
  4583  0011B8  0E12               	movlw	18
  4584  0011BA  0100               	movlb	0	; () banked
  4585  0011BC  2566               	addwf	?___awdiv& (0+255),w,b
  4586  0011BE  0100               	movlb	0	; () banked
  4587  0011C0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4588  0011C2  0E00               	movlw	0
  4589  0011C4  0100               	movlb	0	; () banked
  4590  0011C6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4591  0011C8  0100               	movlb	0	; () banked
  4592  0011CA  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4593  0011CC  0E00               	movlw	0
  4594  0011CE  0100               	movlb	0	; () banked
  4595  0011D0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4596  0011D2  0E03               	movlw	3
  4597  0011D4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4598  0011D6  EC65  F017         	call	___wmul	;wreg free
  4599  0011DA  0E3F               	movlw	low __npowers_
  4600  0011DC  0100               	movlb	0	; () banked
  4601  0011DE  256E               	addwf	?___wmul& (0+255),w,b
  4602  0011E0  6EF6               	movwf	tblptrl,c
  4603  0011E2  0E7E               	movlw	high __npowers_
  4604  0011E4  0100               	movlb	0	; () banked
  4605  0011E6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4606  0011E8  6EF7               	movwf	tblptrh,c
  4607  0011EA                     	if	0	;There are less than 3 active tblptr bytes
  4608  0011EA                     	endif
  4609  0011EA  0009               	tblrd		*+
  4610  0011EC  CFF5 F074          	movff	tablat,___ftmul@f1
  4611  0011F0  0009               	tblrd		*+
  4612  0011F2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4613  0011F6  000A               	tblrd		*-
  4614  0011F8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4615  0011FC  ECD0  F00F         	call	___ftmul	;wreg free
  4616  001200  C074  F086         	movff	?___ftmul,_scale$1158
  4617  001204  C075  F087         	movff	?___ftmul+1,_scale$1158+1
  4618  001208  C076  F088         	movff	?___ftmul+2,_scale$1158+2
  4619                           
  4620                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4621  00120C  C086  F074         	movff	_scale$1158,___ftmul@f1
  4622  001210  C087  F075         	movff	_scale$1158+1,___ftmul@f1+1
  4623  001214  C088  F076         	movff	_scale$1158+2,___ftmul@f1+2
  4624  001218  0E00               	movlw	0
  4625  00121A  0100               	movlb	0	; () banked
  4626  00121C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4627  00121E  0E03               	movlw	3
  4628  001220  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4629  001222  0E00               	movlw	0
  4630  001224  0100               	movlb	0	; () banked
  4631  001226  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4632  001228  0E0A               	movlw	10
  4633  00122A  6F62               	movwf	___awmod@divisor& (0+255),b
  4634  00122C  0100               	movlb	0	; () banked
  4635  00122E  5189               	movf	scale@scl& (0+255),w,b
  4636  001230  0100               	movlb	0	; () banked
  4637  001232  6F60               	movwf	___awmod@dividend& (0+255),b
  4638  001234  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4639  001236  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4640  001238  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4641  00123A  EC3D  F015         	call	___awmod	;wreg free
  4642  00123E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4643  001242  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4644  001246  EC65  F017         	call	___wmul	;wreg free
  4645  00124A  0E3F               	movlw	low __npowers_
  4646  00124C  0100               	movlb	0	; () banked
  4647  00124E  256E               	addwf	?___wmul& (0+255),w,b
  4648  001250  6EF6               	movwf	tblptrl,c
  4649  001252  0E7E               	movlw	high __npowers_
  4650  001254  0100               	movlb	0	; () banked
  4651  001256  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4652  001258  6EF7               	movwf	tblptrh,c
  4653  00125A                     	if	0	;There are less than 3 active tblptr bytes
  4654  00125A                     	endif
  4655  00125A  0009               	tblrd		*+
  4656  00125C  CFF5 F077          	movff	tablat,___ftmul@f2
  4657  001260  0009               	tblrd		*+
  4658  001262  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4659  001266  000A               	tblrd		*-
  4660  001268  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4661  00126C  ECD0  F00F         	call	___ftmul	;wreg free
  4662  001270  C074  F083         	movff	?___ftmul,?_scale
  4663  001274  C075  F084         	movff	?___ftmul+1,?_scale+1
  4664  001278  C076  F085         	movff	?___ftmul+2,?_scale+2
  4665  00127C  0012               	return	
  4666  00127E                     l2857:
  4667                           
  4668                           ;doprnt.c: 432: else if(scl > 10)
  4669  00127E  0100               	movlb	0	; () banked
  4670  001280  5189               	movf	scale@scl& (0+255),w,b
  4671  001282  0A80               	xorlw	128
  4672  001284  0F75               	addlw	-139
  4673  001286  A0D8               	btfss	status,0,c
  4674  001288  D05D               	goto	l2863
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4678  00128A  0E00               	movlw	0
  4679  00128C  0100               	movlb	0	; () banked
  4680  00128E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4681  001290  0E0A               	movlw	10
  4682  001292  6F68               	movwf	___awdiv@divisor& (0+255),b
  4683  001294  0100               	movlb	0	; () banked
  4684  001296  5189               	movf	scale@scl& (0+255),w,b
  4685  001298  0100               	movlb	0	; () banked
  4686  00129A  6F66               	movwf	___awdiv@dividend& (0+255),b
  4687  00129C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4688  00129E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4689  0012A0  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4690  0012A2  EC29  F014         	call	___awdiv	;wreg free
  4691  0012A6  0E09               	movlw	9
  4692  0012A8  0100               	movlb	0	; () banked
  4693  0012AA  2566               	addwf	?___awdiv& (0+255),w,b
  4694  0012AC  0100               	movlb	0	; () banked
  4695  0012AE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4696  0012B0  0E00               	movlw	0
  4697  0012B2  0100               	movlb	0	; () banked
  4698  0012B4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4699  0012B6  0100               	movlb	0	; () banked
  4700  0012B8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4701  0012BA  0E00               	movlw	0
  4702  0012BC  0100               	movlb	0	; () banked
  4703  0012BE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4704  0012C0  0E03               	movlw	3
  4705  0012C2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4706  0012C4  EC65  F017         	call	___wmul	;wreg free
  4707  0012C8  0E3F               	movlw	low __npowers_
  4708  0012CA  0100               	movlb	0	; () banked
  4709  0012CC  256E               	addwf	?___wmul& (0+255),w,b
  4710  0012CE  6EF6               	movwf	tblptrl,c
  4711  0012D0  0E7E               	movlw	high __npowers_
  4712  0012D2  0100               	movlb	0	; () banked
  4713  0012D4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4714  0012D6  6EF7               	movwf	tblptrh,c
  4715  0012D8                     	if	0	;There are less than 3 active tblptr bytes
  4716  0012D8                     	endif
  4717  0012D8  0009               	tblrd		*+
  4718  0012DA  CFF5 F074          	movff	tablat,___ftmul@f1
  4719  0012DE  0009               	tblrd		*+
  4720  0012E0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4721  0012E4  000A               	tblrd		*-
  4722  0012E6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4723  0012EA  0E00               	movlw	0
  4724  0012EC  0100               	movlb	0	; () banked
  4725  0012EE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4726  0012F0  0E03               	movlw	3
  4727  0012F2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4728  0012F4  0E00               	movlw	0
  4729  0012F6  0100               	movlb	0	; () banked
  4730  0012F8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4731  0012FA  0E0A               	movlw	10
  4732  0012FC  6F62               	movwf	___awmod@divisor& (0+255),b
  4733  0012FE  0100               	movlb	0	; () banked
  4734  001300  5189               	movf	scale@scl& (0+255),w,b
  4735  001302  0100               	movlb	0	; () banked
  4736  001304  6F60               	movwf	___awmod@dividend& (0+255),b
  4737  001306  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4738  001308  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4739  00130A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4740  00130C  EC3D  F015         	call	___awmod	;wreg free
  4741  001310  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4742  001314  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4743  001318  EC65  F017         	call	___wmul	;wreg free
  4744  00131C  0E3F               	movlw	low __npowers_
  4745  00131E  0100               	movlb	0	; () banked
  4746  001320  256E               	addwf	?___wmul& (0+255),w,b
  4747  001322  6EF6               	movwf	tblptrl,c
  4748  001324  0E7E               	movlw	high __npowers_
  4749  001326  0100               	movlb	0	; () banked
  4750  001328  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4751  00132A  6EF7               	movwf	tblptrh,c
  4752  00132C                     	if	0	;There are less than 3 active tblptr bytes
  4753  00132C                     	endif
  4754  00132C  0009               	tblrd		*+
  4755  00132E  CFF5 F077          	movff	tablat,___ftmul@f2
  4756  001332  0009               	tblrd		*+
  4757  001334  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4758  001338  000A               	tblrd		*-
  4759  00133A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4760  00133E  ECD0  F00F         	call	___ftmul	;wreg free
  4761  001342  D796               	goto	L3
  4762  001344                     l2863:
  4763                           
  4764                           ;doprnt.c: 434: return _npowers_[scl];
  4765  001344  0100               	movlb	0	; () banked
  4766  001346  5189               	movf	scale@scl& (0+255),w,b
  4767  001348  0D03               	mullw	3
  4768  00134A  0E3F               	movlw	low __npowers_
  4769  00134C  24F3               	addwf	prodl,w,c
  4770  00134E  6EF6               	movwf	tblptrl,c
  4771  001350  0E7E               	movlw	high __npowers_
  4772  001352  20F4               	addwfc	prodh,w,c
  4773  001354  6EF7               	movwf	tblptrh,c
  4774  001356                     	if	0	;There are less than 3 active tblptr bytes
  4775  001356                     	endif
  4776  001356  0009               	tblrd		*+
  4777  001358  CFF5 F083          	movff	tablat,?_scale
  4778  00135C  0009               	tblrd		*+
  4779  00135E  CFF5 F084          	movff	tablat,?_scale+1
  4780  001362  000A               	tblrd		*-
  4781  001364  CFF5 F085          	movff	tablat,?_scale+2
  4782                           
  4783                           ; BSR set to: 0
  4784  001368  0012               	return	
  4785  00136A                     l2867:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 435: }
  4789                           ;doprnt.c: 436: if(scl>=110)
  4790  00136A  0100               	movlb	0	; () banked
  4791  00136C  5189               	movf	scale@scl& (0+255),w,b
  4792  00136E  0A80               	xorlw	128
  4793  001370  0F12               	addlw	-238
  4794  001372  A0D8               	btfss	status,0,c
  4795  001374  D0AC               	goto	l2875
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4799  001376  0E00               	movlw	0
  4800  001378  0100               	movlb	0	; () banked
  4801  00137A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4802  00137C  0E03               	movlw	3
  4803  00137E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4804  001380  0E00               	movlw	0
  4805  001382  0100               	movlb	0	; () banked
  4806  001384  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4807  001386  0E0A               	movlw	10
  4808  001388  6F68               	movwf	___awdiv@divisor& (0+255),b
  4809  00138A  0E00               	movlw	0
  4810  00138C  0100               	movlb	0	; () banked
  4811  00138E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4812  001390  0E64               	movlw	100
  4813  001392  6F62               	movwf	___awmod@divisor& (0+255),b
  4814  001394  0100               	movlb	0	; () banked
  4815  001396  5189               	movf	scale@scl& (0+255),w,b
  4816  001398  0100               	movlb	0	; () banked
  4817  00139A  6F60               	movwf	___awmod@dividend& (0+255),b
  4818  00139C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4819  00139E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4820  0013A0  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4821  0013A2  EC3D  F015         	call	___awmod	;wreg free
  4822  0013A6  C060  F066         	movff	?___awmod,___awdiv@dividend
  4823  0013AA  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4824  0013AE  EC29  F014         	call	___awdiv	;wreg free
  4825  0013B2  0E09               	movlw	9
  4826  0013B4  0100               	movlb	0	; () banked
  4827  0013B6  2566               	addwf	?___awdiv& (0+255),w,b
  4828  0013B8  0100               	movlb	0	; () banked
  4829  0013BA  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4830  0013BC  0E00               	movlw	0
  4831  0013BE  0100               	movlb	0	; () banked
  4832  0013C0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4833  0013C2  0100               	movlb	0	; () banked
  4834  0013C4  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4835  0013C6  EC65  F017         	call	___wmul	;wreg free
  4836  0013CA  0E66               	movlw	low __powers_
  4837  0013CC  0100               	movlb	0	; () banked
  4838  0013CE  256E               	addwf	?___wmul& (0+255),w,b
  4839  0013D0  6EF6               	movwf	tblptrl,c
  4840  0013D2  0E7E               	movlw	high __powers_
  4841  0013D4  0100               	movlb	0	; () banked
  4842  0013D6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4843  0013D8  6EF7               	movwf	tblptrh,c
  4844  0013DA                     	if	0	;There are less than 3 active tblptr bytes
  4845  0013DA                     	endif
  4846  0013DA  0009               	tblrd		*+
  4847  0013DC  CFF5 F077          	movff	tablat,___ftmul@f2
  4848  0013E0  0009               	tblrd		*+
  4849  0013E2  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4850  0013E6  000A               	tblrd		*-
  4851  0013E8  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4852  0013EC  0E00               	movlw	0
  4853  0013EE  0100               	movlb	0	; () banked
  4854  0013F0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4855  0013F2  0E64               	movlw	100
  4856  0013F4  6F68               	movwf	___awdiv@divisor& (0+255),b
  4857  0013F6  0100               	movlb	0	; () banked
  4858  0013F8  5189               	movf	scale@scl& (0+255),w,b
  4859  0013FA  0100               	movlb	0	; () banked
  4860  0013FC  6F66               	movwf	___awdiv@dividend& (0+255),b
  4861  0013FE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4862  001400  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4863  001402  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4864  001404  EC29  F014         	call	___awdiv	;wreg free
  4865  001408  0E12               	movlw	18
  4866  00140A  0100               	movlb	0	; () banked
  4867  00140C  2566               	addwf	?___awdiv& (0+255),w,b
  4868  00140E  0100               	movlb	0	; () banked
  4869  001410  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4870  001412  0E00               	movlw	0
  4871  001414  0100               	movlb	0	; () banked
  4872  001416  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4873  001418  0100               	movlb	0	; () banked
  4874  00141A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4875  00141C  0E00               	movlw	0
  4876  00141E  0100               	movlb	0	; () banked
  4877  001420  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4878  001422  0E03               	movlw	3
  4879  001424  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4880  001426  EC65  F017         	call	___wmul	;wreg free
  4881  00142A  0E66               	movlw	low __powers_
  4882  00142C  0100               	movlb	0	; () banked
  4883  00142E  256E               	addwf	?___wmul& (0+255),w,b
  4884  001430  6EF6               	movwf	tblptrl,c
  4885  001432  0E7E               	movlw	high __powers_
  4886  001434  0100               	movlb	0	; () banked
  4887  001436  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4888  001438  6EF7               	movwf	tblptrh,c
  4889  00143A                     	if	0	;There are less than 3 active tblptr bytes
  4890  00143A                     	endif
  4891  00143A  0009               	tblrd		*+
  4892  00143C  CFF5 F074          	movff	tablat,___ftmul@f1
  4893  001440  0009               	tblrd		*+
  4894  001442  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4895  001446  000A               	tblrd		*-
  4896  001448  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4897  00144C  ECD0  F00F         	call	___ftmul	;wreg free
  4898  001450  C074  F086         	movff	?___ftmul,_scale$1158
  4899  001454  C075  F087         	movff	?___ftmul+1,_scale$1158+1
  4900  001458  C076  F088         	movff	?___ftmul+2,_scale$1158+2
  4901                           
  4902                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4903  00145C  C086  F074         	movff	_scale$1158,___ftmul@f1
  4904  001460  C087  F075         	movff	_scale$1158+1,___ftmul@f1+1
  4905  001464  C088  F076         	movff	_scale$1158+2,___ftmul@f1+2
  4906  001468  0E00               	movlw	0
  4907  00146A  0100               	movlb	0	; () banked
  4908  00146C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4909  00146E  0E03               	movlw	3
  4910  001470  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4911  001472  0E00               	movlw	0
  4912  001474  0100               	movlb	0	; () banked
  4913  001476  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4914  001478  0E0A               	movlw	10
  4915  00147A  6F62               	movwf	___awmod@divisor& (0+255),b
  4916  00147C  0100               	movlb	0	; () banked
  4917  00147E  5189               	movf	scale@scl& (0+255),w,b
  4918  001480  0100               	movlb	0	; () banked
  4919  001482  6F60               	movwf	___awmod@dividend& (0+255),b
  4920  001484  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4921  001486  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4922  001488  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4923  00148A  EC3D  F015         	call	___awmod	;wreg free
  4924  00148E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4925  001492  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4926  001496  EC65  F017         	call	___wmul	;wreg free
  4927  00149A  0E66               	movlw	low __powers_
  4928  00149C  0100               	movlb	0	; () banked
  4929  00149E  256E               	addwf	?___wmul& (0+255),w,b
  4930  0014A0  6EF6               	movwf	tblptrl,c
  4931  0014A2  0E7E               	movlw	high __powers_
  4932  0014A4  0100               	movlb	0	; () banked
  4933  0014A6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4934  0014A8  6EF7               	movwf	tblptrh,c
  4935  0014AA                     	if	0	;There are less than 3 active tblptr bytes
  4936  0014AA                     	endif
  4937  0014AA  0009               	tblrd		*+
  4938  0014AC  CFF5 F077          	movff	tablat,___ftmul@f2
  4939  0014B0  0009               	tblrd		*+
  4940  0014B2  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4941  0014B6  000A               	tblrd		*-
  4942  0014B8  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4943  0014BC  ECD0  F00F         	call	___ftmul	;wreg free
  4944  0014C0  C074  F083         	movff	?___ftmul,?_scale
  4945  0014C4  C075  F084         	movff	?___ftmul+1,?_scale+1
  4946  0014C8  C076  F085         	movff	?___ftmul+2,?_scale+2
  4947  0014CC  0012               	return	
  4948  0014CE                     l2875:
  4949                           
  4950                           ;doprnt.c: 438: else if(scl > 10)
  4951  0014CE  0100               	movlb	0	; () banked
  4952  0014D0  5189               	movf	scale@scl& (0+255),w,b
  4953  0014D2  0A80               	xorlw	128
  4954  0014D4  0F75               	addlw	-139
  4955  0014D6  A0D8               	btfss	status,0,c
  4956  0014D8  D05D               	goto	l2881
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4960  0014DA  0E00               	movlw	0
  4961  0014DC  0100               	movlb	0	; () banked
  4962  0014DE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4963  0014E0  0E0A               	movlw	10
  4964  0014E2  6F68               	movwf	___awdiv@divisor& (0+255),b
  4965  0014E4  0100               	movlb	0	; () banked
  4966  0014E6  5189               	movf	scale@scl& (0+255),w,b
  4967  0014E8  0100               	movlb	0	; () banked
  4968  0014EA  6F66               	movwf	___awdiv@dividend& (0+255),b
  4969  0014EC  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4970  0014EE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4971  0014F0  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4972  0014F2  EC29  F014         	call	___awdiv	;wreg free
  4973  0014F6  0E09               	movlw	9
  4974  0014F8  0100               	movlb	0	; () banked
  4975  0014FA  2566               	addwf	?___awdiv& (0+255),w,b
  4976  0014FC  0100               	movlb	0	; () banked
  4977  0014FE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4978  001500  0E00               	movlw	0
  4979  001502  0100               	movlb	0	; () banked
  4980  001504  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4981  001506  0100               	movlb	0	; () banked
  4982  001508  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4983  00150A  0E00               	movlw	0
  4984  00150C  0100               	movlb	0	; () banked
  4985  00150E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4986  001510  0E03               	movlw	3
  4987  001512  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4988  001514  EC65  F017         	call	___wmul	;wreg free
  4989  001518  0E66               	movlw	low __powers_
  4990  00151A  0100               	movlb	0	; () banked
  4991  00151C  256E               	addwf	?___wmul& (0+255),w,b
  4992  00151E  6EF6               	movwf	tblptrl,c
  4993  001520  0E7E               	movlw	high __powers_
  4994  001522  0100               	movlb	0	; () banked
  4995  001524  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4996  001526  6EF7               	movwf	tblptrh,c
  4997  001528                     	if	0	;There are less than 3 active tblptr bytes
  4998  001528                     	endif
  4999  001528  0009               	tblrd		*+
  5000  00152A  CFF5 F074          	movff	tablat,___ftmul@f1
  5001  00152E  0009               	tblrd		*+
  5002  001530  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5003  001534  000A               	tblrd		*-
  5004  001536  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5005  00153A  0E00               	movlw	0
  5006  00153C  0100               	movlb	0	; () banked
  5007  00153E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5008  001540  0E03               	movlw	3
  5009  001542  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5010  001544  0E00               	movlw	0
  5011  001546  0100               	movlb	0	; () banked
  5012  001548  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5013  00154A  0E0A               	movlw	10
  5014  00154C  6F62               	movwf	___awmod@divisor& (0+255),b
  5015  00154E  0100               	movlb	0	; () banked
  5016  001550  5189               	movf	scale@scl& (0+255),w,b
  5017  001552  0100               	movlb	0	; () banked
  5018  001554  6F60               	movwf	___awmod@dividend& (0+255),b
  5019  001556  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5020  001558  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  5021  00155A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  5022  00155C  EC3D  F015         	call	___awmod	;wreg free
  5023  001560  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5024  001564  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5025  001568  EC65  F017         	call	___wmul	;wreg free
  5026  00156C  0E66               	movlw	low __powers_
  5027  00156E  0100               	movlb	0	; () banked
  5028  001570  256E               	addwf	?___wmul& (0+255),w,b
  5029  001572  6EF6               	movwf	tblptrl,c
  5030  001574  0E7E               	movlw	high __powers_
  5031  001576  0100               	movlb	0	; () banked
  5032  001578  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5033  00157A  6EF7               	movwf	tblptrh,c
  5034  00157C                     	if	0	;There are less than 3 active tblptr bytes
  5035  00157C                     	endif
  5036  00157C  0009               	tblrd		*+
  5037  00157E  CFF5 F077          	movff	tablat,___ftmul@f2
  5038  001582  0009               	tblrd		*+
  5039  001584  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5040  001588  000A               	tblrd		*-
  5041  00158A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5042  00158E  ECD0  F00F         	call	___ftmul	;wreg free
  5043  001592  D796               	goto	L4
  5044  001594                     l2881:
  5045                           
  5046                           ;doprnt.c: 440: return _powers_[scl];
  5047  001594  0100               	movlb	0	; () banked
  5048  001596  5189               	movf	scale@scl& (0+255),w,b
  5049  001598  0D03               	mullw	3
  5050  00159A  0E66               	movlw	low __powers_
  5051  00159C  24F3               	addwf	prodl,w,c
  5052  00159E  6EF6               	movwf	tblptrl,c
  5053  0015A0  0E7E               	movlw	high __powers_
  5054  0015A2  20F4               	addwfc	prodh,w,c
  5055  0015A4  6EF7               	movwf	tblptrh,c
  5056  0015A6                     	if	0	;There are less than 3 active tblptr bytes
  5057  0015A6                     	endif
  5058  0015A6  0009               	tblrd		*+
  5059  0015A8  CFF5 F083          	movff	tablat,?_scale
  5060  0015AC  0009               	tblrd		*+
  5061  0015AE  CFF5 F084          	movff	tablat,?_scale+1
  5062  0015B2  000A               	tblrd		*-
  5063  0015B4  CFF5 F085          	movff	tablat,?_scale+2
  5064  0015B8  0012               	return	
  5065  0015BA                     __end_of_scale:
  5066                           	opt stack 0
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           prodh	equ	0xFF4
  5072                           prodl	equ	0xFF3
  5073                           intcon2	equ	0xFF1
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           postdec1	equ	0xFE5
  5077                           plusw1	equ	0xFE3
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           plusw2	equ	0xFDB
  5083                           fsr2h	equ	0xFDA
  5084                           fsr2l	equ	0xFD9
  5085                           status	equ	0xFD8
  5086                           
  5087 ;; *************** function _isdigit *****************
  5088 ;; Defined at:
  5089 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  c               1    wreg     unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  c               1    2[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0
  5104 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5105 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5106 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5107 ;;Total ram usage:        3 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    3
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_sprintf
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text4
  5118  002F96                     __ptext4:
  5119                           	opt stack 0
  5120  002F96                     _isdigit:
  5121                           	opt stack 26
  5122                           
  5123                           ;incstack = 0
  5124                           ;isdigit@c stored from wreg
  5125  002F96  0100               	movlb	0	; () banked
  5126  002F98  6F62               	movwf	isdigit@c& (0+255),b
  5127  002F9A  0E00               	movlw	0
  5128  002F9C  0100               	movlb	0	; () banked
  5129  002F9E  6F61               	movwf	_isdigit$826& (0+255),b
  5130                           
  5131                           ; BSR set to: 0
  5132  002FA0  0E3A               	movlw	58
  5133  002FA2  0100               	movlb	0	; () banked
  5134  002FA4  6162               	cpfslt	isdigit@c& (0+255),b
  5135  002FA6  D007               	goto	l2893
  5136                           
  5137                           ; BSR set to: 0
  5138  002FA8  0E2F               	movlw	47
  5139  002FAA  0100               	movlb	0	; () banked
  5140  002FAC  6562               	cpfsgt	isdigit@c& (0+255),b
  5141  002FAE  D003               	goto	l2893
  5142                           
  5143                           ; BSR set to: 0
  5144  002FB0  0E01               	movlw	1
  5145  002FB2  0100               	movlb	0	; () banked
  5146  002FB4  6F61               	movwf	_isdigit$826& (0+255),b
  5147  002FB6                     l2893:
  5148                           
  5149                           ; BSR set to: 0
  5150  002FB6  C061  F060         	movff	_isdigit$826,??_isdigit
  5151  002FBA  0100               	movlb	0	; () banked
  5152  002FBC  3160               	rrcf	??_isdigit& (0+255),w,b
  5153  002FBE  0012               	return	
  5154  002FC0                     __end_of_isdigit:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodh	equ	0xFF4
  5161                           prodl	equ	0xFF3
  5162                           intcon2	equ	0xFF1
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           plusw1	equ	0xFE3
  5167                           fsr1l	equ	0xFE1
  5168                           indf2	equ	0xFDF
  5169                           postinc2	equ	0xFDE
  5170                           postdec2	equ	0xFDD
  5171                           plusw2	equ	0xFDB
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _fround *****************
  5177 ;; Defined at:
  5178 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  prec            1    wreg     unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  prec            1   44[BANK0 ] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  3   35[BANK0 ] unsigned char 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5192 ;;      Params:         0       3       0       0       0       0       0       0       0
  5193 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5195 ;;      Totals:         0      10       0       0       0       0       0       0       0
  5196 ;;Total ram usage:       10 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    5
  5199 ;; This function calls:
  5200 ;;		___awdiv
  5201 ;;		___awmod
  5202 ;;		___ftmul
  5203 ;;		___wmul
  5204 ;; This function is called by:
  5205 ;;		_sprintf
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text5
  5210  0015BA                     __ptext5:
  5211                           	opt stack 0
  5212  0015BA                     _fround:
  5213                           	opt stack 24
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;incstack = 0
  5217                           ;fround@prec stored from wreg
  5218  0015BA  0100               	movlb	0	; () banked
  5219  0015BC  6F8C               	movwf	fround@prec& (0+255),b
  5220                           
  5221                           ;doprnt.c: 413: if(prec>=110)
  5222  0015BE  0E6D               	movlw	109
  5223  0015C0  0100               	movlb	0	; () banked
  5224  0015C2  658C               	cpfsgt	fround@prec& (0+255),b
  5225  0015C4  D0BA               	goto	l2835
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5229  0015C6  0E00               	movlw	0
  5230  0015C8  0100               	movlb	0	; () banked
  5231  0015CA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5232  0015CC  0E03               	movlw	3
  5233  0015CE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5234  0015D0  0E00               	movlw	0
  5235  0015D2  0100               	movlb	0	; () banked
  5236  0015D4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5237  0015D6  0E0A               	movlw	10
  5238  0015D8  6F68               	movwf	___awdiv@divisor& (0+255),b
  5239  0015DA  0E00               	movlw	0
  5240  0015DC  0100               	movlb	0	; () banked
  5241  0015DE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5242  0015E0  0E64               	movlw	100
  5243  0015E2  6F62               	movwf	___awmod@divisor& (0+255),b
  5244  0015E4  C08C  F060         	movff	fround@prec,___awmod@dividend
  5245  0015E8  0100               	movlb	0	; () banked
  5246  0015EA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5247  0015EC  EC3D  F015         	call	___awmod	;wreg free
  5248  0015F0  C060  F066         	movff	?___awmod,___awdiv@dividend
  5249  0015F4  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  5250  0015F8  EC29  F014         	call	___awdiv	;wreg free
  5251  0015FC  0E09               	movlw	9
  5252  0015FE  0100               	movlb	0	; () banked
  5253  001600  2566               	addwf	?___awdiv& (0+255),w,b
  5254  001602  0100               	movlb	0	; () banked
  5255  001604  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5256  001606  0E00               	movlw	0
  5257  001608  0100               	movlb	0	; () banked
  5258  00160A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5259  00160C  0100               	movlb	0	; () banked
  5260  00160E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5261  001610  EC65  F017         	call	___wmul	;wreg free
  5262  001614  0E3F               	movlw	low __npowers_
  5263  001616  0100               	movlb	0	; () banked
  5264  001618  256E               	addwf	?___wmul& (0+255),w,b
  5265  00161A  6EF6               	movwf	tblptrl,c
  5266  00161C  0E7E               	movlw	high __npowers_
  5267  00161E  0100               	movlb	0	; () banked
  5268  001620  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5269  001622  6EF7               	movwf	tblptrh,c
  5270  001624                     	if	0	;There are less than 3 active tblptr bytes
  5271  001624                     	endif
  5272  001624  0009               	tblrd		*+
  5273  001626  CFF5 F077          	movff	tablat,___ftmul@f2
  5274  00162A  0009               	tblrd		*+
  5275  00162C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5276  001630  000A               	tblrd		*-
  5277  001632  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5278  001636  0E00               	movlw	0
  5279  001638  0100               	movlb	0	; () banked
  5280  00163A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5281  00163C  0E64               	movlw	100
  5282  00163E  6F68               	movwf	___awdiv@divisor& (0+255),b
  5283  001640  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5284  001644  0100               	movlb	0	; () banked
  5285  001646  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5286  001648  EC29  F014         	call	___awdiv	;wreg free
  5287  00164C  0E12               	movlw	18
  5288  00164E  0100               	movlb	0	; () banked
  5289  001650  2566               	addwf	?___awdiv& (0+255),w,b
  5290  001652  0100               	movlb	0	; () banked
  5291  001654  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5292  001656  0E00               	movlw	0
  5293  001658  0100               	movlb	0	; () banked
  5294  00165A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5295  00165C  0100               	movlb	0	; () banked
  5296  00165E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5297  001660  0E00               	movlw	0
  5298  001662  0100               	movlb	0	; () banked
  5299  001664  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5300  001666  0E03               	movlw	3
  5301  001668  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5302  00166A  EC65  F017         	call	___wmul	;wreg free
  5303  00166E  0E3F               	movlw	low __npowers_
  5304  001670  0100               	movlb	0	; () banked
  5305  001672  256E               	addwf	?___wmul& (0+255),w,b
  5306  001674  6EF6               	movwf	tblptrl,c
  5307  001676  0E7E               	movlw	high __npowers_
  5308  001678  0100               	movlb	0	; () banked
  5309  00167A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5310  00167C  6EF7               	movwf	tblptrh,c
  5311  00167E                     	if	0	;There are less than 3 active tblptr bytes
  5312  00167E                     	endif
  5313  00167E  0009               	tblrd		*+
  5314  001680  CFF5 F074          	movff	tablat,___ftmul@f1
  5315  001684  0009               	tblrd		*+
  5316  001686  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5317  00168A  000A               	tblrd		*-
  5318  00168C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5319  001690  ECD0  F00F         	call	___ftmul	;wreg free
  5320  001694  C074  F089         	movff	?___ftmul,_fround$1156
  5321  001698  C075  F08A         	movff	?___ftmul+1,_fround$1156+1
  5322  00169C  C076  F08B         	movff	?___ftmul+2,_fround$1156+2
  5323                           
  5324                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5325  0016A0  0E00               	movlw	0
  5326  0016A2  0100               	movlb	0	; () banked
  5327  0016A4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5328  0016A6  0E03               	movlw	3
  5329  0016A8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5330  0016AA  0E00               	movlw	0
  5331  0016AC  0100               	movlb	0	; () banked
  5332  0016AE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5333  0016B0  0E0A               	movlw	10
  5334  0016B2  6F62               	movwf	___awmod@divisor& (0+255),b
  5335  0016B4  C08C  F060         	movff	fround@prec,___awmod@dividend
  5336  0016B8  0100               	movlb	0	; () banked
  5337  0016BA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5338  0016BC  EC3D  F015         	call	___awmod	;wreg free
  5339  0016C0  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5340  0016C4  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5341  0016C8  EC65  F017         	call	___wmul	;wreg free
  5342  0016CC  0E3F               	movlw	low __npowers_
  5343  0016CE  0100               	movlb	0	; () banked
  5344  0016D0  256E               	addwf	?___wmul& (0+255),w,b
  5345  0016D2  6EF6               	movwf	tblptrl,c
  5346  0016D4  0E7E               	movlw	high __npowers_
  5347  0016D6  0100               	movlb	0	; () banked
  5348  0016D8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5349  0016DA  6EF7               	movwf	tblptrh,c
  5350  0016DC                     	if	0	;There are less than 3 active tblptr bytes
  5351  0016DC                     	endif
  5352  0016DC  0009               	tblrd		*+
  5353  0016DE  CFF5 F077          	movff	tablat,___ftmul@f2
  5354  0016E2  0009               	tblrd		*+
  5355  0016E4  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5356  0016E8  000A               	tblrd		*-
  5357  0016EA  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5358  0016EE  C089  F074         	movff	_fround$1156,___ftmul@f1
  5359  0016F2  C08A  F075         	movff	_fround$1156+1,___ftmul@f1+1
  5360  0016F6  C08B  F076         	movff	_fround$1156+2,___ftmul@f1+2
  5361  0016FA  ECD0  F00F         	call	___ftmul	;wreg free
  5362  0016FE  C074  F086         	movff	?___ftmul,_fround$1157
  5363  001702  C075  F087         	movff	?___ftmul+1,_fround$1157+1
  5364  001706  C076  F088         	movff	?___ftmul+2,_fround$1157+2
  5365                           
  5366                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5367  00170A  C086  F074         	movff	_fround$1157,___ftmul@f1
  5368  00170E  C087  F075         	movff	_fround$1157+1,___ftmul@f1+1
  5369  001712  C088  F076         	movff	_fround$1157+2,___ftmul@f1+2
  5370  001716  0E00               	movlw	0
  5371  001718  0100               	movlb	0	; () banked
  5372  00171A  6F77               	movwf	___ftmul@f2& (0+255),b
  5373  00171C  0E00               	movlw	0
  5374  00171E  0100               	movlb	0	; () banked
  5375  001720  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5376  001722  0E3F               	movlw	63
  5377  001724  0100               	movlb	0	; () banked
  5378  001726  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5379  001728  ECD0  F00F         	call	___ftmul	;wreg free
  5380  00172C  C074  F083         	movff	?___ftmul,?_fround
  5381  001730  C075  F084         	movff	?___ftmul+1,?_fround+1
  5382  001734  C076  F085         	movff	?___ftmul+2,?_fround+2
  5383  001738  0012               	return	
  5384  00173A                     l2835:
  5385                           
  5386                           ;doprnt.c: 415: else if(prec > 10)
  5387  00173A  0E0A               	movlw	10
  5388  00173C  0100               	movlb	0	; () banked
  5389  00173E  658C               	cpfsgt	fround@prec& (0+255),b
  5390  001740  D06E               	goto	l2843
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5394  001742  0E00               	movlw	0
  5395  001744  0100               	movlb	0	; () banked
  5396  001746  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5397  001748  0E03               	movlw	3
  5398  00174A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5399  00174C  0E00               	movlw	0
  5400  00174E  0100               	movlb	0	; () banked
  5401  001750  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5402  001752  0E0A               	movlw	10
  5403  001754  6F62               	movwf	___awmod@divisor& (0+255),b
  5404  001756  C08C  F060         	movff	fround@prec,___awmod@dividend
  5405  00175A  0100               	movlb	0	; () banked
  5406  00175C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5407  00175E  EC3D  F015         	call	___awmod	;wreg free
  5408  001762  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5409  001766  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5410  00176A  EC65  F017         	call	___wmul	;wreg free
  5411  00176E  0E3F               	movlw	low __npowers_
  5412  001770  0100               	movlb	0	; () banked
  5413  001772  256E               	addwf	?___wmul& (0+255),w,b
  5414  001774  6EF6               	movwf	tblptrl,c
  5415  001776  0E7E               	movlw	high __npowers_
  5416  001778  0100               	movlb	0	; () banked
  5417  00177A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5418  00177C  6EF7               	movwf	tblptrh,c
  5419  00177E                     	if	0	;There are less than 3 active tblptr bytes
  5420  00177E                     	endif
  5421  00177E  0009               	tblrd		*+
  5422  001780  CFF5 F077          	movff	tablat,___ftmul@f2
  5423  001784  0009               	tblrd		*+
  5424  001786  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5425  00178A  000A               	tblrd		*-
  5426  00178C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5427  001790  0E00               	movlw	0
  5428  001792  0100               	movlb	0	; () banked
  5429  001794  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5430  001796  0E0A               	movlw	10
  5431  001798  6F68               	movwf	___awdiv@divisor& (0+255),b
  5432  00179A  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5433  00179E  0100               	movlb	0	; () banked
  5434  0017A0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5435  0017A2  EC29  F014         	call	___awdiv	;wreg free
  5436  0017A6  0E09               	movlw	9
  5437  0017A8  0100               	movlb	0	; () banked
  5438  0017AA  2566               	addwf	?___awdiv& (0+255),w,b
  5439  0017AC  0100               	movlb	0	; () banked
  5440  0017AE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5441  0017B0  0E00               	movlw	0
  5442  0017B2  0100               	movlb	0	; () banked
  5443  0017B4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5444  0017B6  0100               	movlb	0	; () banked
  5445  0017B8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5446  0017BA  0E00               	movlw	0
  5447  0017BC  0100               	movlb	0	; () banked
  5448  0017BE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5449  0017C0  0E03               	movlw	3
  5450  0017C2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5451  0017C4  EC65  F017         	call	___wmul	;wreg free
  5452  0017C8  0E3F               	movlw	low __npowers_
  5453  0017CA  0100               	movlb	0	; () banked
  5454  0017CC  256E               	addwf	?___wmul& (0+255),w,b
  5455  0017CE  6EF6               	movwf	tblptrl,c
  5456  0017D0  0E7E               	movlw	high __npowers_
  5457  0017D2  0100               	movlb	0	; () banked
  5458  0017D4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5459  0017D6  6EF7               	movwf	tblptrh,c
  5460  0017D8                     	if	0	;There are less than 3 active tblptr bytes
  5461  0017D8                     	endif
  5462  0017D8  0009               	tblrd		*+
  5463  0017DA  CFF5 F074          	movff	tablat,___ftmul@f1
  5464  0017DE  0009               	tblrd		*+
  5465  0017E0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5466  0017E4  000A               	tblrd		*-
  5467  0017E6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5468  0017EA  ECD0  F00F         	call	___ftmul	;wreg free
  5469  0017EE  C074  F089         	movff	?___ftmul,_fround$1156
  5470  0017F2  C075  F08A         	movff	?___ftmul+1,_fround$1156+1
  5471  0017F6  C076  F08B         	movff	?___ftmul+2,_fround$1156+2
  5472                           
  5473                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5474  0017FA  C089  F074         	movff	_fround$1156,___ftmul@f1
  5475  0017FE  C08A  F075         	movff	_fround$1156+1,___ftmul@f1+1
  5476  001802  C08B  F076         	movff	_fround$1156+2,___ftmul@f1+2
  5477  001806  0E00               	movlw	0
  5478  001808  0100               	movlb	0	; () banked
  5479  00180A  6F77               	movwf	___ftmul@f2& (0+255),b
  5480  00180C  0E00               	movlw	0
  5481  00180E  0100               	movlb	0	; () banked
  5482  001810  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5483  001812  0E3F               	movlw	63
  5484  001814  0100               	movlb	0	; () banked
  5485  001816  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5486  001818  ECD0  F00F         	call	___ftmul	;wreg free
  5487  00181C  D787               	goto	L5
  5488  00181E                     l2843:
  5489                           
  5490                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5491  00181E  0100               	movlb	0	; () banked
  5492  001820  518C               	movf	fround@prec& (0+255),w,b
  5493  001822  0D03               	mullw	3
  5494  001824  0E3F               	movlw	low __npowers_
  5495  001826  24F3               	addwf	prodl,w,c
  5496  001828  6EF6               	movwf	tblptrl,c
  5497  00182A  0E7E               	movlw	high __npowers_
  5498  00182C  20F4               	addwfc	prodh,w,c
  5499  00182E  6EF7               	movwf	tblptrh,c
  5500  001830                     	if	0	;There are less than 3 active tblptr bytes
  5501  001830                     	endif
  5502  001830  0009               	tblrd		*+
  5503  001832  CFF5 F074          	movff	tablat,___ftmul@f1
  5504  001836  0009               	tblrd		*+
  5505  001838  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5506  00183C  000A               	tblrd		*-
  5507  00183E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5508  001842  0E00               	movlw	0
  5509  001844  0100               	movlb	0	; () banked
  5510  001846  6F77               	movwf	___ftmul@f2& (0+255),b
  5511  001848  0E00               	movlw	0
  5512  00184A  0100               	movlb	0	; () banked
  5513  00184C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5514  00184E  0E3F               	movlw	63
  5515  001850  0100               	movlb	0	; () banked
  5516  001852  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5517  001854  ECD0  F00F         	call	___ftmul	;wreg free
  5518  001858  C074  F083         	movff	?___ftmul,?_fround
  5519  00185C  C075  F084         	movff	?___ftmul+1,?_fround+1
  5520  001860  C076  F085         	movff	?___ftmul+2,?_fround+2
  5521  001864  0012               	return	
  5522  001866                     __end_of_fround:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon2	equ	0xFF1
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           postdec1	equ	0xFE5
  5534                           plusw1	equ	0xFE3
  5535                           fsr1l	equ	0xFE1
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           plusw2	equ	0xFDB
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function ___wmul *****************
  5545 ;; Defined at:
  5546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  multiplier      2   14[BANK0 ] unsigned int 
  5549 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  product         2   18[BANK0 ] unsigned int 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  2   14[BANK0 ] unsigned int 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, prodl, prodh
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5561 ;;      Params:         0       4       0       0       0       0       0       0       0
  5562 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5564 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5565 ;;Total ram usage:        6 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    3
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_fround
  5572 ;;		_scale
  5573 ;;		_sprintf
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text6
  5578  002ECA                     __ptext6:
  5579                           	opt stack 0
  5580  002ECA                     ___wmul:
  5581                           	opt stack 25
  5582                           
  5583                           ;incstack = 0
  5584  002ECA  0100               	movlb	0	; () banked
  5585  002ECC  516E               	movf	___wmul@multiplier& (0+255),w,b
  5586  002ECE  0100               	movlb	0	; () banked
  5587  002ED0  0370               	mulwf	___wmul@multiplicand& (0+255),b
  5588  002ED2  CFF3 F072          	movff	prodl,___wmul@product
  5589  002ED6  CFF4 F073          	movff	prodh,___wmul@product+1
  5590  002EDA  0100               	movlb	0	; () banked
  5591  002EDC  516E               	movf	___wmul@multiplier& (0+255),w,b
  5592  002EDE  0100               	movlb	0	; () banked
  5593  002EE0  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5594  002EE2  50F3               	movf	prodl,w,c
  5595  002EE4  0100               	movlb	0	; () banked
  5596  002EE6  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  5597  002EE8  0100               	movlb	0	; () banked
  5598  002EEA  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5599  002EEC  0100               	movlb	0	; () banked
  5600  002EEE  0370               	mulwf	___wmul@multiplicand& (0+255),b
  5601  002EF0  50F3               	movf	prodl,w,c
  5602  002EF2  0100               	movlb	0	; () banked
  5603  002EF4  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  5604                           
  5605                           ; BSR set to: 0
  5606  002EF6  C072  F06E         	movff	___wmul@product,?___wmul
  5607  002EFA  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  5608  002EFE  0012               	return	
  5609  002F00                     __end_of___wmul:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon2	equ	0xFF1
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           postdec1	equ	0xFE5
  5621                           plusw1	equ	0xFE3
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           plusw2	equ	0xFDB
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function ___ftmul *****************
  5632 ;; Defined at:
  5633 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  f1              3   20[BANK0 ] float 
  5636 ;;  f2              3   23[BANK0 ] float 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  5639 ;;  sign            1   34[BANK0 ] unsigned char 
  5640 ;;  cntr            1   33[BANK0 ] unsigned char 
  5641 ;;  exp             1   29[BANK0 ] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  3   20[BANK0 ] float 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5651 ;;      Params:         0       6       0       0       0       0       0       0       0
  5652 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5653 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5654 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5655 ;;Total ram usage:       15 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    4
  5658 ;; This function calls:
  5659 ;;		___ftpack
  5660 ;; This function is called by:
  5661 ;;		_fround
  5662 ;;		_scale
  5663 ;;		_sprintf
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text7
  5668  001FA0                     __ptext7:
  5669                           	opt stack 0
  5670  001FA0                     ___ftmul:
  5671                           	opt stack 24
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;incstack = 0
  5675  001FA0  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  5676  001FA4  0100               	movlb	0	; () banked
  5677  001FA6  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5678  001FA8  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5679  001FAA  0100               	movlb	0	; () banked
  5680  001FAC  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5681  001FAE  0100               	movlb	0	; () banked
  5682  001FB0  377A               	rlcf	??___ftmul& (0+255),f,b
  5683  001FB2  E301               	bnc	u2631
  5684  001FB4  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5685  001FB6                     u2631:
  5686  001FB6  0100               	movlb	0	; () banked
  5687  001FB8  517A               	movf	??___ftmul& (0+255),w,b
  5688  001FBA  0100               	movlb	0	; () banked
  5689  001FBC  6F7D               	movwf	___ftmul@exp& (0+255),b
  5690  001FBE  0100               	movlb	0	; () banked
  5691  001FC0  517D               	movf	___ftmul@exp& (0+255),w,b
  5692  001FC2  A4D8               	btfss	status,2,c
  5693  001FC4  D00A               	goto	l2663
  5694                           
  5695                           ; BSR set to: 0
  5696  001FC6  0E00               	movlw	0
  5697  001FC8  0100               	movlb	0	; () banked
  5698  001FCA  6F74               	movwf	?___ftmul& (0+255),b
  5699  001FCC  0E00               	movlw	0
  5700  001FCE  0100               	movlb	0	; () banked
  5701  001FD0  6F75               	movwf	(?___ftmul+1)& (0+255),b
  5702  001FD2  0E00               	movlw	0
  5703  001FD4  0100               	movlb	0	; () banked
  5704  001FD6  6F76               	movwf	(?___ftmul+2)& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707  001FD8  0012               	return	
  5708  001FDA                     l2663:
  5709                           
  5710                           ; BSR set to: 0
  5711  001FDA  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  5712  001FDE  0100               	movlb	0	; () banked
  5713  001FE0  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5714  001FE2  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5715  001FE4  0100               	movlb	0	; () banked
  5716  001FE6  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5717  001FE8  0100               	movlb	0	; () banked
  5718  001FEA  377A               	rlcf	??___ftmul& (0+255),f,b
  5719  001FEC  E301               	bnc	u2651
  5720  001FEE  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5721  001FF0                     u2651:
  5722  001FF0  0100               	movlb	0	; () banked
  5723  001FF2  517A               	movf	??___ftmul& (0+255),w,b
  5724  001FF4  0100               	movlb	0	; () banked
  5725  001FF6  6F82               	movwf	___ftmul@sign& (0+255),b
  5726  001FF8  0100               	movlb	0	; () banked
  5727  001FFA  5182               	movf	___ftmul@sign& (0+255),w,b
  5728  001FFC  A4D8               	btfss	status,2,c
  5729  001FFE  D00A               	goto	l2669
  5730                           
  5731                           ; BSR set to: 0
  5732  002000  0E00               	movlw	0
  5733  002002  0100               	movlb	0	; () banked
  5734  002004  6F74               	movwf	?___ftmul& (0+255),b
  5735  002006  0E00               	movlw	0
  5736  002008  0100               	movlb	0	; () banked
  5737  00200A  6F75               	movwf	(?___ftmul+1)& (0+255),b
  5738  00200C  0E00               	movlw	0
  5739  00200E  0100               	movlb	0	; () banked
  5740  002010  6F76               	movwf	(?___ftmul+2)& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743  002012  0012               	return	
  5744  002014                     l2669:
  5745                           
  5746                           ; BSR set to: 0
  5747  002014  0100               	movlb	0	; () banked
  5748  002016  5182               	movf	___ftmul@sign& (0+255),w,b
  5749  002018  0F7B               	addlw	123
  5750  00201A  0100               	movlb	0	; () banked
  5751  00201C  277D               	addwf	___ftmul@exp& (0+255),f,b
  5752                           
  5753                           ; BSR set to: 0
  5754  00201E  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  5755  002022  0100               	movlb	0	; () banked
  5756  002024  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5757  002026  0100               	movlb	0	; () banked
  5758  002028  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  5759  00202A  0E80               	movlw	128
  5760  00202C  0100               	movlb	0	; () banked
  5761  00202E  1782               	andwf	___ftmul@sign& (0+255),f,b
  5762                           
  5763                           ; BSR set to: 0
  5764  002030  0100               	movlb	0	; () banked
  5765  002032  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5766                           
  5767                           ; BSR set to: 0
  5768  002034  0100               	movlb	0	; () banked
  5769  002036  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5770                           
  5771                           ; BSR set to: 0
  5772  002038  0EFF               	movlw	255
  5773  00203A  0100               	movlb	0	; () banked
  5774  00203C  1777               	andwf	___ftmul@f2& (0+255),f,b
  5775  00203E  0EFF               	movlw	255
  5776  002040  0100               	movlb	0	; () banked
  5777  002042  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5778  002044  0E00               	movlw	0
  5779  002046  0100               	movlb	0	; () banked
  5780  002048  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5781                           
  5782                           ; BSR set to: 0
  5783  00204A  0E00               	movlw	0
  5784  00204C  0100               	movlb	0	; () banked
  5785  00204E  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  5786  002050  0E00               	movlw	0
  5787  002052  0100               	movlb	0	; () banked
  5788  002054  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5789  002056  0E00               	movlw	0
  5790  002058  0100               	movlb	0	; () banked
  5791  00205A  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5792                           
  5793                           ; BSR set to: 0
  5794  00205C  0E07               	movlw	7
  5795  00205E  0100               	movlb	0	; () banked
  5796  002060  6F81               	movwf	___ftmul@cntr& (0+255),b
  5797  002062                     l2683:
  5798                           
  5799                           ; BSR set to: 0
  5800  002062  0100               	movlb	0	; () banked
  5801  002064  A174               	btfss	___ftmul@f1& (0+255),0,b
  5802  002066  D00C               	goto	l2687
  5803                           
  5804                           ; BSR set to: 0
  5805  002068  0100               	movlb	0	; () banked
  5806  00206A  5177               	movf	___ftmul@f2& (0+255),w,b
  5807  00206C  0100               	movlb	0	; () banked
  5808  00206E  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5809  002070  0100               	movlb	0	; () banked
  5810  002072  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5811  002074  0100               	movlb	0	; () banked
  5812  002076  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5813  002078  0100               	movlb	0	; () banked
  5814  00207A  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5815  00207C  0100               	movlb	0	; () banked
  5816  00207E  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5817  002080                     l2687:
  5818                           
  5819                           ; BSR set to: 0
  5820  002080  0100               	movlb	0	; () banked
  5821  002082  90D8               	bcf	status,0,c
  5822  002084  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5823  002086  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5824  002088  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5825  00208A  0100               	movlb	0	; () banked
  5826  00208C  90D8               	bcf	status,0,c
  5827  00208E  3777               	rlcf	___ftmul@f2& (0+255),f,b
  5828  002090  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5829  002092  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5830                           
  5831                           ; BSR set to: 0
  5832  002094  0100               	movlb	0	; () banked
  5833  002096  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5834  002098  D7E4               	goto	l2683
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839  00209A  0E09               	movlw	9
  5840  00209C  0100               	movlb	0	; () banked
  5841  00209E  6F81               	movwf	___ftmul@cntr& (0+255),b
  5842  0020A0                     l2693:
  5843                           
  5844                           ; BSR set to: 0
  5845  0020A0  0100               	movlb	0	; () banked
  5846  0020A2  A174               	btfss	___ftmul@f1& (0+255),0,b
  5847  0020A4  D00C               	goto	l2697
  5848                           
  5849                           ; BSR set to: 0
  5850  0020A6  0100               	movlb	0	; () banked
  5851  0020A8  5177               	movf	___ftmul@f2& (0+255),w,b
  5852  0020AA  0100               	movlb	0	; () banked
  5853  0020AC  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5854  0020AE  0100               	movlb	0	; () banked
  5855  0020B0  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5856  0020B2  0100               	movlb	0	; () banked
  5857  0020B4  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5858  0020B6  0100               	movlb	0	; () banked
  5859  0020B8  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5860  0020BA  0100               	movlb	0	; () banked
  5861  0020BC  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5862  0020BE                     l2697:
  5863                           
  5864                           ; BSR set to: 0
  5865  0020BE  0100               	movlb	0	; () banked
  5866  0020C0  90D8               	bcf	status,0,c
  5867  0020C2  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5868  0020C4  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5869  0020C6  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5870  0020C8  0100               	movlb	0	; () banked
  5871  0020CA  90D8               	bcf	status,0,c
  5872  0020CC  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5873  0020CE  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5874  0020D0  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5875                           
  5876                           ; BSR set to: 0
  5877  0020D2  0100               	movlb	0	; () banked
  5878  0020D4  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5879  0020D6  D7E4               	goto	l2693
  5880                           
  5881                           ; BSR set to: 0
  5882                           
  5883                           ; BSR set to: 0
  5884  0020D8  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  5885  0020DC  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5886  0020E0  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5887  0020E4  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  5888  0020E8  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  5889  0020EC  EC52  F012         	call	___ftpack	;wreg free
  5890  0020F0  C060  F074         	movff	?___ftpack,?___ftmul
  5891  0020F4  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  5892  0020F8  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  5893  0020FC  0012               	return	
  5894  0020FE                     __end_of___ftmul:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           intcon2	equ	0xFF1
  5903                           postinc0	equ	0xFEE
  5904                           wreg	equ	0xFE8
  5905                           postdec1	equ	0xFE5
  5906                           plusw1	equ	0xFE3
  5907                           fsr1l	equ	0xFE1
  5908                           indf2	equ	0xFDF
  5909                           postinc2	equ	0xFDE
  5910                           postdec2	equ	0xFDD
  5911                           plusw2	equ	0xFDB
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function ___awmod *****************
  5917 ;; Defined at:
  5918 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  dividend        2    0[BANK0 ] int 
  5921 ;;  divisor         2    2[BANK0 ] int 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  sign            1    5[BANK0 ] unsigned char 
  5924 ;;  counter         1    4[BANK0 ] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  2    0[BANK0 ] int 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5934 ;;      Params:         0       4       0       0       0       0       0       0       0
  5935 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5937 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5938 ;;Total ram usage:        6 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    3
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_fround
  5945 ;;		_scale
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text8
  5950  002A7A                     __ptext8:
  5951                           	opt stack 0
  5952  002A7A                     ___awmod:
  5953                           	opt stack 25
  5954                           
  5955                           ;incstack = 0
  5956  002A7A  0E00               	movlw	0
  5957  002A7C  0100               	movlb	0	; () banked
  5958  002A7E  6F65               	movwf	___awmod@sign& (0+255),b
  5959                           
  5960                           ; BSR set to: 0
  5961  002A80  0100               	movlb	0	; () banked
  5962  002A82  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5963  002A84  D008               	goto	l2757
  5964                           
  5965                           ; BSR set to: 0
  5966  002A86  0100               	movlb	0	; () banked
  5967  002A88  6D60               	negf	___awmod@dividend& (0+255),b
  5968  002A8A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5969  002A8C  B0D8               	btfsc	status,0,c
  5970  002A8E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5971                           
  5972                           ; BSR set to: 0
  5973  002A90  0E01               	movlw	1
  5974  002A92  0100               	movlb	0	; () banked
  5975  002A94  6F65               	movwf	___awmod@sign& (0+255),b
  5976  002A96                     l2757:
  5977                           
  5978                           ; BSR set to: 0
  5979  002A96  0100               	movlb	0	; () banked
  5980  002A98  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5981  002A9A  D005               	goto	l2761
  5982                           
  5983                           ; BSR set to: 0
  5984  002A9C  0100               	movlb	0	; () banked
  5985  002A9E  6D62               	negf	___awmod@divisor& (0+255),b
  5986  002AA0  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  5987  002AA2  B0D8               	btfsc	status,0,c
  5988  002AA4  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  5989  002AA6                     l2761:
  5990                           
  5991                           ; BSR set to: 0
  5992  002AA6  0100               	movlb	0	; () banked
  5993  002AA8  5162               	movf	___awmod@divisor& (0+255),w,b
  5994  002AAA  0100               	movlb	0	; () banked
  5995  002AAC  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5996  002AAE  B4D8               	btfsc	status,2,c
  5997  002AB0  D026               	goto	l2777
  5998                           
  5999                           ; BSR set to: 0
  6000  002AB2  0E01               	movlw	1
  6001  002AB4  0100               	movlb	0	; () banked
  6002  002AB6  6F64               	movwf	___awmod@counter& (0+255),b
  6003  002AB8  D006               	goto	l2767
  6004  002ABA                     l2765:
  6005                           
  6006                           ; BSR set to: 0
  6007  002ABA  0100               	movlb	0	; () banked
  6008  002ABC  90D8               	bcf	status,0,c
  6009  002ABE  3762               	rlcf	___awmod@divisor& (0+255),f,b
  6010  002AC0  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6011  002AC2  0100               	movlb	0	; () banked
  6012  002AC4  2B64               	incf	___awmod@counter& (0+255),f,b
  6013  002AC6                     l2767:
  6014                           
  6015                           ; BSR set to: 0
  6016  002AC6  0100               	movlb	0	; () banked
  6017  002AC8  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6018  002ACA  D7F7               	goto	l2765
  6019  002ACC                     l2769:
  6020                           
  6021                           ; BSR set to: 0
  6022  002ACC  0100               	movlb	0	; () banked
  6023  002ACE  5162               	movf	___awmod@divisor& (0+255),w,b
  6024  002AD0  0100               	movlb	0	; () banked
  6025  002AD2  5D60               	subwf	___awmod@dividend& (0+255),w,b
  6026  002AD4  0100               	movlb	0	; () banked
  6027  002AD6  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6028  002AD8  0100               	movlb	0	; () banked
  6029  002ADA  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6030  002ADC  A0D8               	btfss	status,0,c
  6031  002ADE  D008               	goto	l2773
  6032                           
  6033                           ; BSR set to: 0
  6034  002AE0  0100               	movlb	0	; () banked
  6035  002AE2  5162               	movf	___awmod@divisor& (0+255),w,b
  6036  002AE4  0100               	movlb	0	; () banked
  6037  002AE6  5F60               	subwf	___awmod@dividend& (0+255),f,b
  6038  002AE8  0100               	movlb	0	; () banked
  6039  002AEA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6040  002AEC  0100               	movlb	0	; () banked
  6041  002AEE  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6042  002AF0                     l2773:
  6043                           
  6044                           ; BSR set to: 0
  6045  002AF0  0100               	movlb	0	; () banked
  6046  002AF2  90D8               	bcf	status,0,c
  6047  002AF4  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6048  002AF6  3362               	rrcf	___awmod@divisor& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 0
  6051  002AF8  0100               	movlb	0	; () banked
  6052  002AFA  2F64               	decfsz	___awmod@counter& (0+255),f,b
  6053  002AFC  D7E7               	goto	l2769
  6054  002AFE                     l2777:
  6055                           
  6056                           ; BSR set to: 0
  6057  002AFE  0100               	movlb	0	; () banked
  6058  002B00  5165               	movf	___awmod@sign& (0+255),w,b
  6059  002B02  0100               	movlb	0	; () banked
  6060  002B04  B4D8               	btfsc	status,2,c
  6061  002B06  D005               	goto	l2781
  6062                           
  6063                           ; BSR set to: 0
  6064  002B08  0100               	movlb	0	; () banked
  6065  002B0A  6D60               	negf	___awmod@dividend& (0+255),b
  6066  002B0C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  6067  002B0E  B0D8               	btfsc	status,0,c
  6068  002B10  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  6069  002B12                     l2781:
  6070                           
  6071                           ; BSR set to: 0
  6072  002B12  C060  F060         	movff	___awmod@dividend,?___awmod
  6073  002B16  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  6074  002B1A  0012               	return	
  6075  002B1C                     __end_of___awmod:
  6076                           	opt stack 0
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon2	equ	0xFF1
  6084                           postinc0	equ	0xFEE
  6085                           wreg	equ	0xFE8
  6086                           postdec1	equ	0xFE5
  6087                           plusw1	equ	0xFE3
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           plusw2	equ	0xFDB
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function ___awdiv *****************
  6098 ;; Defined at:
  6099 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  dividend        2    6[BANK0 ] int 
  6102 ;;  divisor         2    8[BANK0 ] int 
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  quotient        2   12[BANK0 ] int 
  6105 ;;  sign            1   11[BANK0 ] unsigned char 
  6106 ;;  counter         1   10[BANK0 ] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  2    6[BANK0 ] int 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6116 ;;      Params:         0       4       0       0       0       0       0       0       0
  6117 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6119 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6120 ;;Total ram usage:        8 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    3
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_fround
  6127 ;;		_scale
  6128 ;;		_sprintf
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text9
  6133  002852                     __ptext9:
  6134                           	opt stack 0
  6135  002852                     ___awdiv:
  6136                           	opt stack 25
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;incstack = 0
  6140  002852  0E00               	movlw	0
  6141  002854  0100               	movlb	0	; () banked
  6142  002856  6F6B               	movwf	___awdiv@sign& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145  002858  0100               	movlb	0	; () banked
  6146  00285A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6147  00285C  D008               	goto	l2713
  6148                           
  6149                           ; BSR set to: 0
  6150  00285E  0100               	movlb	0	; () banked
  6151  002860  6D68               	negf	___awdiv@divisor& (0+255),b
  6152  002862  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6153  002864  B0D8               	btfsc	status,0,c
  6154  002866  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6155                           
  6156                           ; BSR set to: 0
  6157  002868  0E01               	movlw	1
  6158  00286A  0100               	movlb	0	; () banked
  6159  00286C  6F6B               	movwf	___awdiv@sign& (0+255),b
  6160  00286E                     l2713:
  6161                           
  6162                           ; BSR set to: 0
  6163  00286E  0100               	movlb	0	; () banked
  6164  002870  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6165  002872  D008               	goto	l2719
  6166                           
  6167                           ; BSR set to: 0
  6168  002874  0100               	movlb	0	; () banked
  6169  002876  6D66               	negf	___awdiv@dividend& (0+255),b
  6170  002878  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6171  00287A  B0D8               	btfsc	status,0,c
  6172  00287C  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6173                           
  6174                           ; BSR set to: 0
  6175  00287E  0E01               	movlw	1
  6176  002880  0100               	movlb	0	; () banked
  6177  002882  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  6178  002884                     l2719:
  6179                           
  6180                           ; BSR set to: 0
  6181  002884  0E00               	movlw	0
  6182  002886  0100               	movlb	0	; () banked
  6183  002888  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6184  00288A  0E00               	movlw	0
  6185  00288C  6F6C               	movwf	___awdiv@quotient& (0+255),b
  6186                           
  6187                           ; BSR set to: 0
  6188  00288E  0100               	movlb	0	; () banked
  6189  002890  5168               	movf	___awdiv@divisor& (0+255),w,b
  6190  002892  0100               	movlb	0	; () banked
  6191  002894  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6192  002896  B4D8               	btfsc	status,2,c
  6193  002898  D02C               	goto	l2741
  6194                           
  6195                           ; BSR set to: 0
  6196  00289A  0E01               	movlw	1
  6197  00289C  0100               	movlb	0	; () banked
  6198  00289E  6F6A               	movwf	___awdiv@counter& (0+255),b
  6199  0028A0  D006               	goto	l2727
  6200  0028A2                     l2725:
  6201                           
  6202                           ; BSR set to: 0
  6203  0028A2  0100               	movlb	0	; () banked
  6204  0028A4  90D8               	bcf	status,0,c
  6205  0028A6  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  6206  0028A8  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6207  0028AA  0100               	movlb	0	; () banked
  6208  0028AC  2B6A               	incf	___awdiv@counter& (0+255),f,b
  6209  0028AE                     l2727:
  6210                           
  6211                           ; BSR set to: 0
  6212  0028AE  0100               	movlb	0	; () banked
  6213  0028B0  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6214  0028B2  D7F7               	goto	l2725
  6215  0028B4                     l2729:
  6216                           
  6217                           ; BSR set to: 0
  6218  0028B4  0100               	movlb	0	; () banked
  6219  0028B6  90D8               	bcf	status,0,c
  6220  0028B8  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  6221  0028BA  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6222                           
  6223                           ; BSR set to: 0
  6224  0028BC  0100               	movlb	0	; () banked
  6225  0028BE  5168               	movf	___awdiv@divisor& (0+255),w,b
  6226  0028C0  0100               	movlb	0	; () banked
  6227  0028C2  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  6228  0028C4  0100               	movlb	0	; () banked
  6229  0028C6  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6230  0028C8  0100               	movlb	0	; () banked
  6231  0028CA  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6232  0028CC  A0D8               	btfss	status,0,c
  6233  0028CE  D00A               	goto	l2737
  6234                           
  6235                           ; BSR set to: 0
  6236  0028D0  0100               	movlb	0	; () banked
  6237  0028D2  5168               	movf	___awdiv@divisor& (0+255),w,b
  6238  0028D4  0100               	movlb	0	; () banked
  6239  0028D6  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  6240  0028D8  0100               	movlb	0	; () banked
  6241  0028DA  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6242  0028DC  0100               	movlb	0	; () banked
  6243  0028DE  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6244                           
  6245                           ; BSR set to: 0
  6246  0028E0  0100               	movlb	0	; () banked
  6247  0028E2  816C               	bsf	___awdiv@quotient& (0+255),0,b
  6248  0028E4                     l2737:
  6249                           
  6250                           ; BSR set to: 0
  6251  0028E4  0100               	movlb	0	; () banked
  6252  0028E6  90D8               	bcf	status,0,c
  6253  0028E8  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6254  0028EA  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  0028EC  0100               	movlb	0	; () banked
  6258  0028EE  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  6259  0028F0  D7E1               	goto	l2729
  6260  0028F2                     l2741:
  6261                           
  6262                           ; BSR set to: 0
  6263  0028F2  0100               	movlb	0	; () banked
  6264  0028F4  516B               	movf	___awdiv@sign& (0+255),w,b
  6265  0028F6  0100               	movlb	0	; () banked
  6266  0028F8  B4D8               	btfsc	status,2,c
  6267  0028FA  D005               	goto	l2745
  6268                           
  6269                           ; BSR set to: 0
  6270  0028FC  0100               	movlb	0	; () banked
  6271  0028FE  6D6C               	negf	___awdiv@quotient& (0+255),b
  6272  002900  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6273  002902  B0D8               	btfsc	status,0,c
  6274  002904  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6275  002906                     l2745:
  6276                           
  6277                           ; BSR set to: 0
  6278  002906  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  6279  00290A  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  6280  00290E  0012               	return	
  6281  002910                     __end_of___awdiv:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon2	equ	0xFF1
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           postdec1	equ	0xFE5
  6293                           plusw1	equ	0xFE3
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           plusw2	equ	0xFDB
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function __tdiv_to_l_ *****************
  6304 ;; Defined at:
  6305 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  f1              3    0[BANK0 ] float 
  6308 ;;  f2              3    3[BANK0 ] float 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  quot            4    9[BANK0 ] unsigned long 
  6311 ;;  exp1            1   14[BANK0 ] unsigned char 
  6312 ;;  cntr            1   13[BANK0 ] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  4    0[BANK0 ] unsigned long 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6322 ;;      Params:         0       6       0       0       0       0       0       0       0
  6323 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6324 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6325 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6326 ;;Total ram usage:       15 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    3
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_sprintf
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text10
  6337  001C7A                     __ptext10:
  6338                           	opt stack 0
  6339  001C7A                     __tdiv_to_l_:
  6340                           	opt stack 26
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;incstack = 0
  6344  001C7A  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6345  001C7E  0100               	movlb	0	; () banked
  6346  001C80  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6347  001C82  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6348  001C84  0100               	movlb	0	; () banked
  6349  001C86  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6350  001C88  0100               	movlb	0	; () banked
  6351  001C8A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6352  001C8C  E301               	bnc	u2901
  6353  001C8E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6354  001C90                     u2901:
  6355  001C90  0100               	movlb	0	; () banked
  6356  001C92  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  6357  001C94  0100               	movlb	0	; () banked
  6358  001C96  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6359  001C98  0100               	movlb	0	; () banked
  6360  001C9A  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6361  001C9C  A4D8               	btfss	status,2,c
  6362  001C9E  D00A               	goto	l2903
  6363                           
  6364                           ; BSR set to: 0
  6365  001CA0  0E00               	movlw	0
  6366  001CA2  0100               	movlb	0	; () banked
  6367  001CA4  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6368  001CA6  0E00               	movlw	0
  6369  001CA8  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6370  001CAA  0E00               	movlw	0
  6371  001CAC  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6372  001CAE  0E00               	movlw	0
  6373  001CB0  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6374                           
  6375                           ; BSR set to: 0
  6376  001CB2  0012               	return	
  6377  001CB4                     l2903:
  6378                           
  6379                           ; BSR set to: 0
  6380  001CB4  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6381  001CB8  0100               	movlb	0	; () banked
  6382  001CBA  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6383  001CBC  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6384  001CBE  0100               	movlb	0	; () banked
  6385  001CC0  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6386  001CC2  0100               	movlb	0	; () banked
  6387  001CC4  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6388  001CC6  E301               	bnc	u2921
  6389  001CC8  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6390  001CCA                     u2921:
  6391  001CCA  0100               	movlb	0	; () banked
  6392  001CCC  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  6393  001CCE  0100               	movlb	0	; () banked
  6394  001CD0  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6395  001CD2  0100               	movlb	0	; () banked
  6396  001CD4  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6397  001CD6  A4D8               	btfss	status,2,c
  6398  001CD8  D00A               	goto	l2909
  6399                           
  6400                           ; BSR set to: 0
  6401  001CDA  0E00               	movlw	0
  6402  001CDC  0100               	movlb	0	; () banked
  6403  001CDE  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6404  001CE0  0E00               	movlw	0
  6405  001CE2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6406  001CE4  0E00               	movlw	0
  6407  001CE6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6408  001CE8  0E00               	movlw	0
  6409  001CEA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6410                           
  6411                           ; BSR set to: 0
  6412  001CEC  0012               	return	
  6413  001CEE                     l2909:
  6414                           
  6415                           ; BSR set to: 0
  6416  001CEE  0100               	movlb	0	; () banked
  6417  001CF0  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6418                           
  6419                           ; BSR set to: 0
  6420  001CF2  0EFF               	movlw	255
  6421  001CF4  0100               	movlb	0	; () banked
  6422  001CF6  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6423  001CF8  0EFF               	movlw	255
  6424  001CFA  0100               	movlb	0	; () banked
  6425  001CFC  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6426  001CFE  0E00               	movlw	0
  6427  001D00  0100               	movlb	0	; () banked
  6428  001D02  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6429  001D04  0100               	movlb	0	; () banked
  6430  001D06  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6431                           
  6432                           ; BSR set to: 0
  6433  001D08  0EFF               	movlw	255
  6434  001D0A  0100               	movlb	0	; () banked
  6435  001D0C  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6436  001D0E  0EFF               	movlw	255
  6437  001D10  0100               	movlb	0	; () banked
  6438  001D12  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6439  001D14  0E00               	movlw	0
  6440  001D16  0100               	movlb	0	; () banked
  6441  001D18  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6442                           
  6443                           ; BSR set to: 0
  6444  001D1A  0E00               	movlw	0
  6445  001D1C  0100               	movlb	0	; () banked
  6446  001D1E  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  6447  001D20  0E00               	movlw	0
  6448  001D22  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6449  001D24  0E00               	movlw	0
  6450  001D26  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6451  001D28  0E00               	movlw	0
  6452  001D2A  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6453                           
  6454                           ; BSR set to: 0
  6455  001D2C  0E7F               	movlw	127
  6456  001D2E  0100               	movlb	0	; () banked
  6457  001D30  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6458                           
  6459                           ; BSR set to: 0
  6460  001D32  0100               	movlb	0	; () banked
  6461  001D34  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6462  001D36  0F98               	addlw	152
  6463  001D38  0100               	movlb	0	; () banked
  6464  001D3A  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6465                           
  6466                           ; BSR set to: 0
  6467  001D3C  0E18               	movlw	24
  6468  001D3E  0100               	movlb	0	; () banked
  6469  001D40  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6470  001D42                     l639:
  6471                           
  6472                           ; BSR set to: 0
  6473  001D42  0100               	movlb	0	; () banked
  6474  001D44  90D8               	bcf	status,0,c
  6475  001D46  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6476  001D48  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6477  001D4A  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6478  001D4C  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6479                           
  6480                           ; BSR set to: 0
  6481  001D4E  0100               	movlb	0	; () banked
  6482  001D50  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6483  001D52  0100               	movlb	0	; () banked
  6484  001D54  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6485  001D56  0100               	movlb	0	; () banked
  6486  001D58  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6487  001D5A  0100               	movlb	0	; () banked
  6488  001D5C  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6489  001D5E  0100               	movlb	0	; () banked
  6490  001D60  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6491  001D62  0100               	movlb	0	; () banked
  6492  001D64  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6493  001D66  A0D8               	btfss	status,0,c
  6494  001D68  D00E               	goto	l640
  6495                           
  6496                           ; BSR set to: 0
  6497  001D6A  0100               	movlb	0	; () banked
  6498  001D6C  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6499  001D6E  0100               	movlb	0	; () banked
  6500  001D70  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6501  001D72  0100               	movlb	0	; () banked
  6502  001D74  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6503  001D76  0100               	movlb	0	; () banked
  6504  001D78  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6505  001D7A  0100               	movlb	0	; () banked
  6506  001D7C  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6507  001D7E  0100               	movlb	0	; () banked
  6508  001D80  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6509                           
  6510                           ; BSR set to: 0
  6511  001D82  0100               	movlb	0	; () banked
  6512  001D84  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6513  001D86                     l640:
  6514                           
  6515                           ; BSR set to: 0
  6516  001D86  0100               	movlb	0	; () banked
  6517  001D88  90D8               	bcf	status,0,c
  6518  001D8A  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6519  001D8C  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6520  001D8E  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6521                           
  6522                           ; BSR set to: 0
  6523  001D90  0100               	movlb	0	; () banked
  6524  001D92  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6525  001D94  D7D6               	goto	l639
  6526                           
  6527                           ; BSR set to: 0
  6528                           
  6529                           ; BSR set to: 0
  6530  001D96  0100               	movlb	0	; () banked
  6531  001D98  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6532  001D9A  D01A               	goto	l2943
  6533                           
  6534                           ; BSR set to: 0
  6535  001D9C  0100               	movlb	0	; () banked
  6536  001D9E  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6537  001DA0  0A80               	xorlw	128
  6538  001DA2  0F97               	addlw	151
  6539  001DA4  B0D8               	btfsc	status,0,c
  6540  001DA6  D00A               	goto	l2939
  6541                           
  6542                           ; BSR set to: 0
  6543  001DA8  0E00               	movlw	0
  6544  001DAA  0100               	movlb	0	; () banked
  6545  001DAC  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6546  001DAE  0E00               	movlw	0
  6547  001DB0  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6548  001DB2  0E00               	movlw	0
  6549  001DB4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6550  001DB6  0E00               	movlw	0
  6551  001DB8  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6552                           
  6553                           ; BSR set to: 0
  6554  001DBA  0012               	return	
  6555  001DBC                     l2939:
  6556                           
  6557                           ; BSR set to: 0
  6558  001DBC  0100               	movlb	0	; () banked
  6559  001DBE  90D8               	bcf	status,0,c
  6560  001DC0  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6561  001DC2  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6562  001DC4  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6563  001DC6  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6564                           
  6565                           ; BSR set to: 0
  6566  001DC8  0100               	movlb	0	; () banked
  6567  001DCA  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6568  001DCC  D7F7               	goto	l2939
  6569                           
  6570                           ; BSR set to: 0
  6571  001DCE  D01B               	goto	l646
  6572  001DD0                     l2943:
  6573                           
  6574                           ; BSR set to: 0
  6575  001DD0  0E17               	movlw	23
  6576  001DD2  0100               	movlb	0	; () banked
  6577  001DD4  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6578  001DD6  D012               	goto	l2951
  6579                           
  6580                           ; BSR set to: 0
  6581  001DD8  0E00               	movlw	0
  6582  001DDA  0100               	movlb	0	; () banked
  6583  001DDC  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6584  001DDE  0E00               	movlw	0
  6585  001DE0  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6586  001DE2  0E00               	movlw	0
  6587  001DE4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6588  001DE6  0E00               	movlw	0
  6589  001DE8  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6590                           
  6591                           ; BSR set to: 0
  6592  001DEA  0012               	return	
  6593  001DEC                     l2949:
  6594                           
  6595                           ; BSR set to: 0
  6596  001DEC  0100               	movlb	0	; () banked
  6597  001DEE  90D8               	bcf	status,0,c
  6598  001DF0  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6599  001DF2  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6600  001DF4  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6601  001DF6  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6602  001DF8  0100               	movlb	0	; () banked
  6603  001DFA  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6604  001DFC                     l2951:
  6605                           
  6606                           ; BSR set to: 0
  6607  001DFC  0100               	movlb	0	; () banked
  6608  001DFE  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6609  001E00  0100               	movlb	0	; () banked
  6610  001E02  A4D8               	btfss	status,2,c
  6611  001E04  D7F3               	goto	l2949
  6612  001E06                     l646:
  6613                           
  6614                           ; BSR set to: 0
  6615  001E06  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6616  001E0A  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6617  001E0E  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6618  001E12  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6619                           
  6620                           ; BSR set to: 0
  6621  001E16  0012               	return		;funcret
  6622  001E18                     __end_of__tdiv_to_l_:
  6623                           	opt stack 0
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon2	equ	0xFF1
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           plusw1	equ	0xFE3
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           plusw2	equ	0xFDB
  6640                           fsr2h	equ	0xFDA
  6641                           fsr2l	equ	0xFD9
  6642                           status	equ	0xFD8
  6643                           
  6644 ;; *************** function __div_to_l_ *****************
  6645 ;; Defined at:
  6646 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  f1              3    0[BANK0 ] unsigned long 
  6649 ;;  f2              3    3[BANK0 ] unsigned long 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  quot            4    6[BANK0 ] unsigned long 
  6652 ;;  exp1            1   11[BANK0 ] unsigned char 
  6653 ;;  cntr            1   10[BANK0 ] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  4    0[BANK0 ] unsigned long 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6663 ;;      Params:         0       6       0       0       0       0       0       0       0
  6664 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6666 ;;      Totals:         0      12       0       0       0       0       0       0       0
  6667 ;;Total ram usage:       12 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    3
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_sprintf
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text11
  6678  001E18                     __ptext11:
  6679                           	opt stack 0
  6680  001E18                     __div_to_l_:
  6681                           	opt stack 26
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;incstack = 0
  6685  001E18  0100               	movlb	0	; () banked
  6686  001E1A  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6687  001E1C  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6688  001E1E  0100               	movlb	0	; () banked
  6689  001E20  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  6690  001E22  0100               	movlb	0	; () banked
  6691  001E24  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6692  001E26  A4D8               	btfss	status,2,c
  6693  001E28  D00A               	goto	l2959
  6694                           
  6695                           ; BSR set to: 0
  6696  001E2A  0E00               	movlw	0
  6697  001E2C  0100               	movlb	0	; () banked
  6698  001E2E  6F60               	movwf	?__div_to_l_& (0+255),b
  6699  001E30  0E00               	movlw	0
  6700  001E32  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6701  001E34  0E00               	movlw	0
  6702  001E36  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6703  001E38  0E00               	movlw	0
  6704  001E3A  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6705                           
  6706                           ; BSR set to: 0
  6707  001E3C  0012               	return	
  6708  001E3E                     l2959:
  6709                           
  6710                           ; BSR set to: 0
  6711  001E3E  0100               	movlb	0	; () banked
  6712  001E40  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6713  001E42  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6714  001E44  0100               	movlb	0	; () banked
  6715  001E46  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6716  001E48  0100               	movlb	0	; () banked
  6717  001E4A  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6718  001E4C  A4D8               	btfss	status,2,c
  6719  001E4E  D00A               	goto	l2965
  6720                           
  6721                           ; BSR set to: 0
  6722  001E50  0E00               	movlw	0
  6723  001E52  0100               	movlb	0	; () banked
  6724  001E54  6F60               	movwf	?__div_to_l_& (0+255),b
  6725  001E56  0E00               	movlw	0
  6726  001E58  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6727  001E5A  0E00               	movlw	0
  6728  001E5C  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6729  001E5E  0E00               	movlw	0
  6730  001E60  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6731                           
  6732                           ; BSR set to: 0
  6733  001E62  0012               	return	
  6734  001E64                     l2965:
  6735                           
  6736                           ; BSR set to: 0
  6737  001E64  0100               	movlb	0	; () banked
  6738  001E66  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6739                           
  6740                           ; BSR set to: 0
  6741  001E68  0EFF               	movlw	255
  6742  001E6A  0100               	movlb	0	; () banked
  6743  001E6C  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  6744  001E6E  0EFF               	movlw	255
  6745  001E70  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6746  001E72  0EFF               	movlw	255
  6747  001E74  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6748  001E76  0E00               	movlw	0
  6749  001E78  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6750                           
  6751                           ; BSR set to: 0
  6752  001E7A  0100               	movlb	0	; () banked
  6753  001E7C  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6754  001E7E  0EFF               	movlw	255
  6755  001E80  0100               	movlb	0	; () banked
  6756  001E82  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  6757  001E84  0EFF               	movlw	255
  6758  001E86  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6759  001E88  0EFF               	movlw	255
  6760  001E8A  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6761  001E8C  0E00               	movlw	0
  6762  001E8E  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6763                           
  6764                           ; BSR set to: 0
  6765  001E90  0E00               	movlw	0
  6766  001E92  0100               	movlb	0	; () banked
  6767  001E94  6F66               	movwf	__div_to_l_@quot& (0+255),b
  6768  001E96  0E00               	movlw	0
  6769  001E98  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6770  001E9A  0E00               	movlw	0
  6771  001E9C  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6772  001E9E  0E00               	movlw	0
  6773  001EA0  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6774                           
  6775                           ; BSR set to: 0
  6776  001EA2  0E7F               	movlw	127
  6777  001EA4  0100               	movlb	0	; () banked
  6778  001EA6  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6779                           
  6780                           ; BSR set to: 0
  6781  001EA8  0100               	movlb	0	; () banked
  6782  001EAA  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6783  001EAC  0FA0               	addlw	160
  6784  001EAE  0100               	movlb	0	; () banked
  6785  001EB0  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6786                           
  6787                           ; BSR set to: 0
  6788  001EB2  0E20               	movlw	32
  6789  001EB4  0100               	movlb	0	; () banked
  6790  001EB6  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6791  001EB8                     l2979:
  6792                           
  6793                           ; BSR set to: 0
  6794  001EB8  0100               	movlb	0	; () banked
  6795  001EBA  90D8               	bcf	status,0,c
  6796  001EBC  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6797  001EBE  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6798  001EC0  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6799  001EC2  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6800                           
  6801                           ; BSR set to: 0
  6802  001EC4  0100               	movlb	0	; () banked
  6803  001EC6  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6804  001EC8  0100               	movlb	0	; () banked
  6805  001ECA  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  6806  001ECC  0100               	movlb	0	; () banked
  6807  001ECE  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6808  001ED0  0100               	movlb	0	; () banked
  6809  001ED2  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6810  001ED4  0100               	movlb	0	; () banked
  6811  001ED6  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6812  001ED8  0100               	movlb	0	; () banked
  6813  001EDA  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6814  001EDC  0100               	movlb	0	; () banked
  6815  001EDE  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6816  001EE0  0100               	movlb	0	; () banked
  6817  001EE2  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6818  001EE4  A0D8               	btfss	status,0,c
  6819  001EE6  D012               	goto	l2987
  6820                           
  6821                           ; BSR set to: 0
  6822  001EE8  0100               	movlb	0	; () banked
  6823  001EEA  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6824  001EEC  0100               	movlb	0	; () banked
  6825  001EEE  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  6826  001EF0  0100               	movlb	0	; () banked
  6827  001EF2  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6828  001EF4  0100               	movlb	0	; () banked
  6829  001EF6  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6830  001EF8  0100               	movlb	0	; () banked
  6831  001EFA  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6832  001EFC  0100               	movlb	0	; () banked
  6833  001EFE  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6834  001F00  0100               	movlb	0	; () banked
  6835  001F02  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6836  001F04  0100               	movlb	0	; () banked
  6837  001F06  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6838                           
  6839                           ; BSR set to: 0
  6840  001F08  0100               	movlb	0	; () banked
  6841  001F0A  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  6842  001F0C                     l2987:
  6843                           
  6844                           ; BSR set to: 0
  6845  001F0C  0100               	movlb	0	; () banked
  6846  001F0E  90D8               	bcf	status,0,c
  6847  001F10  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  6848  001F12  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6849  001F14  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6850  001F16  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6851                           
  6852                           ; BSR set to: 0
  6853  001F18  0100               	movlb	0	; () banked
  6854  001F1A  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6855  001F1C  D7CD               	goto	l2979
  6856                           
  6857                           ; BSR set to: 0
  6858                           
  6859                           ; BSR set to: 0
  6860  001F1E  0100               	movlb	0	; () banked
  6861  001F20  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  6862  001F22  D01A               	goto	l3003
  6863                           
  6864                           ; BSR set to: 0
  6865  001F24  0100               	movlb	0	; () banked
  6866  001F26  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6867  001F28  0A80               	xorlw	128
  6868  001F2A  0F9F               	addlw	159
  6869  001F2C  B0D8               	btfsc	status,0,c
  6870  001F2E  D00A               	goto	l2999
  6871                           
  6872                           ; BSR set to: 0
  6873  001F30  0E00               	movlw	0
  6874  001F32  0100               	movlb	0	; () banked
  6875  001F34  6F60               	movwf	?__div_to_l_& (0+255),b
  6876  001F36  0E00               	movlw	0
  6877  001F38  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6878  001F3A  0E00               	movlw	0
  6879  001F3C  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6880  001F3E  0E00               	movlw	0
  6881  001F40  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6882                           
  6883                           ; BSR set to: 0
  6884  001F42  0012               	return	
  6885  001F44                     l2999:
  6886                           
  6887                           ; BSR set to: 0
  6888  001F44  0100               	movlb	0	; () banked
  6889  001F46  90D8               	bcf	status,0,c
  6890  001F48  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6891  001F4A  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6892  001F4C  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6893  001F4E  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  6894                           
  6895                           ; BSR set to: 0
  6896  001F50  0100               	movlb	0	; () banked
  6897  001F52  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6898  001F54  D7F7               	goto	l2999
  6899                           
  6900                           ; BSR set to: 0
  6901  001F56  D01B               	goto	l542
  6902  001F58                     l3003:
  6903                           
  6904                           ; BSR set to: 0
  6905  001F58  0E1F               	movlw	31
  6906  001F5A  0100               	movlb	0	; () banked
  6907  001F5C  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6908  001F5E  D012               	goto	l3011
  6909                           
  6910                           ; BSR set to: 0
  6911  001F60  0E00               	movlw	0
  6912  001F62  0100               	movlb	0	; () banked
  6913  001F64  6F60               	movwf	?__div_to_l_& (0+255),b
  6914  001F66  0E00               	movlw	0
  6915  001F68  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6916  001F6A  0E00               	movlw	0
  6917  001F6C  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6918  001F6E  0E00               	movlw	0
  6919  001F70  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6920                           
  6921                           ; BSR set to: 0
  6922  001F72  0012               	return	
  6923  001F74                     l3009:
  6924                           
  6925                           ; BSR set to: 0
  6926  001F74  0100               	movlb	0	; () banked
  6927  001F76  90D8               	bcf	status,0,c
  6928  001F78  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6929  001F7A  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6930  001F7C  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6931  001F7E  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6932  001F80  0100               	movlb	0	; () banked
  6933  001F82  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  6934  001F84                     l3011:
  6935                           
  6936                           ; BSR set to: 0
  6937  001F84  0100               	movlb	0	; () banked
  6938  001F86  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6939  001F88  0100               	movlb	0	; () banked
  6940  001F8A  A4D8               	btfss	status,2,c
  6941  001F8C  D7F3               	goto	l3009
  6942  001F8E                     l542:
  6943                           
  6944                           ; BSR set to: 0
  6945  001F8E  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  6946  001F92  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6947  001F96  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6948  001F9A  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6949                           
  6950                           ; BSR set to: 0
  6951  001F9E  0012               	return		;funcret
  6952  001FA0                     __end_of__div_to_l_:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon2	equ	0xFF1
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           postdec1	equ	0xFE5
  6964                           plusw1	equ	0xFE3
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           plusw2	equ	0xFDB
  6970                           fsr2h	equ	0xFDA
  6971                           fsr2l	equ	0xFD9
  6972                           status	equ	0xFD8
  6973                           
  6974 ;; *************** function ___lltoft *****************
  6975 ;; Defined at:
  6976 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  c               4    8[BANK0 ] unsigned long 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  exp             1   16[BANK0 ] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  3    8[BANK0 ] float 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6990 ;;      Params:         0       4       0       0       0       0       0       0       0
  6991 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6992 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6993 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6994 ;;Total ram usage:        9 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    4
  6997 ;; This function calls:
  6998 ;;		___ftpack
  6999 ;; This function is called by:
  7000 ;;		_sprintf
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text12
  7005  002BB6                     __ptext12:
  7006                           	opt stack 0
  7007  002BB6                     ___lltoft:
  7008                           	opt stack 25
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;incstack = 0
  7012  002BB6  0E8E               	movlw	142
  7013  002BB8  0100               	movlb	0	; () banked
  7014  002BBA  6F70               	movwf	___lltoft@exp& (0+255),b
  7015  002BBC  D008               	goto	l3131
  7016  002BBE                     l3129:
  7017                           
  7018                           ; BSR set to: 0
  7019  002BBE  0100               	movlb	0	; () banked
  7020  002BC0  90D8               	bcf	status,0,c
  7021  002BC2  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7022  002BC4  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7023  002BC6  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7024  002BC8  3368               	rrcf	___lltoft@c& (0+255),f,b
  7025  002BCA  0100               	movlb	0	; () banked
  7026  002BCC  2B70               	incf	___lltoft@exp& (0+255),f,b
  7027  002BCE                     l3131:
  7028                           
  7029                           ; BSR set to: 0
  7030  002BCE  0E00               	movlw	0
  7031  002BD0  0100               	movlb	0	; () banked
  7032  002BD2  1568               	andwf	___lltoft@c& (0+255),w,b
  7033  002BD4  0100               	movlb	0	; () banked
  7034  002BD6  6F6C               	movwf	??___lltoft& (0+255),b
  7035  002BD8  0E00               	movlw	0
  7036  002BDA  0100               	movlb	0	; () banked
  7037  002BDC  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  7038  002BDE  0100               	movlb	0	; () banked
  7039  002BE0  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  7040  002BE2  0E00               	movlw	0
  7041  002BE4  0100               	movlb	0	; () banked
  7042  002BE6  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7043  002BE8  0100               	movlb	0	; () banked
  7044  002BEA  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  7045  002BEC  0EFF               	movlw	255
  7046  002BEE  0100               	movlb	0	; () banked
  7047  002BF0  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7048  002BF2  0100               	movlb	0	; () banked
  7049  002BF4  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  7050  002BF6  0100               	movlb	0	; () banked
  7051  002BF8  516C               	movf	??___lltoft& (0+255),w,b
  7052  002BFA  0100               	movlb	0	; () banked
  7053  002BFC  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7054  002BFE  0100               	movlb	0	; () banked
  7055  002C00  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7056  002C02  0100               	movlb	0	; () banked
  7057  002C04  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7058  002C06  A4D8               	btfss	status,2,c
  7059  002C08  D7DA               	goto	l3129
  7060                           
  7061                           ; BSR set to: 0
  7062                           
  7063                           ; BSR set to: 0
  7064  002C0A  C068  F060         	movff	___lltoft@c,___ftpack@arg
  7065  002C0E  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  7066  002C12  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  7067  002C16  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  7068  002C1A  0E00               	movlw	0
  7069  002C1C  0100               	movlb	0	; () banked
  7070  002C1E  6F64               	movwf	___ftpack@sign& (0+255),b
  7071  002C20  EC52  F012         	call	___ftpack	;wreg free
  7072  002C24  C060  F068         	movff	?___ftpack,?___lltoft
  7073  002C28  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  7074  002C2C  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  7075  002C30  0012               	return	
  7076  002C32                     __end_of___lltoft:
  7077                           	opt stack 0
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon2	equ	0xFF1
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           postdec1	equ	0xFE5
  7088                           plusw1	equ	0xFE3
  7089                           fsr1l	equ	0xFE1
  7090                           indf2	equ	0xFDF
  7091                           postinc2	equ	0xFDE
  7092                           postdec2	equ	0xFDD
  7093                           plusw2	equ	0xFDB
  7094                           fsr2h	equ	0xFDA
  7095                           fsr2l	equ	0xFD9
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function ___llmod *****************
  7099 ;; Defined at:
  7100 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  dividend        4    0[BANK0 ] unsigned long 
  7103 ;;  divisor         4    4[BANK0 ] unsigned long 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  counter         1    8[BANK0 ] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  4    0[BANK0 ] unsigned long 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7115 ;;      Params:         0       8       0       0       0       0       0       0       0
  7116 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7118 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7119 ;;Total ram usage:        9 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    3
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_sprintf
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text13
  7130  002B1C                     __ptext13:
  7131                           	opt stack 0
  7132  002B1C                     ___llmod:
  7133                           	opt stack 26
  7134                           
  7135                           ;incstack = 0
  7136  002B1C  0100               	movlb	0	; () banked
  7137  002B1E  5164               	movf	___llmod@divisor& (0+255),w,b
  7138  002B20  0100               	movlb	0	; () banked
  7139  002B22  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7140  002B24  0100               	movlb	0	; () banked
  7141  002B26  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7142  002B28  0100               	movlb	0	; () banked
  7143  002B2A  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7144  002B2C  B4D8               	btfsc	status,2,c
  7145  002B2E  D03A               	goto	l731
  7146                           
  7147                           ; BSR set to: 0
  7148  002B30  0E01               	movlw	1
  7149  002B32  0100               	movlb	0	; () banked
  7150  002B34  6F68               	movwf	___llmod@counter& (0+255),b
  7151  002B36  D008               	goto	l3117
  7152  002B38                     l3115:
  7153                           
  7154                           ; BSR set to: 0
  7155  002B38  0100               	movlb	0	; () banked
  7156  002B3A  90D8               	bcf	status,0,c
  7157  002B3C  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7158  002B3E  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7159  002B40  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7160  002B42  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7161  002B44  0100               	movlb	0	; () banked
  7162  002B46  2B68               	incf	___llmod@counter& (0+255),f,b
  7163  002B48                     l3117:
  7164                           
  7165                           ; BSR set to: 0
  7166  002B48  0100               	movlb	0	; () banked
  7167  002B4A  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7168  002B4C  D7F5               	goto	l3115
  7169  002B4E                     l3119:
  7170                           
  7171                           ; BSR set to: 0
  7172  002B4E  0100               	movlb	0	; () banked
  7173  002B50  5164               	movf	___llmod@divisor& (0+255),w,b
  7174  002B52  0100               	movlb	0	; () banked
  7175  002B54  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7176  002B56  0100               	movlb	0	; () banked
  7177  002B58  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7178  002B5A  0100               	movlb	0	; () banked
  7179  002B5C  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7180  002B5E  0100               	movlb	0	; () banked
  7181  002B60  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7182  002B62  0100               	movlb	0	; () banked
  7183  002B64  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7184  002B66  0100               	movlb	0	; () banked
  7185  002B68  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7186  002B6A  0100               	movlb	0	; () banked
  7187  002B6C  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7188  002B6E  A0D8               	btfss	status,0,c
  7189  002B70  D010               	goto	l3123
  7190                           
  7191                           ; BSR set to: 0
  7192  002B72  0100               	movlb	0	; () banked
  7193  002B74  5164               	movf	___llmod@divisor& (0+255),w,b
  7194  002B76  0100               	movlb	0	; () banked
  7195  002B78  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7196  002B7A  0100               	movlb	0	; () banked
  7197  002B7C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7198  002B7E  0100               	movlb	0	; () banked
  7199  002B80  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7200  002B82  0100               	movlb	0	; () banked
  7201  002B84  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7202  002B86  0100               	movlb	0	; () banked
  7203  002B88  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7204  002B8A  0100               	movlb	0	; () banked
  7205  002B8C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7206  002B8E  0100               	movlb	0	; () banked
  7207  002B90  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7208  002B92                     l3123:
  7209                           
  7210                           ; BSR set to: 0
  7211  002B92  0100               	movlb	0	; () banked
  7212  002B94  90D8               	bcf	status,0,c
  7213  002B96  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7214  002B98  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7215  002B9A  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7216  002B9C  3364               	rrcf	___llmod@divisor& (0+255),f,b
  7217                           
  7218                           ; BSR set to: 0
  7219  002B9E  0100               	movlb	0	; () banked
  7220  002BA0  2F68               	decfsz	___llmod@counter& (0+255),f,b
  7221  002BA2  D7D5               	goto	l3119
  7222  002BA4                     l731:
  7223                           
  7224                           ; BSR set to: 0
  7225  002BA4  C060  F060         	movff	___llmod@dividend,?___llmod
  7226  002BA8  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  7227  002BAC  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  7228  002BB0  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  7229                           
  7230                           ; BSR set to: 0
  7231  002BB4  0012               	return		;funcret
  7232  002BB6                     __end_of___llmod:
  7233                           	opt stack 0
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon2	equ	0xFF1
  7241                           postinc0	equ	0xFEE
  7242                           wreg	equ	0xFE8
  7243                           postdec1	equ	0xFE5
  7244                           plusw1	equ	0xFE3
  7245                           fsr1l	equ	0xFE1
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           plusw2	equ	0xFDB
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function ___lldiv *****************
  7255 ;; Defined at:
  7256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  dividend        4    0[BANK0 ] unsigned long 
  7259 ;;  divisor         4    4[BANK0 ] unsigned long 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  quotient        4    8[BANK0 ] unsigned long 
  7262 ;;  counter         1   12[BANK0 ] unsigned char 
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  4    0[BANK0 ] unsigned long 
  7265 ;; Registers used:
  7266 ;;		wreg, status,2, status,0
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7272 ;;      Params:         0       8       0       0       0       0       0       0       0
  7273 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7275 ;;      Totals:         0      13       0       0       0       0       0       0       0
  7276 ;;Total ram usage:       13 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    3
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_sprintf
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286                           	psect	text14
  7287  002910                     __ptext14:
  7288                           	opt stack 0
  7289  002910                     ___lldiv:
  7290                           	opt stack 26
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;incstack = 0
  7294  002910  0E00               	movlw	0
  7295  002912  0100               	movlb	0	; () banked
  7296  002914  6F68               	movwf	___lldiv@quotient& (0+255),b
  7297  002916  0E00               	movlw	0
  7298  002918  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  7299  00291A  0E00               	movlw	0
  7300  00291C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7301  00291E  0E00               	movlw	0
  7302  002920  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7303                           
  7304                           ; BSR set to: 0
  7305  002922  0100               	movlb	0	; () banked
  7306  002924  5164               	movf	___lldiv@divisor& (0+255),w,b
  7307  002926  0100               	movlb	0	; () banked
  7308  002928  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7309  00292A  0100               	movlb	0	; () banked
  7310  00292C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7311  00292E  0100               	movlb	0	; () banked
  7312  002930  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7313  002932  B4D8               	btfsc	status,2,c
  7314  002934  D042               	goto	l721
  7315                           
  7316                           ; BSR set to: 0
  7317  002936  0E01               	movlw	1
  7318  002938  0100               	movlb	0	; () banked
  7319  00293A  6F6C               	movwf	___lldiv@counter& (0+255),b
  7320  00293C  D008               	goto	l3097
  7321  00293E                     l3095:
  7322                           
  7323                           ; BSR set to: 0
  7324  00293E  0100               	movlb	0	; () banked
  7325  002940  90D8               	bcf	status,0,c
  7326  002942  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  7327  002944  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7328  002946  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7329  002948  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7330  00294A  0100               	movlb	0	; () banked
  7331  00294C  2B6C               	incf	___lldiv@counter& (0+255),f,b
  7332  00294E                     l3097:
  7333                           
  7334                           ; BSR set to: 0
  7335  00294E  0100               	movlb	0	; () banked
  7336  002950  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7337  002952  D7F5               	goto	l3095
  7338  002954                     l3099:
  7339                           
  7340                           ; BSR set to: 0
  7341  002954  0100               	movlb	0	; () banked
  7342  002956  90D8               	bcf	status,0,c
  7343  002958  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  7344  00295A  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7345  00295C  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7346  00295E  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7347                           
  7348                           ; BSR set to: 0
  7349  002960  0100               	movlb	0	; () banked
  7350  002962  5164               	movf	___lldiv@divisor& (0+255),w,b
  7351  002964  0100               	movlb	0	; () banked
  7352  002966  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  7353  002968  0100               	movlb	0	; () banked
  7354  00296A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7355  00296C  0100               	movlb	0	; () banked
  7356  00296E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7357  002970  0100               	movlb	0	; () banked
  7358  002972  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7359  002974  0100               	movlb	0	; () banked
  7360  002976  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7361  002978  0100               	movlb	0	; () banked
  7362  00297A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7363  00297C  0100               	movlb	0	; () banked
  7364  00297E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7365  002980  A0D8               	btfss	status,0,c
  7366  002982  D012               	goto	l3107
  7367                           
  7368                           ; BSR set to: 0
  7369  002984  0100               	movlb	0	; () banked
  7370  002986  5164               	movf	___lldiv@divisor& (0+255),w,b
  7371  002988  0100               	movlb	0	; () banked
  7372  00298A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  7373  00298C  0100               	movlb	0	; () banked
  7374  00298E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7375  002990  0100               	movlb	0	; () banked
  7376  002992  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7377  002994  0100               	movlb	0	; () banked
  7378  002996  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7379  002998  0100               	movlb	0	; () banked
  7380  00299A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7381  00299C  0100               	movlb	0	; () banked
  7382  00299E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7383  0029A0  0100               	movlb	0	; () banked
  7384  0029A2  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7385                           
  7386                           ; BSR set to: 0
  7387  0029A4  0100               	movlb	0	; () banked
  7388  0029A6  8168               	bsf	___lldiv@quotient& (0+255),0,b
  7389  0029A8                     l3107:
  7390                           
  7391                           ; BSR set to: 0
  7392  0029A8  0100               	movlb	0	; () banked
  7393  0029AA  90D8               	bcf	status,0,c
  7394  0029AC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7395  0029AE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7396  0029B0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7397  0029B2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  7398                           
  7399                           ; BSR set to: 0
  7400  0029B4  0100               	movlb	0	; () banked
  7401  0029B6  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  7402  0029B8  D7CD               	goto	l3099
  7403  0029BA                     l721:
  7404                           
  7405                           ; BSR set to: 0
  7406  0029BA  C068  F060         	movff	___lldiv@quotient,?___lldiv
  7407  0029BE  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  7408  0029C2  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  7409  0029C6  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  7410                           
  7411                           ; BSR set to: 0
  7412  0029CA  0012               	return		;funcret
  7413  0029CC                     __end_of___lldiv:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon2	equ	0xFF1
  7422                           postinc0	equ	0xFEE
  7423                           wreg	equ	0xFE8
  7424                           postdec1	equ	0xFE5
  7425                           plusw1	equ	0xFE3
  7426                           fsr1l	equ	0xFE1
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           plusw2	equ	0xFDB
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function ___fttol *****************
  7436 ;; Defined at:
  7437 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  f1              3   42[BANK0 ] float 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  lval            4   52[BANK0 ] unsigned long 
  7442 ;;  exp1            1   56[BANK0 ] unsigned char 
  7443 ;;  sign1           1   51[BANK0 ] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  4   42[BANK0 ] long 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7453 ;;      Params:         0       4       0       0       0       0       0       0       0
  7454 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7455 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7456 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7457 ;;Total ram usage:       15 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    3
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_sprintf
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	text15
  7468  0020FE                     __ptext15:
  7469                           	opt stack 0
  7470  0020FE                     ___fttol:
  7471                           	opt stack 26
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;incstack = 0
  7475  0020FE  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  7476  002102  0100               	movlb	0	; () banked
  7477  002104  6B8F               	clrf	(??___fttol+1)& (0+255),b
  7478  002106  6B90               	clrf	(??___fttol+2)& (0+255),b
  7479  002108  0100               	movlb	0	; () banked
  7480  00210A  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7481  00210C  0100               	movlb	0	; () banked
  7482  00210E  378E               	rlcf	??___fttol& (0+255),f,b
  7483  002110  E301               	bnc	u3111
  7484  002112  818F               	bsf	(??___fttol+1)& (0+255),0,b
  7485  002114                     u3111:
  7486  002114  0100               	movlb	0	; () banked
  7487  002116  518E               	movf	??___fttol& (0+255),w,b
  7488  002118  0100               	movlb	0	; () banked
  7489  00211A  6F98               	movwf	___fttol@exp1& (0+255),b
  7490  00211C  0100               	movlb	0	; () banked
  7491  00211E  5198               	movf	___fttol@exp1& (0+255),w,b
  7492  002120  A4D8               	btfss	status,2,c
  7493  002122  D00A               	goto	l3049
  7494                           
  7495                           ; BSR set to: 0
  7496  002124  0E00               	movlw	0
  7497  002126  0100               	movlb	0	; () banked
  7498  002128  6F8A               	movwf	?___fttol& (0+255),b
  7499  00212A  0E00               	movlw	0
  7500  00212C  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7501  00212E  0E00               	movlw	0
  7502  002130  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7503  002132  0E00               	movlw	0
  7504  002134  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7505                           
  7506                           ; BSR set to: 0
  7507  002136  0012               	return	
  7508  002138                     l3049:
  7509                           
  7510                           ; BSR set to: 0
  7511  002138  0E17               	movlw	23
  7512  00213A  0100               	movlb	0	; () banked
  7513  00213C  6F8E               	movwf	??___fttol& (0+255),b
  7514  00213E  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  7515  002142  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  7516  002146  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  7517  00214A  0100               	movlb	0	; () banked
  7518  00214C  298E               	incf	??___fttol& (0+255),w,b
  7519  00214E  0100               	movlb	0	; () banked
  7520  002150  6F92               	movwf	(??___fttol+4)& (0+255),b
  7521  002152  D005               	goto	u3130
  7522  002154                     u3135:
  7523  002154  0100               	movlb	0	; () banked
  7524  002156  90D8               	bcf	status,0,c
  7525  002158  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  7526  00215A  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  7527  00215C  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  7528  00215E                     u3130:
  7529  00215E  0100               	movlb	0	; () banked
  7530  002160  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  7531  002162  D7F8               	goto	u3135
  7532  002164  0100               	movlb	0	; () banked
  7533  002166  518F               	movf	(??___fttol+1)& (0+255),w,b
  7534  002168  0100               	movlb	0	; () banked
  7535  00216A  6F93               	movwf	___fttol@sign1& (0+255),b
  7536                           
  7537                           ; BSR set to: 0
  7538  00216C  0100               	movlb	0	; () banked
  7539  00216E  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7540                           
  7541                           ; BSR set to: 0
  7542  002170  0EFF               	movlw	255
  7543  002172  0100               	movlb	0	; () banked
  7544  002174  178A               	andwf	___fttol@f1& (0+255),f,b
  7545  002176  0EFF               	movlw	255
  7546  002178  0100               	movlb	0	; () banked
  7547  00217A  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7548  00217C  0E00               	movlw	0
  7549  00217E  0100               	movlb	0	; () banked
  7550  002180  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7551                           
  7552                           ; BSR set to: 0
  7553  002182  0100               	movlb	0	; () banked
  7554  002184  518A               	movf	___fttol@f1& (0+255),w,b
  7555  002186  0100               	movlb	0	; () banked
  7556  002188  6F94               	movwf	___fttol@lval& (0+255),b
  7557  00218A  0100               	movlb	0	; () banked
  7558  00218C  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  7559  00218E  0100               	movlb	0	; () banked
  7560  002190  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  7561  002192  0100               	movlb	0	; () banked
  7562  002194  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  7563  002196  0100               	movlb	0	; () banked
  7564  002198  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  7565  00219A  0100               	movlb	0	; () banked
  7566  00219C  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569  00219E  0E8E               	movlw	142
  7570  0021A0  0100               	movlb	0	; () banked
  7571  0021A2  5F98               	subwf	___fttol@exp1& (0+255),f,b
  7572                           
  7573                           ; BSR set to: 0
  7574  0021A4  0100               	movlb	0	; () banked
  7575  0021A6  AF98               	btfss	___fttol@exp1& (0+255),7,b
  7576  0021A8  D01A               	goto	l3071
  7577                           
  7578                           ; BSR set to: 0
  7579  0021AA  0100               	movlb	0	; () banked
  7580  0021AC  5198               	movf	___fttol@exp1& (0+255),w,b
  7581  0021AE  0A80               	xorlw	128
  7582  0021B0  0F8F               	addlw	143
  7583  0021B2  B0D8               	btfsc	status,0,c
  7584  0021B4  D00A               	goto	l3067
  7585                           
  7586                           ; BSR set to: 0
  7587  0021B6  0E00               	movlw	0
  7588  0021B8  0100               	movlb	0	; () banked
  7589  0021BA  6F8A               	movwf	?___fttol& (0+255),b
  7590  0021BC  0E00               	movlw	0
  7591  0021BE  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7592  0021C0  0E00               	movlw	0
  7593  0021C2  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7594  0021C4  0E00               	movlw	0
  7595  0021C6  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7596                           
  7597                           ; BSR set to: 0
  7598  0021C8  0012               	return	
  7599  0021CA                     l3067:
  7600                           
  7601                           ; BSR set to: 0
  7602  0021CA  0100               	movlb	0	; () banked
  7603  0021CC  90D8               	bcf	status,0,c
  7604  0021CE  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7605  0021D0  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7606  0021D2  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7607  0021D4  3394               	rrcf	___fttol@lval& (0+255),f,b
  7608                           
  7609                           ; BSR set to: 0
  7610  0021D6  0100               	movlb	0	; () banked
  7611  0021D8  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  7612  0021DA  D7F7               	goto	l3067
  7613                           
  7614                           ; BSR set to: 0
  7615  0021DC  D01B               	goto	l3081
  7616  0021DE                     l3071:
  7617                           
  7618                           ; BSR set to: 0
  7619  0021DE  0E17               	movlw	23
  7620  0021E0  0100               	movlb	0	; () banked
  7621  0021E2  6598               	cpfsgt	___fttol@exp1& (0+255),b
  7622  0021E4  D012               	goto	l3079
  7623                           
  7624                           ; BSR set to: 0
  7625  0021E6  0E00               	movlw	0
  7626  0021E8  0100               	movlb	0	; () banked
  7627  0021EA  6F8A               	movwf	?___fttol& (0+255),b
  7628  0021EC  0E00               	movlw	0
  7629  0021EE  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7630  0021F0  0E00               	movlw	0
  7631  0021F2  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7632  0021F4  0E00               	movlw	0
  7633  0021F6  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7634                           
  7635                           ; BSR set to: 0
  7636  0021F8  0012               	return	
  7637  0021FA                     l3077:
  7638                           
  7639                           ; BSR set to: 0
  7640  0021FA  0100               	movlb	0	; () banked
  7641  0021FC  90D8               	bcf	status,0,c
  7642  0021FE  3794               	rlcf	___fttol@lval& (0+255),f,b
  7643  002200  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7644  002202  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7645  002204  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7646  002206  0100               	movlb	0	; () banked
  7647  002208  0798               	decf	___fttol@exp1& (0+255),f,b
  7648  00220A                     l3079:
  7649                           
  7650                           ; BSR set to: 0
  7651  00220A  0100               	movlb	0	; () banked
  7652  00220C  5198               	movf	___fttol@exp1& (0+255),w,b
  7653  00220E  0100               	movlb	0	; () banked
  7654  002210  A4D8               	btfss	status,2,c
  7655  002212  D7F3               	goto	l3077
  7656  002214                     l3081:
  7657                           
  7658                           ; BSR set to: 0
  7659  002214  0100               	movlb	0	; () banked
  7660  002216  5193               	movf	___fttol@sign1& (0+255),w,b
  7661  002218  0100               	movlb	0	; () banked
  7662  00221A  B4D8               	btfsc	status,2,c
  7663  00221C  D009               	goto	l3085
  7664                           
  7665                           ; BSR set to: 0
  7666  00221E  0100               	movlb	0	; () banked
  7667  002220  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  7668  002222  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  7669  002224  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  7670  002226  6D94               	negf	___fttol@lval& (0+255),b
  7671  002228  0E00               	movlw	0
  7672  00222A  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7673  00222C  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7674  00222E  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7675  002230                     l3085:
  7676                           
  7677                           ; BSR set to: 0
  7678  002230  C094  F08A         	movff	___fttol@lval,?___fttol
  7679  002234  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  7680  002238  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  7681  00223C  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  7682  002240  0012               	return	
  7683  002242                     __end_of___fttol:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon2	equ	0xFF1
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           postdec1	equ	0xFE5
  7695                           plusw1	equ	0xFE3
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           plusw2	equ	0xFDB
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function ___ftsub *****************
  7706 ;; Defined at:
  7707 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  f1              3   57[BANK0 ] float 
  7710 ;;  f2              3   60[BANK0 ] float 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;		None
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  3   57[BANK0 ] float 
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7722 ;;      Params:         0       6       0       0       0       0       0       0       0
  7723 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7725 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7726 ;;Total ram usage:        6 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    5
  7729 ;; This function calls:
  7730 ;;		___ftadd
  7731 ;; This function is called by:
  7732 ;;		_sprintf
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           	psect	text16
  7737  002DFC                     __ptext16:
  7738                           	opt stack 0
  7739  002DFC                     ___ftsub:
  7740                           	opt stack 24
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;incstack = 0
  7744  002DFC  0100               	movlb	0	; () banked
  7745  002DFE  519C               	movf	___ftsub@f2& (0+255),w,b
  7746  002E00  0100               	movlb	0	; () banked
  7747  002E02  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7748  002E04  0100               	movlb	0	; () banked
  7749  002E06  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7750  002E08  B4D8               	btfsc	status,2,c
  7751  002E0A  D009               	goto	l3017
  7752                           
  7753                           ; BSR set to: 0
  7754  002E0C  0E00               	movlw	0
  7755  002E0E  0100               	movlb	0	; () banked
  7756  002E10  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  7757  002E12  0E00               	movlw	0
  7758  002E14  0100               	movlb	0	; () banked
  7759  002E16  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7760  002E18  0E80               	movlw	128
  7761  002E1A  0100               	movlb	0	; () banked
  7762  002E1C  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7763  002E1E                     l3017:
  7764                           
  7765                           ; BSR set to: 0
  7766  002E1E  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  7767  002E22  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7768  002E26  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7769  002E2A  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  7770  002E2E  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  7771  002E32  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  7772  002E36  EC33  F00C         	call	___ftadd	;wreg free
  7773  002E3A  C08D  F099         	movff	?___ftadd,?___ftsub
  7774  002E3E  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  7775  002E42  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  7776  002E46  0012               	return	
  7777  002E48                     __end_of___ftsub:
  7778                           	opt stack 0
  7779                           tblptru	equ	0xFF8
  7780                           tblptrh	equ	0xFF7
  7781                           tblptrl	equ	0xFF6
  7782                           tablat	equ	0xFF5
  7783                           prodh	equ	0xFF4
  7784                           prodl	equ	0xFF3
  7785                           intcon2	equ	0xFF1
  7786                           postinc0	equ	0xFEE
  7787                           wreg	equ	0xFE8
  7788                           postdec1	equ	0xFE5
  7789                           plusw1	equ	0xFE3
  7790                           fsr1l	equ	0xFE1
  7791                           indf2	equ	0xFDF
  7792                           postinc2	equ	0xFDE
  7793                           postdec2	equ	0xFDD
  7794                           plusw2	equ	0xFDB
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function ___ftadd *****************
  7800 ;; Defined at:
  7801 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  f1              3   45[BANK0 ] float 
  7804 ;;  f2              3   48[BANK0 ] float 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  exp1            1   56[BANK0 ] unsigned char 
  7807 ;;  exp2            1   55[BANK0 ] unsigned char 
  7808 ;;  sign            1   54[BANK0 ] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  3   45[BANK0 ] float 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7818 ;;      Params:         0       6       0       0       0       0       0       0       0
  7819 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7820 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7821 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7822 ;;Total ram usage:       12 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    4
  7825 ;; This function calls:
  7826 ;;		___ftpack
  7827 ;; This function is called by:
  7828 ;;		_sprintf
  7829 ;;		___ftsub
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text17
  7834  001866                     __ptext17:
  7835                           	opt stack 0
  7836  001866                     ___ftadd:
  7837                           	opt stack 24
  7838                           
  7839                           ;incstack = 0
  7840  001866  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  7841  00186A  0100               	movlb	0	; () banked
  7842  00186C  6B94               	clrf	(??___ftadd+1)& (0+255),b
  7843  00186E  6B95               	clrf	(??___ftadd+2)& (0+255),b
  7844  001870  0100               	movlb	0	; () banked
  7845  001872  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7846  001874  0100               	movlb	0	; () banked
  7847  001876  3793               	rlcf	??___ftadd& (0+255),f,b
  7848  001878  E301               	bnc	u2421
  7849  00187A  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  7850  00187C                     u2421:
  7851  00187C  0100               	movlb	0	; () banked
  7852  00187E  5193               	movf	??___ftadd& (0+255),w,b
  7853  001880  0100               	movlb	0	; () banked
  7854  001882  6F98               	movwf	___ftadd@exp1& (0+255),b
  7855  001884  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  7856  001888  0100               	movlb	0	; () banked
  7857  00188A  6B94               	clrf	(??___ftadd+1)& (0+255),b
  7858  00188C  6B95               	clrf	(??___ftadd+2)& (0+255),b
  7859  00188E  0100               	movlb	0	; () banked
  7860  001890  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7861  001892  0100               	movlb	0	; () banked
  7862  001894  3793               	rlcf	??___ftadd& (0+255),f,b
  7863  001896  E301               	bnc	u2431
  7864  001898  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  7865  00189A                     u2431:
  7866  00189A  0100               	movlb	0	; () banked
  7867  00189C  5193               	movf	??___ftadd& (0+255),w,b
  7868  00189E  0100               	movlb	0	; () banked
  7869  0018A0  6F97               	movwf	___ftadd@exp2& (0+255),b
  7870                           
  7871                           ; BSR set to: 0
  7872  0018A2  0100               	movlb	0	; () banked
  7873  0018A4  5198               	movf	___ftadd@exp1& (0+255),w,b
  7874  0018A6  0100               	movlb	0	; () banked
  7875  0018A8  B4D8               	btfsc	status,2,c
  7876  0018AA  D011               	goto	l597
  7877                           
  7878                           ; BSR set to: 0
  7879  0018AC  0100               	movlb	0	; () banked
  7880  0018AE  5197               	movf	___ftadd@exp2& (0+255),w,b
  7881  0018B0  0100               	movlb	0	; () banked
  7882  0018B2  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  7883  0018B4  B0D8               	btfsc	status,0,c
  7884  0018B6  D012               	goto	l2595
  7885                           
  7886                           ; BSR set to: 0
  7887  0018B8  0100               	movlb	0	; () banked
  7888  0018BA  5198               	movf	___ftadd@exp1& (0+255),w,b
  7889  0018BC  0800               	sublw	0
  7890  0018BE  0100               	movlb	0	; () banked
  7891  0018C0  2597               	addwf	___ftadd@exp2& (0+255),w,b
  7892  0018C2  0100               	movlb	0	; () banked
  7893  0018C4  6F93               	movwf	??___ftadd& (0+255),b
  7894  0018C6  0E18               	movlw	24
  7895  0018C8  0100               	movlb	0	; () banked
  7896  0018CA  6593               	cpfsgt	??___ftadd& (0+255),b
  7897  0018CC  D007               	goto	l2595
  7898  0018CE                     l597:
  7899                           
  7900                           ; BSR set to: 0
  7901  0018CE  C090  F08D         	movff	___ftadd@f2,?___ftadd
  7902  0018D2  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  7903  0018D6  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  7904  0018DA  0012               	return	
  7905  0018DC                     l2595:
  7906                           
  7907                           ; BSR set to: 0
  7908  0018DC  0100               	movlb	0	; () banked
  7909  0018DE  5197               	movf	___ftadd@exp2& (0+255),w,b
  7910  0018E0  0100               	movlb	0	; () banked
  7911  0018E2  B4D8               	btfsc	status,2,c
  7912  0018E4  D011               	goto	l601
  7913                           
  7914                           ; BSR set to: 0
  7915  0018E6  0100               	movlb	0	; () banked
  7916  0018E8  5198               	movf	___ftadd@exp1& (0+255),w,b
  7917  0018EA  0100               	movlb	0	; () banked
  7918  0018EC  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  7919  0018EE  B0D8               	btfsc	status,0,c
  7920  0018F0  D012               	goto	l2601
  7921                           
  7922                           ; BSR set to: 0
  7923  0018F2  0100               	movlb	0	; () banked
  7924  0018F4  5197               	movf	___ftadd@exp2& (0+255),w,b
  7925  0018F6  0800               	sublw	0
  7926  0018F8  0100               	movlb	0	; () banked
  7927  0018FA  2598               	addwf	___ftadd@exp1& (0+255),w,b
  7928  0018FC  0100               	movlb	0	; () banked
  7929  0018FE  6F93               	movwf	??___ftadd& (0+255),b
  7930  001900  0E18               	movlw	24
  7931  001902  0100               	movlb	0	; () banked
  7932  001904  6593               	cpfsgt	??___ftadd& (0+255),b
  7933  001906  D007               	goto	l2601
  7934  001908                     l601:
  7935                           
  7936                           ; BSR set to: 0
  7937  001908  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  7938  00190C  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  7939  001910  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  7940  001914  0012               	return	
  7941  001916                     l2601:
  7942                           
  7943                           ; BSR set to: 0
  7944  001916  0E06               	movlw	6
  7945  001918  0100               	movlb	0	; () banked
  7946  00191A  6F96               	movwf	___ftadd@sign& (0+255),b
  7947                           
  7948                           ; BSR set to: 0
  7949  00191C  0100               	movlb	0	; () banked
  7950  00191E  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7951  001920  D002               	goto	l2607
  7952                           
  7953                           ; BSR set to: 0
  7954  001922  0100               	movlb	0	; () banked
  7955  001924  8F96               	bsf	___ftadd@sign& (0+255),7,b
  7956  001926                     l2607:
  7957                           
  7958                           ; BSR set to: 0
  7959  001926  0100               	movlb	0	; () banked
  7960  001928  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7961  00192A  D002               	goto	l603
  7962                           
  7963                           ; BSR set to: 0
  7964  00192C  0100               	movlb	0	; () banked
  7965  00192E  8D96               	bsf	___ftadd@sign& (0+255),6,b
  7966  001930                     l603:
  7967                           
  7968                           ; BSR set to: 0
  7969  001930  0100               	movlb	0	; () banked
  7970  001932  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7971                           
  7972                           ; BSR set to: 0
  7973  001934  0EFF               	movlw	255
  7974  001936  0100               	movlb	0	; () banked
  7975  001938  178D               	andwf	___ftadd@f1& (0+255),f,b
  7976  00193A  0EFF               	movlw	255
  7977  00193C  0100               	movlb	0	; () banked
  7978  00193E  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7979  001940  0E00               	movlw	0
  7980  001942  0100               	movlb	0	; () banked
  7981  001944  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7982  001946  0100               	movlb	0	; () banked
  7983  001948  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7984                           
  7985                           ; BSR set to: 0
  7986  00194A  0EFF               	movlw	255
  7987  00194C  0100               	movlb	0	; () banked
  7988  00194E  1790               	andwf	___ftadd@f2& (0+255),f,b
  7989  001950  0EFF               	movlw	255
  7990  001952  0100               	movlb	0	; () banked
  7991  001954  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7992  001956  0E00               	movlw	0
  7993  001958  0100               	movlb	0	; () banked
  7994  00195A  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7995                           
  7996                           ; BSR set to: 0
  7997  00195C  0100               	movlb	0	; () banked
  7998  00195E  5197               	movf	___ftadd@exp2& (0+255),w,b
  7999  001960  0100               	movlb	0	; () banked
  8000  001962  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8001  001964  B0D8               	btfsc	status,0,c
  8002  001966  D025               	goto	l2627
  8003  001968                     l2617:
  8004                           
  8005                           ; BSR set to: 0
  8006  001968  0100               	movlb	0	; () banked
  8007  00196A  90D8               	bcf	status,0,c
  8008  00196C  3790               	rlcf	___ftadd@f2& (0+255),f,b
  8009  00196E  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8010  001970  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8011  001972  0100               	movlb	0	; () banked
  8012  001974  0797               	decf	___ftadd@exp2& (0+255),f,b
  8013                           
  8014                           ; BSR set to: 0
  8015  001976  0100               	movlb	0	; () banked
  8016  001978  5198               	movf	___ftadd@exp1& (0+255),w,b
  8017  00197A  0100               	movlb	0	; () banked
  8018  00197C  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8019  00197E  B4D8               	btfsc	status,2,c
  8020  001980  D011               	goto	l2625
  8021                           
  8022                           ; BSR set to: 0
  8023  001982  0100               	movlb	0	; () banked
  8024  001984  0796               	decf	___ftadd@sign& (0+255),f,b
  8025  001986  C096  F093         	movff	___ftadd@sign,??___ftadd
  8026  00198A  0E07               	movlw	7
  8027  00198C  0100               	movlb	0	; () banked
  8028  00198E  1793               	andwf	??___ftadd& (0+255),f,b
  8029  001990  B4D8               	btfsc	status,2,c
  8030  001992  D008               	goto	l2625
  8031  001994  D7E9               	goto	l2617
  8032  001996                     l2623:
  8033                           
  8034                           ; BSR set to: 0
  8035  001996  0100               	movlb	0	; () banked
  8036  001998  90D8               	bcf	status,0,c
  8037  00199A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8038  00199C  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8039  00199E  338D               	rrcf	___ftadd@f1& (0+255),f,b
  8040  0019A0  0100               	movlb	0	; () banked
  8041  0019A2  2B98               	incf	___ftadd@exp1& (0+255),f,b
  8042  0019A4                     l2625:
  8043                           
  8044                           ; BSR set to: 0
  8045  0019A4  0100               	movlb	0	; () banked
  8046  0019A6  5197               	movf	___ftadd@exp2& (0+255),w,b
  8047  0019A8  0100               	movlb	0	; () banked
  8048  0019AA  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8049  0019AC  B4D8               	btfsc	status,2,c
  8050  0019AE  D02B               	goto	l612
  8051  0019B0  D7F2               	goto	l2623
  8052  0019B2                     l2627:
  8053                           
  8054                           ; BSR set to: 0
  8055  0019B2  0100               	movlb	0	; () banked
  8056  0019B4  5198               	movf	___ftadd@exp1& (0+255),w,b
  8057  0019B6  0100               	movlb	0	; () banked
  8058  0019B8  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8059  0019BA  B0D8               	btfsc	status,0,c
  8060  0019BC  D024               	goto	l612
  8061  0019BE                     l2629:
  8062                           
  8063                           ; BSR set to: 0
  8064  0019BE  0100               	movlb	0	; () banked
  8065  0019C0  90D8               	bcf	status,0,c
  8066  0019C2  378D               	rlcf	___ftadd@f1& (0+255),f,b
  8067  0019C4  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8068  0019C6  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8069  0019C8  0100               	movlb	0	; () banked
  8070  0019CA  0798               	decf	___ftadd@exp1& (0+255),f,b
  8071                           
  8072                           ; BSR set to: 0
  8073  0019CC  0100               	movlb	0	; () banked
  8074  0019CE  5198               	movf	___ftadd@exp1& (0+255),w,b
  8075  0019D0  0100               	movlb	0	; () banked
  8076  0019D2  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8077  0019D4  B4D8               	btfsc	status,2,c
  8078  0019D6  D011               	goto	l2637
  8079                           
  8080                           ; BSR set to: 0
  8081  0019D8  0100               	movlb	0	; () banked
  8082  0019DA  0796               	decf	___ftadd@sign& (0+255),f,b
  8083  0019DC  C096  F093         	movff	___ftadd@sign,??___ftadd
  8084  0019E0  0E07               	movlw	7
  8085  0019E2  0100               	movlb	0	; () banked
  8086  0019E4  1793               	andwf	??___ftadd& (0+255),f,b
  8087  0019E6  B4D8               	btfsc	status,2,c
  8088  0019E8  D008               	goto	l2637
  8089  0019EA  D7E9               	goto	l2629
  8090  0019EC                     l2635:
  8091                           
  8092                           ; BSR set to: 0
  8093  0019EC  0100               	movlb	0	; () banked
  8094  0019EE  90D8               	bcf	status,0,c
  8095  0019F0  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8096  0019F2  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8097  0019F4  3390               	rrcf	___ftadd@f2& (0+255),f,b
  8098  0019F6  0100               	movlb	0	; () banked
  8099  0019F8  2B97               	incf	___ftadd@exp2& (0+255),f,b
  8100  0019FA                     l2637:
  8101                           
  8102                           ; BSR set to: 0
  8103  0019FA  0100               	movlb	0	; () banked
  8104  0019FC  5197               	movf	___ftadd@exp2& (0+255),w,b
  8105  0019FE  0100               	movlb	0	; () banked
  8106  001A00  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8107  001A02  A4D8               	btfss	status,2,c
  8108  001A04  D7F3               	goto	l2635
  8109  001A06                     l612:
  8110                           
  8111                           ; BSR set to: 0
  8112  001A06  0100               	movlb	0	; () banked
  8113  001A08  AF96               	btfss	___ftadd@sign& (0+255),7,b
  8114  001A0A  D012               	goto	l621
  8115                           
  8116                           ; BSR set to: 0
  8117  001A0C  0EFF               	movlw	255
  8118  001A0E  0100               	movlb	0	; () banked
  8119  001A10  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  8120  001A12  0EFF               	movlw	255
  8121  001A14  0100               	movlb	0	; () banked
  8122  001A16  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8123  001A18  0EFF               	movlw	255
  8124  001A1A  0100               	movlb	0	; () banked
  8125  001A1C  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8126  001A1E  0E01               	movlw	1
  8127  001A20  0100               	movlb	0	; () banked
  8128  001A22  278D               	addwf	___ftadd@f1& (0+255),f,b
  8129  001A24  0E00               	movlw	0
  8130  001A26  0100               	movlb	0	; () banked
  8131  001A28  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8132  001A2A  0E00               	movlw	0
  8133  001A2C  0100               	movlb	0	; () banked
  8134  001A2E  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8135  001A30                     l621:
  8136                           
  8137                           ; BSR set to: 0
  8138  001A30  0100               	movlb	0	; () banked
  8139  001A32  AD96               	btfss	___ftadd@sign& (0+255),6,b
  8140  001A34  D012               	goto	l2643
  8141                           
  8142                           ; BSR set to: 0
  8143  001A36  0EFF               	movlw	255
  8144  001A38  0100               	movlb	0	; () banked
  8145  001A3A  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8146  001A3C  0EFF               	movlw	255
  8147  001A3E  0100               	movlb	0	; () banked
  8148  001A40  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8149  001A42  0EFF               	movlw	255
  8150  001A44  0100               	movlb	0	; () banked
  8151  001A46  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8152  001A48  0E01               	movlw	1
  8153  001A4A  0100               	movlb	0	; () banked
  8154  001A4C  2790               	addwf	___ftadd@f2& (0+255),f,b
  8155  001A4E  0E00               	movlw	0
  8156  001A50  0100               	movlb	0	; () banked
  8157  001A52  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8158  001A54  0E00               	movlw	0
  8159  001A56  0100               	movlb	0	; () banked
  8160  001A58  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8161  001A5A                     l2643:
  8162                           
  8163                           ; BSR set to: 0
  8164  001A5A  0E00               	movlw	0
  8165  001A5C  0100               	movlb	0	; () banked
  8166  001A5E  6F96               	movwf	___ftadd@sign& (0+255),b
  8167                           
  8168                           ; BSR set to: 0
  8169  001A60  0100               	movlb	0	; () banked
  8170  001A62  518D               	movf	___ftadd@f1& (0+255),w,b
  8171  001A64  0100               	movlb	0	; () banked
  8172  001A66  2790               	addwf	___ftadd@f2& (0+255),f,b
  8173  001A68  0100               	movlb	0	; () banked
  8174  001A6A  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8175  001A6C  0100               	movlb	0	; () banked
  8176  001A6E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8177  001A70  0100               	movlb	0	; () banked
  8178  001A72  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8179  001A74  0100               	movlb	0	; () banked
  8180  001A76  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8181                           
  8182                           ; BSR set to: 0
  8183  001A78  0100               	movlb	0	; () banked
  8184  001A7A  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8185  001A7C  D015               	goto	l2653
  8186                           
  8187                           ; BSR set to: 0
  8188  001A7E  0EFF               	movlw	255
  8189  001A80  0100               	movlb	0	; () banked
  8190  001A82  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8191  001A84  0EFF               	movlw	255
  8192  001A86  0100               	movlb	0	; () banked
  8193  001A88  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8194  001A8A  0EFF               	movlw	255
  8195  001A8C  0100               	movlb	0	; () banked
  8196  001A8E  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8197  001A90  0E01               	movlw	1
  8198  001A92  0100               	movlb	0	; () banked
  8199  001A94  2790               	addwf	___ftadd@f2& (0+255),f,b
  8200  001A96  0E00               	movlw	0
  8201  001A98  0100               	movlb	0	; () banked
  8202  001A9A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8203  001A9C  0E00               	movlw	0
  8204  001A9E  0100               	movlb	0	; () banked
  8205  001AA0  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8206                           
  8207                           ; BSR set to: 0
  8208  001AA2  0E01               	movlw	1
  8209  001AA4  0100               	movlb	0	; () banked
  8210  001AA6  6F96               	movwf	___ftadd@sign& (0+255),b
  8211  001AA8                     l2653:
  8212                           
  8213                           ; BSR set to: 0
  8214  001AA8  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  8215  001AAC  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  8216  001AB0  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  8217  001AB4  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  8218  001AB8  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  8219  001ABC  EC52  F012         	call	___ftpack	;wreg free
  8220  001AC0  C060  F08D         	movff	?___ftpack,?___ftadd
  8221  001AC4  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  8222  001AC8  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  8223  001ACC  0012               	return	
  8224  001ACE                     __end_of___ftadd:
  8225                           	opt stack 0
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           intcon2	equ	0xFF1
  8233                           postinc0	equ	0xFEE
  8234                           wreg	equ	0xFE8
  8235                           postdec1	equ	0xFE5
  8236                           plusw1	equ	0xFE3
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           postdec2	equ	0xFDD
  8241                           plusw2	equ	0xFDB
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function ___ftpack *****************
  8247 ;; Defined at:
  8248 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  arg             3    0[BANK0 ] unsigned um
  8251 ;;  exp             1    3[BANK0 ] unsigned char 
  8252 ;;  sign            1    4[BANK0 ] unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  3    0[BANK0 ] float 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2, status,0
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8264 ;;      Params:         0       5       0       0       0       0       0       0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8266 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8267 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8268 ;;Total ram usage:        8 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    3
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		___ftadd
  8275 ;;		___ftmul
  8276 ;;		___lltoft
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text18
  8281  0024A4                     __ptext18:
  8282                           	opt stack 0
  8283  0024A4                     ___ftpack:
  8284                           	opt stack 24
  8285                           
  8286                           ;incstack = 0
  8287  0024A4  0100               	movlb	0	; () banked
  8288  0024A6  5163               	movf	___ftpack@exp& (0+255),w,b
  8289  0024A8  0100               	movlb	0	; () banked
  8290  0024AA  B4D8               	btfsc	status,2,c
  8291  0024AC  D008               	goto	l2533
  8292                           
  8293                           ; BSR set to: 0
  8294  0024AE  0100               	movlb	0	; () banked
  8295  0024B0  5160               	movf	___ftpack@arg& (0+255),w,b
  8296  0024B2  0100               	movlb	0	; () banked
  8297  0024B4  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8298  0024B6  0100               	movlb	0	; () banked
  8299  0024B8  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8300  0024BA  A4D8               	btfss	status,2,c
  8301  0024BC  D011               	goto	l2539
  8302  0024BE                     l2533:
  8303                           
  8304                           ; BSR set to: 0
  8305  0024BE  0E00               	movlw	0
  8306  0024C0  0100               	movlb	0	; () banked
  8307  0024C2  6F60               	movwf	?___ftpack& (0+255),b
  8308  0024C4  0E00               	movlw	0
  8309  0024C6  0100               	movlb	0	; () banked
  8310  0024C8  6F61               	movwf	(?___ftpack+1)& (0+255),b
  8311  0024CA  0E00               	movlw	0
  8312  0024CC  0100               	movlb	0	; () banked
  8313  0024CE  6F62               	movwf	(?___ftpack+2)& (0+255),b
  8314                           
  8315                           ; BSR set to: 0
  8316  0024D0  0012               	return	
  8317  0024D2                     l2537:
  8318                           
  8319                           ; BSR set to: 0
  8320  0024D2  0100               	movlb	0	; () banked
  8321  0024D4  2B63               	incf	___ftpack@exp& (0+255),f,b
  8322  0024D6  0100               	movlb	0	; () banked
  8323  0024D8  90D8               	bcf	status,0,c
  8324  0024DA  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8325  0024DC  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8326  0024DE  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8327  0024E0                     l2539:
  8328                           
  8329                           ; BSR set to: 0
  8330  0024E0  0E00               	movlw	0
  8331  0024E2  0100               	movlb	0	; () banked
  8332  0024E4  1560               	andwf	___ftpack@arg& (0+255),w,b
  8333  0024E6  0100               	movlb	0	; () banked
  8334  0024E8  6F65               	movwf	??___ftpack& (0+255),b
  8335  0024EA  0E00               	movlw	0
  8336  0024EC  0100               	movlb	0	; () banked
  8337  0024EE  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8338  0024F0  0100               	movlb	0	; () banked
  8339  0024F2  6F66               	movwf	(??___ftpack+1)& (0+255),b
  8340  0024F4  0EFE               	movlw	254
  8341  0024F6  0100               	movlb	0	; () banked
  8342  0024F8  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8343  0024FA  0100               	movlb	0	; () banked
  8344  0024FC  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8345  0024FE  0100               	movlb	0	; () banked
  8346  002500  5165               	movf	??___ftpack& (0+255),w,b
  8347  002502  0100               	movlb	0	; () banked
  8348  002504  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8349  002506  0100               	movlb	0	; () banked
  8350  002508  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8351  00250A  B4D8               	btfsc	status,2,c
  8352  00250C  D011               	goto	l2545
  8353  00250E  D7E1               	goto	l2537
  8354  002510                     l2541:
  8355                           
  8356                           ; BSR set to: 0
  8357  002510  0100               	movlb	0	; () banked
  8358  002512  2B63               	incf	___ftpack@exp& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361  002514  0E01               	movlw	1
  8362  002516  0100               	movlb	0	; () banked
  8363  002518  2760               	addwf	___ftpack@arg& (0+255),f,b
  8364  00251A  0E00               	movlw	0
  8365  00251C  0100               	movlb	0	; () banked
  8366  00251E  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8367  002520  0E00               	movlw	0
  8368  002522  0100               	movlb	0	; () banked
  8369  002524  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8370  002526  0100               	movlb	0	; () banked
  8371  002528  90D8               	bcf	status,0,c
  8372  00252A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8373  00252C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8374  00252E  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8375  002530                     l2545:
  8376                           
  8377                           ; BSR set to: 0
  8378  002530  0E00               	movlw	0
  8379  002532  0100               	movlb	0	; () banked
  8380  002534  1560               	andwf	___ftpack@arg& (0+255),w,b
  8381  002536  0100               	movlb	0	; () banked
  8382  002538  6F65               	movwf	??___ftpack& (0+255),b
  8383  00253A  0E00               	movlw	0
  8384  00253C  0100               	movlb	0	; () banked
  8385  00253E  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8386  002540  0100               	movlb	0	; () banked
  8387  002542  6F66               	movwf	(??___ftpack+1)& (0+255),b
  8388  002544  0EFF               	movlw	255
  8389  002546  0100               	movlb	0	; () banked
  8390  002548  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8391  00254A  0100               	movlb	0	; () banked
  8392  00254C  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8393  00254E  0100               	movlb	0	; () banked
  8394  002550  5165               	movf	??___ftpack& (0+255),w,b
  8395  002552  0100               	movlb	0	; () banked
  8396  002554  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8397  002556  0100               	movlb	0	; () banked
  8398  002558  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8399  00255A  B4D8               	btfsc	status,2,c
  8400  00255C  D008               	goto	l2549
  8401  00255E  D7D8               	goto	l2541
  8402  002560                     l2547:
  8403                           
  8404                           ; BSR set to: 0
  8405  002560  0100               	movlb	0	; () banked
  8406  002562  0763               	decf	___ftpack@exp& (0+255),f,b
  8407  002564  0100               	movlb	0	; () banked
  8408  002566  90D8               	bcf	status,0,c
  8409  002568  3760               	rlcf	___ftpack@arg& (0+255),f,b
  8410  00256A  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8411  00256C  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8412  00256E                     l2549:
  8413                           
  8414                           ; BSR set to: 0
  8415  00256E  0100               	movlb	0	; () banked
  8416  002570  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8417  002572  D004               	goto	l574
  8418                           
  8419                           ; BSR set to: 0
  8420  002574  0E02               	movlw	2
  8421  002576  0100               	movlb	0	; () banked
  8422  002578  6163               	cpfslt	___ftpack@exp& (0+255),b
  8423  00257A  D7F2               	goto	l2547
  8424  00257C                     l574:
  8425                           
  8426                           ; BSR set to: 0
  8427  00257C  0100               	movlb	0	; () banked
  8428  00257E  B163               	btfsc	___ftpack@exp& (0+255),0,b
  8429  002580  D002               	goto	l2555
  8430                           
  8431                           ; BSR set to: 0
  8432  002582  0100               	movlb	0	; () banked
  8433  002584  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8434  002586                     l2555:
  8435                           
  8436                           ; BSR set to: 0
  8437  002586  0100               	movlb	0	; () banked
  8438  002588  90D8               	bcf	status,0,c
  8439  00258A  3363               	rrcf	___ftpack@exp& (0+255),f,b
  8440  00258C  0100               	movlb	0	; () banked
  8441  00258E  5163               	movf	___ftpack@exp& (0+255),w,b
  8442  002590  0100               	movlb	0	; () banked
  8443  002592  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8444                           
  8445                           ; BSR set to: 0
  8446  002594  0100               	movlb	0	; () banked
  8447  002596  5164               	movf	___ftpack@sign& (0+255),w,b
  8448  002598  0100               	movlb	0	; () banked
  8449  00259A  B4D8               	btfsc	status,2,c
  8450  00259C  D002               	goto	l2561
  8451                           
  8452                           ; BSR set to: 0
  8453  00259E  0100               	movlb	0	; () banked
  8454  0025A0  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8455  0025A2                     l2561:
  8456                           
  8457                           ; BSR set to: 0
  8458  0025A2  C060  F060         	movff	___ftpack@arg,?___ftpack
  8459  0025A6  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  8460  0025AA  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  8461  0025AE  0012               	return	
  8462  0025B0                     __end_of___ftpack:
  8463                           	opt stack 0
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon2	equ	0xFF1
  8471                           postinc0	equ	0xFEE
  8472                           wreg	equ	0xFE8
  8473                           postdec1	equ	0xFE5
  8474                           plusw1	equ	0xFE3
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function ___ftneg *****************
  8485 ;; Defined at:
  8486 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  f1              3    0[BANK0 ] float 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  3    0[BANK0 ] float 
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8500 ;;      Params:         0       3       0       0       0       0       0       0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8503 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8504 ;;Total ram usage:        3 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    3
  8507 ;; This function calls:
  8508 ;;		Nothing
  8509 ;; This function is called by:
  8510 ;;		_sprintf
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text19
  8515  002F66                     __ptext19:
  8516                           	opt stack 0
  8517  002F66                     ___ftneg:
  8518                           	opt stack 26
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;incstack = 0
  8522  002F66  0100               	movlb	0	; () banked
  8523  002F68  5160               	movf	___ftneg@f1& (0+255),w,b
  8524  002F6A  0100               	movlb	0	; () banked
  8525  002F6C  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8526  002F6E  0100               	movlb	0	; () banked
  8527  002F70  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8528  002F72  B4D8               	btfsc	status,2,c
  8529  002F74  D009               	goto	l671
  8530                           
  8531                           ; BSR set to: 0
  8532  002F76  0E00               	movlw	0
  8533  002F78  0100               	movlb	0	; () banked
  8534  002F7A  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  8535  002F7C  0E00               	movlw	0
  8536  002F7E  0100               	movlb	0	; () banked
  8537  002F80  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8538  002F82  0E80               	movlw	128
  8539  002F84  0100               	movlb	0	; () banked
  8540  002F86  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8541  002F88                     l671:
  8542                           
  8543                           ; BSR set to: 0
  8544  002F88  C060  F060         	movff	___ftneg@f1,?___ftneg
  8545  002F8C  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  8546  002F90  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  8547                           
  8548                           ; BSR set to: 0
  8549  002F94  0012               	return		;funcret
  8550  002F96                     __end_of___ftneg:
  8551                           	opt stack 0
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon2	equ	0xFF1
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           plusw1	equ	0xFE3
  8563                           fsr1l	equ	0xFE1
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           postdec2	equ	0xFDD
  8567                           plusw2	equ	0xFDB
  8568                           fsr2h	equ	0xFDA
  8569                           fsr2l	equ	0xFD9
  8570                           status	equ	0xFD8
  8571                           
  8572 ;; *************** function ___ftge *****************
  8573 ;; Defined at:
  8574 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8575 ;; Parameters:    Size  Location     Type
  8576 ;;  ff1             3    0[BANK0 ] float 
  8577 ;;  ff2             3    3[BANK0 ] float 
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;		None
  8580 ;; Return value:  Size  Location     Type
  8581 ;;		None               void
  8582 ;; Registers used:
  8583 ;;		wreg, status,2, status,0
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8589 ;;      Params:         0       6       0       0       0       0       0       0       0
  8590 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8591 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8592 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8593 ;;Total ram usage:        9 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    3
  8596 ;; This function calls:
  8597 ;;		Nothing
  8598 ;; This function is called by:
  8599 ;;		_main
  8600 ;;		_sprintf
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text20
  8605  00278A                     __ptext20:
  8606                           	opt stack 0
  8607  00278A                     ___ftge:
  8608                           	opt stack 26
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;incstack = 0
  8612  00278A  0100               	movlb	0	; () banked
  8613  00278C  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8614  00278E  D01D               	goto	l3025
  8615                           
  8616                           ; BSR set to: 0
  8617  002790  C060  F066         	movff	___ftge@ff1,??___ftge
  8618  002794  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  8619  002798  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  8620  00279C  0100               	movlb	0	; () banked
  8621  00279E  1F66               	comf	??___ftge& (0+255),f,b
  8622  0027A0  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8623  0027A2  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8624  0027A4  2B66               	incf	??___ftge& (0+255),f,b
  8625  0027A6  0E00               	movlw	0
  8626  0027A8  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8627  0027AA  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8628  0027AC  0E00               	movlw	0
  8629  0027AE  0100               	movlb	0	; () banked
  8630  0027B0  2566               	addwf	??___ftge& (0+255),w,b
  8631  0027B2  0100               	movlb	0	; () banked
  8632  0027B4  6F60               	movwf	___ftge@ff1& (0+255),b
  8633  0027B6  0E00               	movlw	0
  8634  0027B8  0100               	movlb	0	; () banked
  8635  0027BA  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8636  0027BC  0100               	movlb	0	; () banked
  8637  0027BE  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8638  0027C0  0E80               	movlw	128
  8639  0027C2  0100               	movlb	0	; () banked
  8640  0027C4  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8641  0027C6  0100               	movlb	0	; () banked
  8642  0027C8  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8643  0027CA                     l3025:
  8644                           
  8645                           ; BSR set to: 0
  8646  0027CA  0100               	movlb	0	; () banked
  8647  0027CC  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8648  0027CE  D01D               	goto	l3029
  8649                           
  8650                           ; BSR set to: 0
  8651  0027D0  C063  F066         	movff	___ftge@ff2,??___ftge
  8652  0027D4  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  8653  0027D8  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  8654  0027DC  0100               	movlb	0	; () banked
  8655  0027DE  1F66               	comf	??___ftge& (0+255),f,b
  8656  0027E0  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8657  0027E2  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8658  0027E4  2B66               	incf	??___ftge& (0+255),f,b
  8659  0027E6  0E00               	movlw	0
  8660  0027E8  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8661  0027EA  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8662  0027EC  0E00               	movlw	0
  8663  0027EE  0100               	movlb	0	; () banked
  8664  0027F0  2566               	addwf	??___ftge& (0+255),w,b
  8665  0027F2  0100               	movlb	0	; () banked
  8666  0027F4  6F63               	movwf	___ftge@ff2& (0+255),b
  8667  0027F6  0E00               	movlw	0
  8668  0027F8  0100               	movlb	0	; () banked
  8669  0027FA  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8670  0027FC  0100               	movlb	0	; () banked
  8671  0027FE  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8672  002800  0E80               	movlw	128
  8673  002802  0100               	movlb	0	; () banked
  8674  002804  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8675  002806  0100               	movlb	0	; () banked
  8676  002808  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8677  00280A                     l3029:
  8678                           
  8679                           ; BSR set to: 0
  8680  00280A  0E00               	movlw	0
  8681  00280C  0100               	movlb	0	; () banked
  8682  00280E  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  8683  002810  0E00               	movlw	0
  8684  002812  0100               	movlb	0	; () banked
  8685  002814  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8686  002816  0E80               	movlw	128
  8687  002818  0100               	movlb	0	; () banked
  8688  00281A  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8689                           
  8690                           ; BSR set to: 0
  8691  00281C  0E00               	movlw	0
  8692  00281E  0100               	movlb	0	; () banked
  8693  002820  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  8694  002822  0E00               	movlw	0
  8695  002824  0100               	movlb	0	; () banked
  8696  002826  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8697  002828  0E80               	movlw	128
  8698  00282A  0100               	movlb	0	; () banked
  8699  00282C  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8700  00282E  0100               	movlb	0	; () banked
  8701  002830  5163               	movf	___ftge@ff2& (0+255),w,b
  8702  002832  0100               	movlb	0	; () banked
  8703  002834  5D60               	subwf	___ftge@ff1& (0+255),w,b
  8704  002836  0100               	movlb	0	; () banked
  8705  002838  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  8706  00283A  0100               	movlb	0	; () banked
  8707  00283C  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8708  00283E  0100               	movlb	0	; () banked
  8709  002840  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  8710  002842  0100               	movlb	0	; () banked
  8711  002844  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8712  002846  B0D8               	btfsc	status,0,c
  8713  002848  D002               	goto	l3035
  8714                           
  8715                           ; BSR set to: 0
  8716  00284A  90D8               	bcf	status,0,c
  8717  00284C  0012               	return	
  8718  00284E                     l3035:
  8719                           
  8720                           ; BSR set to: 0
  8721  00284E  80D8               	bsf	status,0,c
  8722                           
  8723                           ; BSR set to: 0
  8724  002850  0012               	return	
  8725  002852                     __end_of___ftge:
  8726                           	opt stack 0
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           intcon2	equ	0xFF1
  8734                           postinc0	equ	0xFEE
  8735                           wreg	equ	0xFE8
  8736                           postdec1	equ	0xFE5
  8737                           plusw1	equ	0xFE3
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           plusw2	equ	0xFDB
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function _memset *****************
  8748 ;; Defined at:
  8749 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  p1              2    0[BANK0 ] PTR void 
  8752 ;;		 -> buffer(50), main@pass(7), 
  8753 ;;  c               2    2[BANK0 ] int 
  8754 ;;  n               2    4[BANK0 ] unsigned int 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  p               2    6[BANK0 ] PTR unsigned char 
  8757 ;;		 -> buffer(50), main@pass(7), 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  2    0[BANK0 ] PTR void 
  8760 ;; Registers used:
  8761 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8767 ;;      Params:         0       6       0       0       0       0       0       0       0
  8768 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8770 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8771 ;;Total ram usage:        8 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    3
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_main
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text21
  8782  002F00                     __ptext21:
  8783                           	opt stack 0
  8784  002F00                     _memset:
  8785                           	opt stack 27
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;incstack = 0
  8789  002F00  C060  F066         	movff	memset@p1,memset@p
  8790  002F04  C061  F067         	movff	memset@p1+1,memset@p+1
  8791  002F08  D009               	goto	l3609
  8792  002F0A                     l3605:
  8793  002F0A  C066  FFD9         	movff	memset@p,fsr2l
  8794  002F0E  C067  FFDA         	movff	memset@p+1,fsr2h
  8795  002F12  C062  FFDF         	movff	memset@c,indf2
  8796  002F16  0100               	movlb	0	; () banked
  8797  002F18  4B66               	infsnz	memset@p& (0+255),f,b
  8798  002F1A  2B67               	incf	(memset@p+1)& (0+255),f,b
  8799  002F1C                     l3609:
  8800  002F1C  0100               	movlb	0	; () banked
  8801  002F1E  0764               	decf	memset@n& (0+255),f,b
  8802  002F20  A0D8               	btfss	status,0,c
  8803  002F22  0765               	decf	(memset@n+1)& (0+255),f,b
  8804  002F24  0100               	movlb	0	; () banked
  8805  002F26  2964               	incf	memset@n& (0+255),w,b
  8806  002F28  E1F0               	bnz	l3605
  8807  002F2A  0100               	movlb	0	; () banked
  8808  002F2C  2965               	incf	(memset@n+1)& (0+255),w,b
  8809  002F2E  B4D8               	btfsc	status,2,c
  8810  002F30  0012               	return	
  8811  002F32  D7EB               	goto	l3605
  8812  002F34                     __end_of_memset:
  8813                           	opt stack 0
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon2	equ	0xFF1
  8821                           postinc0	equ	0xFEE
  8822                           wreg	equ	0xFE8
  8823                           postdec1	equ	0xFE5
  8824                           plusw1	equ	0xFE3
  8825                           fsr1l	equ	0xFE1
  8826                           indf2	equ	0xFDF
  8827                           postinc2	equ	0xFDE
  8828                           postdec2	equ	0xFDD
  8829                           plusw2	equ	0xFDB
  8830                           fsr2h	equ	0xFDA
  8831                           fsr2l	equ	0xFD9
  8832                           status	equ	0xFD8
  8833                           
  8834 ;; *************** function _keyfind *****************
  8835 ;; Defined at:
  8836 ;;		line 399 in file "newmain.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;		None
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      unsigned char 
  8843 ;; Registers used:
  8844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8850 ;;      Params:         0       0       0       0       0       0       0       0       0
  8851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8854 ;;Total ram usage:        0 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    4
  8857 ;; This function calls:
  8858 ;;		_MSdelay
  8859 ;; This function is called by:
  8860 ;;		_main
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           	psect	text22
  8865  002242                     __ptext22:
  8866                           	opt stack 0
  8867  002242                     _keyfind:
  8868                           	opt stack 26
  8869                           
  8870                           ;newmain.c: 401: TRISB = 0xf0;
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;incstack = 0
  8874  002242  0EF0               	movlw	240
  8875  002244  6E93               	movwf	3987,c	;volatile
  8876  002246                     l175:
  8877                           
  8878                           ;newmain.c: 405: {
  8879                           ;newmain.c: 406: LATB = 0xfe;
  8880  002246  0EFE               	movlw	254
  8881  002248  6E8A               	movwf	3978,c	;volatile
  8882                           
  8883                           ;newmain.c: 407: col_loc = PORTB & 0xf0;
  8884  00224A  5081               	movf	3969,w,c	;volatile
  8885  00224C  0BF0               	andlw	240
  8886  00224E  0100               	movlb	0	; () banked
  8887  002250  6FF0               	movwf	_col_loc& (0+255),b
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;newmain.c: 408: temp_col=col_loc;
  8891  002252  C0F0  F0F2         	movff	_col_loc,_temp_col
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;newmain.c: 409: if(col_loc!=0xf0)
  8895  002256  0EF0               	movlw	240
  8896  002258  0100               	movlb	0	; () banked
  8897  00225A  19F0               	xorwf	_col_loc& (0+255),w,b
  8898  00225C  B4D8               	btfsc	status,2,c
  8899  00225E  D00E               	goto	l3223
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;newmain.c: 410: {
  8903                           ;newmain.c: 411: rowloc=0;
  8904  002260  0E00               	movlw	0
  8905  002262  0100               	movlb	0	; () banked
  8906  002264  6FF1               	movwf	_rowloc& (0+255),b
  8907                           
  8908                           ;newmain.c: 412: while(temp_col!=0xf0)
  8909  002266  D004               	goto	l177
  8910  002268                     l3221:
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;newmain.c: 413: {
  8914                           ;newmain.c: 414: temp_col = PORTB & 0xf0;
  8915  002268  5081               	movf	3969,w,c	;volatile
  8916  00226A  0BF0               	andlw	240
  8917  00226C  0100               	movlb	0	; () banked
  8918  00226E  6FF2               	movwf	_temp_col& (0+255),b
  8919  002270                     l177:
  8920                           
  8921                           ; BSR set to: 0
  8922  002270  0EF0               	movlw	240
  8923  002272  0100               	movlb	0	; () banked
  8924  002274  19F2               	xorwf	_temp_col& (0+255),w,b
  8925  002276  B4D8               	btfsc	status,2,c
  8926  002278  D051               	goto	l3259
  8927  00227A  D7F6               	goto	l3221
  8928  00227C                     l3223:
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;newmain.c: 417: }
  8932                           ;newmain.c: 419: LATB = 0xfd;
  8933  00227C  0EFD               	movlw	253
  8934  00227E  6E8A               	movwf	3978,c	;volatile
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;newmain.c: 420: col_loc = PORTB & 0xf0;
  8938  002280  5081               	movf	3969,w,c	;volatile
  8939  002282  0BF0               	andlw	240
  8940  002284  0100               	movlb	0	; () banked
  8941  002286  6FF0               	movwf	_col_loc& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;newmain.c: 421: temp_col=col_loc;
  8945  002288  C0F0  F0F2         	movff	_col_loc,_temp_col
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;newmain.c: 422: if(col_loc!=0xf0)
  8949  00228C  0EF0               	movlw	240
  8950  00228E  0100               	movlb	0	; () banked
  8951  002290  19F0               	xorwf	_col_loc& (0+255),w,b
  8952  002292  B4D8               	btfsc	status,2,c
  8953  002294  D00E               	goto	l3235
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;newmain.c: 423: {
  8957                           ;newmain.c: 424: rowloc=1;
  8958  002296  0E01               	movlw	1
  8959  002298  0100               	movlb	0	; () banked
  8960  00229A  6FF1               	movwf	_rowloc& (0+255),b
  8961                           
  8962                           ;newmain.c: 425: while(temp_col!=0xf0)
  8963  00229C  D004               	goto	l182
  8964  00229E                     l3233:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;newmain.c: 426: {
  8968                           ;newmain.c: 427: temp_col = PORTB & 0xf0;
  8969  00229E  5081               	movf	3969,w,c	;volatile
  8970  0022A0  0BF0               	andlw	240
  8971  0022A2  0100               	movlb	0	; () banked
  8972  0022A4  6FF2               	movwf	_temp_col& (0+255),b
  8973  0022A6                     l182:
  8974                           
  8975                           ; BSR set to: 0
  8976  0022A6  0EF0               	movlw	240
  8977  0022A8  0100               	movlb	0	; () banked
  8978  0022AA  19F2               	xorwf	_temp_col& (0+255),w,b
  8979  0022AC  B4D8               	btfsc	status,2,c
  8980  0022AE  D036               	goto	l3259
  8981  0022B0  D7F6               	goto	l3233
  8982  0022B2                     l3235:
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;newmain.c: 430: }
  8986                           ;newmain.c: 432: LATB = 0xfb;
  8987  0022B2  0EFB               	movlw	251
  8988  0022B4  6E8A               	movwf	3978,c	;volatile
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;newmain.c: 433: col_loc = PORTB & 0xf0;
  8992  0022B6  5081               	movf	3969,w,c	;volatile
  8993  0022B8  0BF0               	andlw	240
  8994  0022BA  0100               	movlb	0	; () banked
  8995  0022BC  6FF0               	movwf	_col_loc& (0+255),b
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;newmain.c: 434: temp_col=col_loc;
  8999  0022BE  C0F0  F0F2         	movff	_col_loc,_temp_col
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;newmain.c: 435: if(col_loc!=0xf0)
  9003  0022C2  0EF0               	movlw	240
  9004  0022C4  0100               	movlb	0	; () banked
  9005  0022C6  19F0               	xorwf	_col_loc& (0+255),w,b
  9006  0022C8  B4D8               	btfsc	status,2,c
  9007  0022CA  D00E               	goto	l3247
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;newmain.c: 436: {
  9011                           ;newmain.c: 437: rowloc=2;
  9012  0022CC  0E02               	movlw	2
  9013  0022CE  0100               	movlb	0	; () banked
  9014  0022D0  6FF1               	movwf	_rowloc& (0+255),b
  9015                           
  9016                           ;newmain.c: 438: while(temp_col!=0xf0)
  9017  0022D2  D004               	goto	l186
  9018  0022D4                     l3245:
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;newmain.c: 439: {
  9022                           ;newmain.c: 440: temp_col = PORTB & 0xf0;
  9023  0022D4  5081               	movf	3969,w,c	;volatile
  9024  0022D6  0BF0               	andlw	240
  9025  0022D8  0100               	movlb	0	; () banked
  9026  0022DA  6FF2               	movwf	_temp_col& (0+255),b
  9027  0022DC                     l186:
  9028                           
  9029                           ; BSR set to: 0
  9030  0022DC  0EF0               	movlw	240
  9031  0022DE  0100               	movlb	0	; () banked
  9032  0022E0  19F2               	xorwf	_temp_col& (0+255),w,b
  9033  0022E2  B4D8               	btfsc	status,2,c
  9034  0022E4  D01B               	goto	l3259
  9035  0022E6  D7F6               	goto	l3245
  9036  0022E8                     l3247:
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;newmain.c: 443: }
  9040                           ;newmain.c: 445: LATB = 0xf7;
  9041  0022E8  0EF7               	movlw	247
  9042  0022EA  6E8A               	movwf	3978,c	;volatile
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;newmain.c: 446: col_loc = PORTB & 0xf0;
  9046  0022EC  5081               	movf	3969,w,c	;volatile
  9047  0022EE  0BF0               	andlw	240
  9048  0022F0  0100               	movlb	0	; () banked
  9049  0022F2  6FF0               	movwf	_col_loc& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;newmain.c: 447: temp_col=col_loc;
  9053  0022F4  C0F0  F0F2         	movff	_col_loc,_temp_col
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;newmain.c: 448: if(col_loc!=0xf0)
  9057  0022F8  0EF0               	movlw	240
  9058  0022FA  0100               	movlb	0	; () banked
  9059  0022FC  19F0               	xorwf	_col_loc& (0+255),w,b
  9060  0022FE  B4D8               	btfsc	status,2,c
  9061  002300  D7A2               	goto	l175
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;newmain.c: 449: {
  9065                           ;newmain.c: 450: rowloc=3;
  9066  002302  0E03               	movlw	3
  9067  002304  0100               	movlb	0	; () banked
  9068  002306  6FF1               	movwf	_rowloc& (0+255),b
  9069                           
  9070                           ;newmain.c: 451: while(temp_col!=0xf0)
  9071  002308  D004               	goto	l190
  9072  00230A                     l3257:
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;newmain.c: 452: {
  9076                           ;newmain.c: 453: temp_col = PORTB & 0xf0;
  9077  00230A  5081               	movf	3969,w,c	;volatile
  9078  00230C  0BF0               	andlw	240
  9079  00230E  0100               	movlb	0	; () banked
  9080  002310  6FF2               	movwf	_temp_col& (0+255),b
  9081  002312                     l190:
  9082                           
  9083                           ; BSR set to: 0
  9084  002312  0EF0               	movlw	240
  9085  002314  0100               	movlb	0	; () banked
  9086  002316  19F2               	xorwf	_temp_col& (0+255),w,b
  9087  002318  A4D8               	btfss	status,2,c
  9088  00231A  D7F7               	goto	l3257
  9089  00231C                     l3259:
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;newmain.c: 462: {
  9093                           ;newmain.c: 463: if(col_loc==0xe0)
  9094  00231C  0EE0               	movlw	224
  9095  00231E  0100               	movlb	0	; () banked
  9096  002320  19F0               	xorwf	_col_loc& (0+255),w,b
  9097  002322  A4D8               	btfss	status,2,c
  9098  002324  D00B               	goto	l3267
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;newmain.c: 464: {
  9102                           ;newmain.c: 465: return keypad[rowloc][0];
  9103  002326  0100               	movlb	0	; () banked
  9104  002328  51F1               	movf	_rowloc& (0+255),w,b
  9105  00232A  0D04               	mullw	4
  9106  00232C                     L6:
  9107  00232C  0E46               	movlw	low _keypad
  9108  00232E  24F3               	addwf	prodl,w,c
  9109  002330  6ED9               	movwf	fsr2l,c
  9110  002332  0E00               	movlw	high _keypad
  9111  002334  20F4               	addwfc	prodh,w,c
  9112  002336  6EDA               	movwf	fsr2h,c
  9113  002338  50DF               	movf	indf2,w,c
  9114                           
  9115                           ; BSR set to: 0
  9116  00233A  0012               	return	
  9117  00233C                     l3267:
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;newmain.c: 467: else
  9121                           ;newmain.c: 468: if(col_loc==0xd0)
  9122  00233C  0ED0               	movlw	208
  9123  00233E  0100               	movlb	0	; () banked
  9124  002340  19F0               	xorwf	_col_loc& (0+255),w,b
  9125  002342  A4D8               	btfss	status,2,c
  9126  002344  D005               	goto	l3275
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;newmain.c: 469: {
  9130                           ;newmain.c: 470: return keypad[rowloc][1];
  9131  002346  0100               	movlb	0	; () banked
  9132  002348  51F1               	movf	_rowloc& (0+255),w,b
  9133  00234A  0D04               	mullw	4
  9134  00234C  0E01               	movlw	1
  9135  00234E  D013               	goto	L8
  9136  002350                     l3275:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;newmain.c: 472: else
  9140                           ;newmain.c: 473: if(col_loc==0xb0)
  9141  002350  0EB0               	movlw	176
  9142  002352  0100               	movlb	0	; () banked
  9143  002354  19F0               	xorwf	_col_loc& (0+255),w,b
  9144  002356  A4D8               	btfss	status,2,c
  9145  002358  D005               	goto	l3283
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;newmain.c: 474: {
  9149                           ;newmain.c: 475: return keypad[rowloc][2];
  9150  00235A  0100               	movlb	0	; () banked
  9151  00235C  51F1               	movf	_rowloc& (0+255),w,b
  9152  00235E  0D04               	mullw	4
  9153  002360  0E02               	movlw	2
  9154  002362  D009               	goto	L8
  9155  002364                     l3283:
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;newmain.c: 477: else
  9159                           ;newmain.c: 478: if(col_loc==0x70)
  9160  002364  0E70               	movlw	112
  9161  002366  0100               	movlb	0	; () banked
  9162  002368  19F0               	xorwf	_col_loc& (0+255),w,b
  9163  00236A  A4D8               	btfss	status,2,c
  9164  00236C  D7D7               	goto	l3259
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;newmain.c: 479: {
  9168                           ;newmain.c: 480: return keypad[rowloc][3];
  9169  00236E  0100               	movlb	0	; () banked
  9170  002370  51F1               	movf	_rowloc& (0+255),w,b
  9171  002372  0D04               	mullw	4
  9172  002374  0E03               	movlw	3
  9173  002376                     L8:
  9174  002376  26F3               	addwf	prodl,f,c
  9175  002378  0E00               	movlw	0
  9176  00237A  22F4               	addwfc	prodh,f,c
  9177  00237C  D7D7               	goto	L6
  9178  00237E                     __end_of_keyfind:
  9179                           	opt stack 0
  9180                           tblptru	equ	0xFF8
  9181                           tblptrh	equ	0xFF7
  9182                           tblptrl	equ	0xFF6
  9183                           tablat	equ	0xFF5
  9184                           prodh	equ	0xFF4
  9185                           prodl	equ	0xFF3
  9186                           intcon2	equ	0xFF1
  9187                           postinc0	equ	0xFEE
  9188                           wreg	equ	0xFE8
  9189                           postdec1	equ	0xFE5
  9190                           plusw1	equ	0xFE3
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           plusw2	equ	0xFDB
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8
  9199                           
  9200 ;; *************** function _LCD_String *****************
  9201 ;; Defined at:
  9202 ;;		line 374 in file "newmain.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  msg             2    8[BANK0 ] PTR const unsigned char 
  9205 ;;		 -> STR_18(17), STR_17(17), STR_16(21), STR_15(17), 
  9206 ;;		 -> STR_14(21), STR_13(17), STR_12(24), STR_11(20), 
  9207 ;;		 -> STR_10(31), STR_9(30), STR_8(21), STR_7(22), 
  9208 ;;		 -> STR_6(28), STR_5(26), STR_4(25), buffer(50), 
  9209 ;;		 -> STR_2(26), STR_1(26), 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9221 ;;      Params:         0       2       0       0       0       0       0       0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9224 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9225 ;;Total ram usage:        2 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    5
  9228 ;; This function calls:
  9229 ;;		_LCD_Char
  9230 ;; This function is called by:
  9231 ;;		_main
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           	psect	text23
  9236  002DA8                     __ptext23:
  9237                           	opt stack 0
  9238  002DA8                     _LCD_String:
  9239                           	opt stack 25
  9240                           
  9241                           ;newmain.c: 376: while((*msg)!=0)
  9242                           
  9243                           ;incstack = 0
  9244  002DA8  D015               	goto	l3209
  9245  002DAA                     l3205:
  9246                           
  9247                           ;newmain.c: 377: {
  9248                           ;newmain.c: 378: LCD_Char(*msg);
  9249  002DAA  C068  FFF6         	movff	LCD_String@msg,tblptrl
  9250  002DAE  C069  FFF7         	movff	LCD_String@msg+1,tblptrh
  9251  002DB2  6AF8               	clrf	tblptru,c
  9252  002DB4  0E07               	movlw	(high __ramtop+-1)
  9253  002DB6  64F7               	cpfsgt	tblptrh,c
  9254  002DB8  D003               	bra	u3347
  9255  002DBA  0008               	tblrd		*
  9256  002DBC  50F5               	movf	tablat,w,c
  9257  002DBE  D005               	bra	u3340
  9258  002DC0                     u3347:
  9259  002DC0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9260  002DC4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9261  002DC8  50EF               	movf	indf0,w,c
  9262  002DCA                     u3340:
  9263  002DCA  EC4F  F016         	call	_LCD_Char
  9264                           
  9265                           ;newmain.c: 379: msg++;
  9266  002DCE  0100               	movlb	0	; () banked
  9267  002DD0  4B68               	infsnz	LCD_String@msg& (0+255),f,b
  9268  002DD2  2B69               	incf	(LCD_String@msg+1)& (0+255),f,b
  9269  002DD4                     l3209:
  9270  002DD4  C068  FFF6         	movff	LCD_String@msg,tblptrl
  9271  002DD8  C069  FFF7         	movff	LCD_String@msg+1,tblptrh
  9272  002DDC  6AF8               	clrf	tblptru,c
  9273  002DDE  0E07               	movlw	(high __ramtop+-1)
  9274  002DE0  64F7               	cpfsgt	tblptrh,c
  9275  002DE2  D003               	bra	u3357
  9276  002DE4  0008               	tblrd		*
  9277  002DE6  50F5               	movf	tablat,w,c
  9278  002DE8  D005               	bra	u3350
  9279  002DEA                     u3357:
  9280  002DEA  CFF6 FFE9          	movff	tblptrl,fsr0l
  9281  002DEE  CFF7 FFEA          	movff	tblptrh,fsr0h
  9282  002DF2  50EF               	movf	indf0,w,c
  9283  002DF4                     u3350:
  9284  002DF4  0900               	iorlw	0
  9285  002DF6  B4D8               	btfsc	status,2,c
  9286  002DF8  0012               	return	
  9287  002DFA  D7D7               	goto	l3205
  9288  002DFC                     __end_of_LCD_String:
  9289                           	opt stack 0
  9290                           tblptru	equ	0xFF8
  9291                           tblptrh	equ	0xFF7
  9292                           tblptrl	equ	0xFF6
  9293                           tablat	equ	0xFF5
  9294                           prodh	equ	0xFF4
  9295                           prodl	equ	0xFF3
  9296                           intcon2	equ	0xFF1
  9297                           indf0	equ	0xFEF
  9298                           postinc0	equ	0xFEE
  9299                           fsr0h	equ	0xFEA
  9300                           fsr0l	equ	0xFE9
  9301                           wreg	equ	0xFE8
  9302                           postdec1	equ	0xFE5
  9303                           plusw1	equ	0xFE3
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function _LCD_Char *****************
  9314 ;; Defined at:
  9315 ;;		line 358 in file "newmain.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  dat             1    wreg     unsigned char 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  dat             1    7[BANK0 ] unsigned char 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  1    wreg      void 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0, cstack
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9329 ;;      Params:         0       0       0       0       0       0       0       0       0
  9330 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9331 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9332 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9333 ;;Total ram usage:        2 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		_MSdelay
  9338 ;; This function is called by:
  9339 ;;		_main
  9340 ;;		_LCD_String
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text24
  9345  002C9E                     __ptext24:
  9346                           	opt stack 0
  9347  002C9E                     _LCD_Char:
  9348                           	opt stack 25
  9349                           
  9350                           ;incstack = 0
  9351                           ;LCD_Char@dat stored from wreg
  9352  002C9E  0100               	movlb	0	; () banked
  9353  002CA0  6F67               	movwf	LCD_Char@dat& (0+255),b
  9354                           
  9355                           ;newmain.c: 360: LATD = (LATD & 0x0f) | (0xF0 & dat);
  9356  002CA2  C067  F066         	movff	LCD_Char@dat,??_LCD_Char
  9357  002CA6  0EF0               	movlw	240
  9358  002CA8  0100               	movlb	0	; () banked
  9359  002CAA  1766               	andwf	??_LCD_Char& (0+255),f,b
  9360  002CAC  508C               	movf	3980,w,c	;volatile
  9361  002CAE  0B0F               	andlw	15
  9362  002CB0  0100               	movlb	0	; () banked
  9363  002CB2  1166               	iorwf	??_LCD_Char& (0+255),w,b
  9364  002CB4  6E8C               	movwf	3980,c	;volatile
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;newmain.c: 361: LATD0 = 1;
  9368  002CB6  808C               	bsf	3980,0,c	;volatile
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;newmain.c: 362: LATD1 = 1;
  9372  002CB8  828C               	bsf	3980,1,c	;volatile
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;newmain.c: 363: __nop();
  9376  002CBA  F000               	nop	
  9377                           
  9378                           ;newmain.c: 364: LATD1 = 0;
  9379  002CBC  928C               	bcf	3980,1,c	;volatile
  9380                           
  9381                           ;newmain.c: 365: MSdelay(1);
  9382  002CBE  0E00               	movlw	0
  9383  002CC0  0100               	movlb	0	; () banked
  9384  002CC2  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9385  002CC4  0E01               	movlw	1
  9386  002CC6  6F60               	movwf	MSdelay@val& (0+255),b
  9387  002CC8  EC24  F017         	call	_MSdelay	;wreg free
  9388                           
  9389                           ;newmain.c: 366: LATD = (LATD & 0x0f) | (dat<<4);
  9390  002CCC  C067  F066         	movff	LCD_Char@dat,??_LCD_Char
  9391  002CD0  0100               	movlb	0	; () banked
  9392  002CD2  3B66               	swapf	??_LCD_Char& (0+255),f,b
  9393  002CD4  0EF0               	movlw	240
  9394  002CD6  1766               	andwf	??_LCD_Char& (0+255),f,b
  9395  002CD8  508C               	movf	3980,w,c	;volatile
  9396  002CDA  0B0F               	andlw	15
  9397  002CDC  0100               	movlb	0	; () banked
  9398  002CDE  1166               	iorwf	??_LCD_Char& (0+255),w,b
  9399  002CE0  6E8C               	movwf	3980,c	;volatile
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;newmain.c: 367: LATD1 = 1;
  9403  002CE2  828C               	bsf	3980,1,c	;volatile
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;newmain.c: 368: __nop();
  9407  002CE4  F000               	nop	
  9408                           
  9409                           ;newmain.c: 369: LATD1 = 0;
  9410  002CE6  928C               	bcf	3980,1,c	;volatile
  9411                           
  9412                           ;newmain.c: 370: MSdelay(3);
  9413  002CE8  0E00               	movlw	0
  9414  002CEA  0100               	movlb	0	; () banked
  9415  002CEC  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9416  002CEE  0E03               	movlw	3
  9417  002CF0  6F60               	movwf	MSdelay@val& (0+255),b
  9418  002CF2  EC24  F017         	call	_MSdelay	;wreg free
  9419  002CF6  0012               	return		;funcret
  9420  002CF8                     __end_of_LCD_Char:
  9421                           	opt stack 0
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon2	equ	0xFF1
  9429                           indf0	equ	0xFEF
  9430                           postinc0	equ	0xFEE
  9431                           fsr0h	equ	0xFEA
  9432                           fsr0l	equ	0xFE9
  9433                           wreg	equ	0xFE8
  9434                           postdec1	equ	0xFE5
  9435                           plusw1	equ	0xFE3
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           postdec2	equ	0xFDD
  9440                           plusw2	equ	0xFDB
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _LCD_Init *****************
  9446 ;; Defined at:
  9447 ;;		line 330 in file "newmain.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    5
  9468 ;; This function calls:
  9469 ;;		_LCD_Command
  9470 ;;		_MSdelay
  9471 ;; This function is called by:
  9472 ;;		_main
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text25
  9477  002F34                     __ptext25:
  9478                           	opt stack 0
  9479  002F34                     _LCD_Init:
  9480                           	opt stack 25
  9481                           
  9482                           ;newmain.c: 332: TRISD = 0;
  9483                           
  9484                           ;incstack = 0
  9485  002F34  0E00               	movlw	0
  9486  002F36  6E95               	movwf	3989,c	;volatile
  9487                           
  9488                           ;newmain.c: 333: MSdelay(15);
  9489  002F38  0E00               	movlw	0
  9490  002F3A  0100               	movlb	0	; () banked
  9491  002F3C  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9492  002F3E  0E0F               	movlw	15
  9493  002F40  6F60               	movwf	MSdelay@val& (0+255),b
  9494  002F42  EC24  F017         	call	_MSdelay	;wreg free
  9495                           
  9496                           ;newmain.c: 334: LCD_Command(0x02);
  9497  002F46  0E02               	movlw	2
  9498  002F48  EC7C  F016         	call	_LCD_Command
  9499                           
  9500                           ;newmain.c: 335: LCD_Command(0x28);
  9501  002F4C  0E28               	movlw	40
  9502  002F4E  EC7C  F016         	call	_LCD_Command
  9503                           
  9504                           ;newmain.c: 336: LCD_Command(0x01);
  9505  002F52  0E01               	movlw	1
  9506  002F54  EC7C  F016         	call	_LCD_Command
  9507                           
  9508                           ;newmain.c: 337: LCD_Command(0x0c);
  9509  002F58  0E0C               	movlw	12
  9510  002F5A  EC7C  F016         	call	_LCD_Command
  9511                           
  9512                           ;newmain.c: 338: LCD_Command(0x06);
  9513  002F5E  0E06               	movlw	6
  9514  002F60  EC7C  F016         	call	_LCD_Command
  9515  002F64  0012               	return		;funcret
  9516  002F66                     __end_of_LCD_Init:
  9517                           	opt stack 0
  9518                           tblptru	equ	0xFF8
  9519                           tblptrh	equ	0xFF7
  9520                           tblptrl	equ	0xFF6
  9521                           tablat	equ	0xFF5
  9522                           prodh	equ	0xFF4
  9523                           prodl	equ	0xFF3
  9524                           intcon2	equ	0xFF1
  9525                           indf0	equ	0xFEF
  9526                           postinc0	equ	0xFEE
  9527                           fsr0h	equ	0xFEA
  9528                           fsr0l	equ	0xFE9
  9529                           wreg	equ	0xFE8
  9530                           postdec1	equ	0xFE5
  9531                           plusw1	equ	0xFE3
  9532                           fsr1l	equ	0xFE1
  9533                           indf2	equ	0xFDF
  9534                           postinc2	equ	0xFDE
  9535                           postdec2	equ	0xFDD
  9536                           plusw2	equ	0xFDB
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _LCD_Clear *****************
  9542 ;; Defined at:
  9543 ;;		line 384 in file "newmain.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;		None
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;		None
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      void 
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0
  9558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9560 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9561 ;;Total ram usage:        0 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    5
  9564 ;; This function calls:
  9565 ;;		_LCD_Command
  9566 ;; This function is called by:
  9567 ;;		_main
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text26
  9572  002FF2                     __ptext26:
  9573                           	opt stack 0
  9574  002FF2                     _LCD_Clear:
  9575                           	opt stack 25
  9576                           
  9577                           ;newmain.c: 386: LCD_Command(0x01);
  9578                           
  9579                           ;incstack = 0
  9580  002FF2  0E01               	movlw	1
  9581  002FF4  EC7C  F016         	call	_LCD_Command
  9582  002FF8  0012               	return		;funcret
  9583  002FFA                     __end_of_LCD_Clear:
  9584                           	opt stack 0
  9585                           tblptru	equ	0xFF8
  9586                           tblptrh	equ	0xFF7
  9587                           tblptrl	equ	0xFF6
  9588                           tablat	equ	0xFF5
  9589                           prodh	equ	0xFF4
  9590                           prodl	equ	0xFF3
  9591                           intcon2	equ	0xFF1
  9592                           indf0	equ	0xFEF
  9593                           postinc0	equ	0xFEE
  9594                           fsr0h	equ	0xFEA
  9595                           fsr0l	equ	0xFE9
  9596                           wreg	equ	0xFE8
  9597                           postdec1	equ	0xFE5
  9598                           plusw1	equ	0xFE3
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           postdec2	equ	0xFDD
  9603                           plusw2	equ	0xFDB
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _LCD_Command *****************
  9609 ;; Defined at:
  9610 ;;		line 342 in file "newmain.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  cmd             1    wreg     unsigned char 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  cmd             1    7[BANK0 ] unsigned char 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  1    wreg      void 
  9617 ;; Registers used:
  9618 ;;		wreg, status,2, status,0, cstack
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9624 ;;      Params:         0       0       0       0       0       0       0       0       0
  9625 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9626 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9627 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9628 ;;Total ram usage:        2 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    4
  9631 ;; This function calls:
  9632 ;;		_MSdelay
  9633 ;; This function is called by:
  9634 ;;		_main
  9635 ;;		_LCD_Init
  9636 ;;		_LCD_Clear
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           	psect	text27
  9641  002CF8                     __ptext27:
  9642                           	opt stack 0
  9643  002CF8                     _LCD_Command:
  9644                           	opt stack 25
  9645                           
  9646                           ;incstack = 0
  9647                           ;LCD_Command@cmd stored from wreg
  9648  002CF8  0100               	movlb	0	; () banked
  9649  002CFA  6F67               	movwf	LCD_Command@cmd& (0+255),b
  9650                           
  9651                           ;newmain.c: 344: LATD = (LATD & 0x0f) |(0xF0 & cmd);
  9652  002CFC  C067  F066         	movff	LCD_Command@cmd,??_LCD_Command
  9653  002D00  0EF0               	movlw	240
  9654  002D02  0100               	movlb	0	; () banked
  9655  002D04  1766               	andwf	??_LCD_Command& (0+255),f,b
  9656  002D06  508C               	movf	3980,w,c	;volatile
  9657  002D08  0B0F               	andlw	15
  9658  002D0A  0100               	movlb	0	; () banked
  9659  002D0C  1166               	iorwf	??_LCD_Command& (0+255),w,b
  9660  002D0E  6E8C               	movwf	3980,c	;volatile
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;newmain.c: 345: LATD0 = 0;
  9664  002D10  908C               	bcf	3980,0,c	;volatile
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;newmain.c: 346: LATD1 = 1;
  9668  002D12  828C               	bsf	3980,1,c	;volatile
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;newmain.c: 347: __nop();
  9672  002D14  F000               	nop	
  9673                           
  9674                           ;newmain.c: 348: LATD1 = 0;
  9675  002D16  928C               	bcf	3980,1,c	;volatile
  9676                           
  9677                           ;newmain.c: 349: MSdelay(1);
  9678  002D18  0E00               	movlw	0
  9679  002D1A  0100               	movlb	0	; () banked
  9680  002D1C  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9681  002D1E  0E01               	movlw	1
  9682  002D20  6F60               	movwf	MSdelay@val& (0+255),b
  9683  002D22  EC24  F017         	call	_MSdelay	;wreg free
  9684                           
  9685                           ;newmain.c: 350: LATD = (LATD & 0x0f) | (cmd<<4);
  9686  002D26  C067  F066         	movff	LCD_Command@cmd,??_LCD_Command
  9687  002D2A  0100               	movlb	0	; () banked
  9688  002D2C  3B66               	swapf	??_LCD_Command& (0+255),f,b
  9689  002D2E  0EF0               	movlw	240
  9690  002D30  1766               	andwf	??_LCD_Command& (0+255),f,b
  9691  002D32  508C               	movf	3980,w,c	;volatile
  9692  002D34  0B0F               	andlw	15
  9693  002D36  0100               	movlb	0	; () banked
  9694  002D38  1166               	iorwf	??_LCD_Command& (0+255),w,b
  9695  002D3A  6E8C               	movwf	3980,c	;volatile
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;newmain.c: 351: LATD1 = 1;
  9699  002D3C  828C               	bsf	3980,1,c	;volatile
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;newmain.c: 352: __nop();
  9703  002D3E  F000               	nop	
  9704                           
  9705                           ;newmain.c: 353: LATD1 = 0;
  9706  002D40  928C               	bcf	3980,1,c	;volatile
  9707                           
  9708                           ;newmain.c: 354: MSdelay(3);
  9709  002D42  0E00               	movlw	0
  9710  002D44  0100               	movlb	0	; () banked
  9711  002D46  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9712  002D48  0E03               	movlw	3
  9713  002D4A  6F60               	movwf	MSdelay@val& (0+255),b
  9714  002D4C  EC24  F017         	call	_MSdelay	;wreg free
  9715  002D50  0012               	return		;funcret
  9716  002D52                     __end_of_LCD_Command:
  9717                           	opt stack 0
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon2	equ	0xFF1
  9725                           indf0	equ	0xFEF
  9726                           postinc0	equ	0xFEE
  9727                           fsr0h	equ	0xFEA
  9728                           fsr0l	equ	0xFE9
  9729                           wreg	equ	0xFE8
  9730                           postdec1	equ	0xFE5
  9731                           plusw1	equ	0xFE3
  9732                           fsr1l	equ	0xFE1
  9733                           indf2	equ	0xFDF
  9734                           postinc2	equ	0xFDE
  9735                           postdec2	equ	0xFDD
  9736                           plusw2	equ	0xFDB
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function _MSdelay *****************
  9742 ;; Defined at:
  9743 ;;		line 390 in file "newmain.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  val             2    0[BANK0 ] unsigned int 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  j               2    4[BANK0 ] unsigned int 
  9748 ;;  i               2    2[BANK0 ] unsigned int 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9758 ;;      Params:         0       2       0       0       0       0       0       0       0
  9759 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9761 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9762 ;;Total ram usage:        6 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    3
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_main
  9769 ;;		_LCD_Init
  9770 ;;		_LCD_Command
  9771 ;;		_LCD_Char
  9772 ;;		_keyfind
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           	psect	text28
  9777  002E48                     __ptext28:
  9778                           	opt stack 0
  9779  002E48                     _MSdelay:
  9780                           	opt stack 26
  9781                           
  9782                           ;newmain.c: 392: unsigned int i,j;
  9783                           ;newmain.c: 393: for(i=0;i<=val;i++)
  9784                           
  9785                           ;incstack = 0
  9786  002E48  0E00               	movlw	0
  9787  002E4A  0100               	movlb	0	; () banked
  9788  002E4C  6F63               	movwf	(MSdelay@i+1)& (0+255),b
  9789  002E4E  0E00               	movlw	0
  9790  002E50  6F62               	movwf	MSdelay@i& (0+255),b
  9791  002E52  D014               	goto	l2579
  9792  002E54                     l2567:
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;newmain.c: 394: for(j=0;j<165;j++);
  9796  002E54  0E00               	movlw	0
  9797  002E56  0100               	movlb	0	; () banked
  9798  002E58  6F65               	movwf	(MSdelay@j+1)& (0+255),b
  9799  002E5A  0E00               	movlw	0
  9800  002E5C  6F64               	movwf	MSdelay@j& (0+255),b
  9801  002E5E                     l2569:
  9802                           
  9803                           ; BSR set to: 0
  9804  002E5E  0100               	movlb	0	; () banked
  9805  002E60  5165               	movf	(MSdelay@j+1)& (0+255),w,b
  9806  002E62  E109               	bnz	l2577
  9807  002E64  0EA5               	movlw	165
  9808  002E66  0100               	movlb	0	; () banked
  9809  002E68  5D64               	subwf	MSdelay@j& (0+255),w,b
  9810  002E6A  B0D8               	btfsc	status,0,c
  9811  002E6C  D004               	goto	l2577
  9812                           
  9813                           ; BSR set to: 0
  9814                           
  9815                           ; BSR set to: 0
  9816                           
  9817                           ; BSR set to: 0
  9818  002E6E  0100               	movlb	0	; () banked
  9819  002E70  4B64               	infsnz	MSdelay@j& (0+255),f,b
  9820  002E72  2B65               	incf	(MSdelay@j+1)& (0+255),f,b
  9821  002E74  D7F4               	goto	l2569
  9822  002E76                     l2577:
  9823                           
  9824                           ; BSR set to: 0
  9825  002E76  0100               	movlb	0	; () banked
  9826  002E78  4B62               	infsnz	MSdelay@i& (0+255),f,b
  9827  002E7A  2B63               	incf	(MSdelay@i+1)& (0+255),f,b
  9828  002E7C                     l2579:
  9829                           
  9830                           ; BSR set to: 0
  9831  002E7C  0100               	movlb	0	; () banked
  9832  002E7E  5162               	movf	MSdelay@i& (0+255),w,b
  9833  002E80  0100               	movlb	0	; () banked
  9834  002E82  5D60               	subwf	MSdelay@val& (0+255),w,b
  9835  002E84  0100               	movlb	0	; () banked
  9836  002E86  5163               	movf	(MSdelay@i+1)& (0+255),w,b
  9837  002E88  0100               	movlb	0	; () banked
  9838  002E8A  5961               	subwfb	(MSdelay@val+1)& (0+255),w,b
  9839  002E8C  A0D8               	btfss	status,0,c
  9840  002E8E  0012               	return	
  9841  002E90  D7E1               	goto	l2567
  9842  002E92                     __end_of_MSdelay:
  9843                           	opt stack 0
  9844                           tblptru	equ	0xFF8
  9845                           tblptrh	equ	0xFF7
  9846                           tblptrl	equ	0xFF6
  9847                           tablat	equ	0xFF5
  9848                           prodh	equ	0xFF4
  9849                           prodl	equ	0xFF3
  9850                           intcon2	equ	0xFF1
  9851                           indf0	equ	0xFEF
  9852                           postinc0	equ	0xFEE
  9853                           fsr0h	equ	0xFEA
  9854                           fsr0l	equ	0xFE9
  9855                           wreg	equ	0xFE8
  9856                           postdec1	equ	0xFE5
  9857                           plusw1	equ	0xFE3
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           plusw2	equ	0xFDB
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function _ADC_Interrupt_Init *****************
  9868 ;; Defined at:
  9869 ;;		line 315 in file "newmain.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;		None
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;		None
  9874 ;; Return value:  Size  Location     Type
  9875 ;;                  1    wreg      void 
  9876 ;; Registers used:
  9877 ;;		wreg, status,2
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9883 ;;      Params:         0       0       0       0       0       0       0       0       0
  9884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9886 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9887 ;;Total ram usage:        0 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    3
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_main
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text29
  9898  002FC0                     __ptext29:
  9899                           	opt stack 0
  9900  002FC0                     _ADC_Interrupt_Init:
  9901                           	opt stack 27
  9902                           
  9903                           ;newmain.c: 316: ADCON0 = 0;
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;incstack = 0
  9907  002FC0  0E00               	movlw	0
  9908  002FC2  6EC2               	movwf	4034,c	;volatile
  9909                           
  9910                           ;newmain.c: 317: ADCON1 = 0x0e;
  9911  002FC4  0E0E               	movlw	14
  9912  002FC6  6EC1               	movwf	4033,c	;volatile
  9913                           
  9914                           ;newmain.c: 318: ADCON2 = 0x92;
  9915  002FC8  0E92               	movlw	146
  9916  002FCA  6EC0               	movwf	4032,c	;volatile
  9917                           
  9918                           ;newmain.c: 319: ADRESH = 0;
  9919  002FCC  0E00               	movlw	0
  9920  002FCE  6EC4               	movwf	4036,c	;volatile
  9921                           
  9922                           ;newmain.c: 320: ADRESL = 0;
  9923  002FD0  0E00               	movlw	0
  9924  002FD2  6EC3               	movwf	4035,c	;volatile
  9925                           
  9926                           ;newmain.c: 321: PIR1bits.ADIF=0;
  9927  002FD4  9C9E               	bcf	3998,6,c	;volatile
  9928                           
  9929                           ;newmain.c: 322: PIE1bits.ADIE=1;
  9930  002FD6  8C9D               	bsf	3997,6,c	;volatile
  9931                           
  9932                           ;newmain.c: 324: INTCONbits.PEIE=1;
  9933  002FD8  8CF2               	bsf	intcon,6,c	;volatile
  9934                           
  9935                           ;newmain.c: 325: INTCONbits.GIE=1;
  9936  002FDA  8EF2               	bsf	intcon,7,c	;volatile
  9937                           
  9938                           ;newmain.c: 326: ADCON0bits.ADON = 1;
  9939  002FDC  80C2               	bsf	4034,0,c	;volatile
  9940                           
  9941                           ;newmain.c: 327: ADCON0bits.GO = 1;
  9942  002FDE  82C2               	bsf	4034,1,c	;volatile
  9943  002FE0  0012               	return		;funcret
  9944  002FE2                     __end_of_ADC_Interrupt_Init:
  9945                           	opt stack 0
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           prodh	equ	0xFF4
  9951                           prodl	equ	0xFF3
  9952                           intcon	equ	0xFF2
  9953                           intcon2	equ	0xFF1
  9954                           indf0	equ	0xFEF
  9955                           postinc0	equ	0xFEE
  9956                           fsr0h	equ	0xFEA
  9957                           fsr0l	equ	0xFE9
  9958                           wreg	equ	0xFE8
  9959                           postdec1	equ	0xFE5
  9960                           plusw1	equ	0xFE3
  9961                           fsr1l	equ	0xFE1
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           plusw2	equ	0xFDB
  9966                           fsr2h	equ	0xFDA
  9967                           fsr2l	equ	0xFD9
  9968                           status	equ	0xFD8
  9969                           
  9970 ;; *************** function _ADC_ISR *****************
  9971 ;; Defined at:
  9972 ;;		line 119 in file "newmain.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      void 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0
  9987 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9988 ;;      Temps:         16       0       0       0       0       0       0       0       0
  9989 ;;      Totals:        19       0       0       0       0       0       0       0       0
  9990 ;;Total ram usage:       19 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    2
  9993 ;; This function calls:
  9994 ;;		___awtoft
  9995 ;;		___ftdiv
  9996 ;;		i2___ftadd
  9997 ;;		i2___ftmul
  9998 ;; This function is called by:
  9999 ;;		Interrupt level 2
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           	psect	intcode
 10004  000008                     __pintcode:
 10005                           	opt stack 0
 10006  000008                     _ADC_ISR:
 10007                           	opt stack 24
 10008                           
 10009                           ;incstack = 0
 10010  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10011  00000A  EDBF  F011         	call	int_func,f	;refresh shadow registers
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           intcon2	equ	0xFF1
 10020                           indf0	equ	0xFEF
 10021                           postinc0	equ	0xFEE
 10022                           fsr0h	equ	0xFEA
 10023                           fsr0l	equ	0xFE9
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           plusw1	equ	0xFE3
 10027                           fsr1l	equ	0xFE1
 10028                           indf2	equ	0xFDF
 10029                           postinc2	equ	0xFDE
 10030                           postdec2	equ	0xFDD
 10031                           plusw2	equ	0xFDB
 10032                           fsr2h	equ	0xFDA
 10033                           fsr2l	equ	0xFD9
 10034                           status	equ	0xFD8
 10035                           
 10036                           	psect	intcode_body
 10037  00237E                     __pintcode_body:
 10038                           	opt stack 24
 10039  00237E                     int_func:
 10040                           	opt stack 24
 10041  00237E  0006               	pop		; remove dummy address from shadow register refresh
 10042  002380  CFFA F035          	movff	pclath,??_ADC_ISR+2
 10043  002384  CFFB F036          	movff	pclatu,??_ADC_ISR+3
 10044  002388  CFE9 F037          	movff	fsr0l,??_ADC_ISR+4
 10045  00238C  CFEA F038          	movff	fsr0h,??_ADC_ISR+5
 10046  002390  CFE1 F039          	movff	fsr1l,??_ADC_ISR+6
 10047  002394  CFE2 F03A          	movff	fsr1h,??_ADC_ISR+7
 10048  002398  CFD9 F03B          	movff	fsr2l,??_ADC_ISR+8
 10049  00239C  CFDA F03C          	movff	fsr2h,??_ADC_ISR+9
 10050  0023A0  CFF3 F03D          	movff	prodl,??_ADC_ISR+10
 10051  0023A4  CFF4 F03E          	movff	prodh,??_ADC_ISR+11
 10052  0023A8  CFF6 F03F          	movff	tblptrl,??_ADC_ISR+12
 10053  0023AC  CFF7 F040          	movff	tblptrh,??_ADC_ISR+13
 10054  0023B0  CFF8 F041          	movff	tblptru,??_ADC_ISR+14
 10055  0023B4  CFF5 F042          	movff	tablat,??_ADC_ISR+15
 10056                           
 10057                           ;newmain.c: 120: value_adc=(ADRESH*256) | (ADRESL);
 10058  0023B8  50C3               	movf	4035,w,c	;volatile
 10059  0023BA  CFC4 F033          	movff	4036,??_ADC_ISR	;volatile
 10060  0023BE  6A34               	clrf	(??_ADC_ISR+1)& (0+255),c
 10061  0023C0  C033  F034         	movff	??_ADC_ISR,??_ADC_ISR+1
 10062  0023C4  6A33               	clrf	??_ADC_ISR,c
 10063  0023C6  1033               	iorwf	??_ADC_ISR,w,c
 10064  0023C8  6E09               	movwf	___awtoft@c,c
 10065  0023CA  5034               	movf	??_ADC_ISR+1,w,c
 10066  0023CC  6E0A               	movwf	___awtoft@c+1,c
 10067  0023CE  EC49  F017         	call	___awtoft	;wreg free
 10068  0023D2  C009  F056         	movff	?___awtoft,_value_adc
 10069  0023D6  C00A  F057         	movff	?___awtoft+1,_value_adc+1
 10070  0023DA  C00B  F058         	movff	?___awtoft+2,_value_adc+2
 10071                           
 10072                           ;newmain.c: 121: tempurture = (5*(float)(value_adc)*1000.0/1024 - 500.0)/10.0;
 10073  0023DE  0E00               	movlw	0
 10074  0023E0  6E2A               	movwf	i2___ftadd@f2,c
 10075  0023E2  0EFA               	movlw	250
 10076  0023E4  6E2B               	movwf	i2___ftadd@f2+1,c
 10077  0023E6  0EC3               	movlw	195
 10078  0023E8  6E2C               	movwf	i2___ftadd@f2+2,c
 10079  0023EA  0E00               	movlw	0
 10080  0023EC  6E1B               	movwf	___ftdiv@f2,c
 10081  0023EE  0E80               	movlw	128
 10082  0023F0  6E1C               	movwf	___ftdiv@f2+1,c
 10083  0023F2  0E44               	movlw	68
 10084  0023F4  6E1D               	movwf	___ftdiv@f2+2,c
 10085  0023F6  0E40               	movlw	64
 10086  0023F8  6E0C               	movwf	i2___ftmul@f2,c
 10087  0023FA  0E9C               	movlw	156
 10088  0023FC  6E0D               	movwf	i2___ftmul@f2+1,c
 10089  0023FE  0E45               	movlw	69
 10090  002400  6E0E               	movwf	i2___ftmul@f2+2,c
 10091  002402  C056  F009         	movff	_value_adc,i2___ftmul@f1
 10092  002406  C057  F00A         	movff	_value_adc+1,i2___ftmul@f1+1
 10093  00240A  C058  F00B         	movff	_value_adc+2,i2___ftmul@f1+2
 10094  00240E  ECD8  F012         	call	i2___ftmul	;wreg free
 10095  002412  C009  F018         	movff	?i2___ftmul,___ftdiv@f1
 10096  002416  C00A  F019         	movff	?i2___ftmul+1,___ftdiv@f1+1
 10097  00241A  C00B  F01A         	movff	?i2___ftmul+2,___ftdiv@f1+2
 10098  00241E  EC52  F013         	call	___ftdiv	;wreg free
 10099  002422  C018  F027         	movff	?___ftdiv,i2___ftadd@f1
 10100  002426  C019  F028         	movff	?___ftdiv+1,i2___ftadd@f1+1
 10101  00242A  C01A  F029         	movff	?___ftdiv+2,i2___ftadd@f1+2
 10102  00242E  EC67  F00D         	call	i2___ftadd	;wreg free
 10103  002432  C027  F043         	movff	?i2___ftadd,_ADC_ISR$1155
 10104  002436  C028  F044         	movff	?i2___ftadd+1,_ADC_ISR$1155+1
 10105  00243A  C029  F045         	movff	?i2___ftadd+2,_ADC_ISR$1155+2
 10106                           
 10107                           ;newmain.c: 121: tempurture = (5*(float)(value_adc)*1000.0/1024 - 500.0)/10.0;
 10108  00243E  C043  F018         	movff	_ADC_ISR$1155,___ftdiv@f1
 10109  002442  C044  F019         	movff	_ADC_ISR$1155+1,___ftdiv@f1+1
 10110  002446  C045  F01A         	movff	_ADC_ISR$1155+2,___ftdiv@f1+2
 10111  00244A  0E00               	movlw	0
 10112  00244C  6E1B               	movwf	___ftdiv@f2,c
 10113  00244E  0E20               	movlw	32
 10114  002450  6E1C               	movwf	___ftdiv@f2+1,c
 10115  002452  0E41               	movlw	65
 10116  002454  6E1D               	movwf	___ftdiv@f2+2,c
 10117  002456  EC52  F013         	call	___ftdiv	;wreg free
 10118  00245A  C018  F0ED         	movff	?___ftdiv,_tempurture
 10119  00245E  C019  F0EE         	movff	?___ftdiv+1,_tempurture+1
 10120  002462  C01A  F0EF         	movff	?___ftdiv+2,_tempurture+2
 10121                           
 10122                           ;newmain.c: 122: ADIF=0;
 10123  002466  9C9E               	bcf	3998,6,c	;volatile
 10124  002468  C042  FFF5         	movff	??_ADC_ISR+15,tablat
 10125  00246C  C041  FFF8         	movff	??_ADC_ISR+14,tblptru
 10126  002470  C040  FFF7         	movff	??_ADC_ISR+13,tblptrh
 10127  002474  C03F  FFF6         	movff	??_ADC_ISR+12,tblptrl
 10128  002478  C03E  FFF4         	movff	??_ADC_ISR+11,prodh
 10129  00247C  C03D  FFF3         	movff	??_ADC_ISR+10,prodl
 10130  002480  C03C  FFDA         	movff	??_ADC_ISR+9,fsr2h
 10131  002484  C03B  FFD9         	movff	??_ADC_ISR+8,fsr2l
 10132  002488  C03A  FFE2         	movff	??_ADC_ISR+7,fsr1h
 10133  00248C  C039  FFE1         	movff	??_ADC_ISR+6,fsr1l
 10134  002490  C038  FFEA         	movff	??_ADC_ISR+5,fsr0h
 10135  002494  C037  FFE9         	movff	??_ADC_ISR+4,fsr0l
 10136  002498  C036  FFFB         	movff	??_ADC_ISR+3,pclatu
 10137  00249C  C035  FFFA         	movff	??_ADC_ISR+2,pclath
 10138  0024A0  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10139  0024A2  0011               	retfie		f
 10140  0024A4                     __end_of_ADC_ISR:
 10141                           	opt stack 0
 10142                           pclatu	equ	0xFFB
 10143                           pclath	equ	0xFFA
 10144                           tblptru	equ	0xFF8
 10145                           tblptrh	equ	0xFF7
 10146                           tblptrl	equ	0xFF6
 10147                           tablat	equ	0xFF5
 10148                           prodh	equ	0xFF4
 10149                           prodl	equ	0xFF3
 10150                           intcon	equ	0xFF2
 10151                           intcon2	equ	0xFF1
 10152                           indf0	equ	0xFEF
 10153                           postinc0	equ	0xFEE
 10154                           fsr0h	equ	0xFEA
 10155                           fsr0l	equ	0xFE9
 10156                           wreg	equ	0xFE8
 10157                           postdec1	equ	0xFE5
 10158                           plusw1	equ	0xFE3
 10159                           fsr1h	equ	0xFE2
 10160                           fsr1l	equ	0xFE1
 10161                           indf2	equ	0xFDF
 10162                           postinc2	equ	0xFDE
 10163                           postdec2	equ	0xFDD
 10164                           plusw2	equ	0xFDB
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function i2___ftmul *****************
 10170 ;; Defined at:
 10171 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;  f1              3    8[COMRAM] float 
 10174 ;;  f2              3   11[COMRAM] float 
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  __ftmul         3   18[COMRAM] unsigned um
 10177 ;;  __ftmul         1   22[COMRAM] unsigned char 
 10178 ;;  __ftmul         1   21[COMRAM] unsigned char 
 10179 ;;  __ftmul         1   17[COMRAM] unsigned char 
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  3    8[COMRAM] float 
 10182 ;; Registers used:
 10183 ;;		wreg, status,2, status,0, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10189 ;;      Params:         6       0       0       0       0       0       0       0       0
 10190 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10191 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10192 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10193 ;;Total ram usage:       15 bytes
 10194 ;; Hardware stack levels used:    1
 10195 ;; Hardware stack levels required when called:    1
 10196 ;; This function calls:
 10197 ;;		i2___ftpack
 10198 ;; This function is called by:
 10199 ;;		_ADC_ISR
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text31
 10204  0025B0                     __ptext31:
 10205                           	opt stack 0
 10206  0025B0                     i2___ftmul:
 10207                           	opt stack 24
 10208                           
 10209                           ;incstack = 0
 10210  0025B0  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
 10211  0025B4  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 10212  0025B6  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 10213  0025B8  340A               	rlcf	i2___ftmul@f1+1,w,c
 10214  0025BA  360F               	rlcf	??i2___ftmul& (0+255),f,c
 10215  0025BC  E301               	bnc	u431_41
 10216  0025BE  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10217  0025C0                     u431_41:
 10218  0025C0  500F               	movf	??i2___ftmul,w,c
 10219  0025C2  6E12               	movwf	i2___ftmul@exp,c
 10220  0025C4  5012               	movf	i2___ftmul@exp,w,c
 10221  0025C6  A4D8               	btfss	status,2,c
 10222  0025C8  D007               	goto	i2l3745
 10223  0025CA  0E00               	movlw	0
 10224  0025CC  6E09               	movwf	?i2___ftmul,c
 10225  0025CE  0E00               	movlw	0
 10226  0025D0  6E0A               	movwf	?i2___ftmul+1,c
 10227  0025D2  0E00               	movlw	0
 10228  0025D4  6E0B               	movwf	?i2___ftmul+2,c
 10229  0025D6  0012               	return	
 10230  0025D8                     i2l3745:
 10231  0025D8  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
 10232  0025DC  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 10233  0025DE  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 10234  0025E0  340D               	rlcf	i2___ftmul@f2+1,w,c
 10235  0025E2  360F               	rlcf	??i2___ftmul& (0+255),f,c
 10236  0025E4  E301               	bnc	u433_41
 10237  0025E6  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10238  0025E8                     u433_41:
 10239  0025E8  500F               	movf	??i2___ftmul,w,c
 10240  0025EA  6E17               	movwf	i2___ftmul@sign,c
 10241  0025EC  5017               	movf	i2___ftmul@sign,w,c
 10242  0025EE  A4D8               	btfss	status,2,c
 10243  0025F0  D007               	goto	i2l3751
 10244  0025F2  0E00               	movlw	0
 10245  0025F4  6E09               	movwf	?i2___ftmul,c
 10246  0025F6  0E00               	movlw	0
 10247  0025F8  6E0A               	movwf	?i2___ftmul+1,c
 10248  0025FA  0E00               	movlw	0
 10249  0025FC  6E0B               	movwf	?i2___ftmul+2,c
 10250  0025FE  0012               	return	
 10251  002600                     i2l3751:
 10252  002600  5017               	movf	i2___ftmul@sign,w,c
 10253  002602  0F7B               	addlw	123
 10254  002604  2612               	addwf	i2___ftmul@exp,f,c
 10255  002606  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 10256  00260A  500E               	movf	i2___ftmul@f2+2,w,c
 10257  00260C  1A17               	xorwf	i2___ftmul@sign,f,c
 10258  00260E  0E80               	movlw	128
 10259  002610  1617               	andwf	i2___ftmul@sign,f,c
 10260  002612  8E0A               	bsf	i2___ftmul@f1+1,7,c
 10261  002614  8E0D               	bsf	i2___ftmul@f2+1,7,c
 10262  002616  0EFF               	movlw	255
 10263  002618  160C               	andwf	i2___ftmul@f2,f,c
 10264  00261A  0EFF               	movlw	255
 10265  00261C  160D               	andwf	i2___ftmul@f2+1,f,c
 10266  00261E  0E00               	movlw	0
 10267  002620  160E               	andwf	i2___ftmul@f2+2,f,c
 10268  002622  0E00               	movlw	0
 10269  002624  6E13               	movwf	i2___ftmul@f3_as_product,c
 10270  002626  0E00               	movlw	0
 10271  002628  6E14               	movwf	i2___ftmul@f3_as_product+1,c
 10272  00262A  0E00               	movlw	0
 10273  00262C  6E15               	movwf	i2___ftmul@f3_as_product+2,c
 10274  00262E  0E07               	movlw	7
 10275  002630  6E16               	movwf	i2___ftmul@cntr,c
 10276  002632                     i2l3765:
 10277  002632  A009               	btfss	i2___ftmul@f1,0,c
 10278  002634  D006               	goto	i2l3769
 10279  002636  500C               	movf	i2___ftmul@f2,w,c
 10280  002638  2613               	addwf	i2___ftmul@f3_as_product,f,c
 10281  00263A  500D               	movf	i2___ftmul@f2+1,w,c
 10282  00263C  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10283  00263E  500E               	movf	i2___ftmul@f2+2,w,c
 10284  002640  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10285  002642                     i2l3769:
 10286  002642  90D8               	bcf	status,0,c
 10287  002644  320B               	rrcf	i2___ftmul@f1+2,f,c
 10288  002646  320A               	rrcf	i2___ftmul@f1+1,f,c
 10289  002648  3209               	rrcf	i2___ftmul@f1,f,c
 10290  00264A  90D8               	bcf	status,0,c
 10291  00264C  360C               	rlcf	i2___ftmul@f2,f,c
 10292  00264E  360D               	rlcf	i2___ftmul@f2+1,f,c
 10293  002650  360E               	rlcf	i2___ftmul@f2+2,f,c
 10294  002652  2E16               	decfsz	i2___ftmul@cntr,f,c
 10295  002654  D7EE               	goto	i2l3765
 10296  002656  0E09               	movlw	9
 10297  002658  6E16               	movwf	i2___ftmul@cntr,c
 10298  00265A                     i2l3775:
 10299  00265A  A009               	btfss	i2___ftmul@f1,0,c
 10300  00265C  D006               	goto	i2l3779
 10301  00265E  500C               	movf	i2___ftmul@f2,w,c
 10302  002660  2613               	addwf	i2___ftmul@f3_as_product,f,c
 10303  002662  500D               	movf	i2___ftmul@f2+1,w,c
 10304  002664  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10305  002666  500E               	movf	i2___ftmul@f2+2,w,c
 10306  002668  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10307  00266A                     i2l3779:
 10308  00266A  90D8               	bcf	status,0,c
 10309  00266C  320B               	rrcf	i2___ftmul@f1+2,f,c
 10310  00266E  320A               	rrcf	i2___ftmul@f1+1,f,c
 10311  002670  3209               	rrcf	i2___ftmul@f1,f,c
 10312  002672  90D8               	bcf	status,0,c
 10313  002674  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
 10314  002676  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
 10315  002678  3213               	rrcf	i2___ftmul@f3_as_product,f,c
 10316  00267A  2E16               	decfsz	i2___ftmul@cntr,f,c
 10317  00267C  D7EE               	goto	i2l3775
 10318  00267E  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 10319  002682  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 10320  002686  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 10321  00268A  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 10322  00268E  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 10323  002692  ECE6  F014         	call	i2___ftpack	;wreg free
 10324  002696  C001  F009         	movff	?i2___ftpack,?i2___ftmul
 10325  00269A  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
 10326  00269E  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
 10327  0026A2  0012               	return	
 10328  0026A4                     __end_ofi2___ftmul:
 10329                           	opt stack 0
 10330                           pclatu	equ	0xFFB
 10331                           pclath	equ	0xFFA
 10332                           tblptru	equ	0xFF8
 10333                           tblptrh	equ	0xFF7
 10334                           tblptrl	equ	0xFF6
 10335                           tablat	equ	0xFF5
 10336                           prodh	equ	0xFF4
 10337                           prodl	equ	0xFF3
 10338                           intcon	equ	0xFF2
 10339                           intcon2	equ	0xFF1
 10340                           indf0	equ	0xFEF
 10341                           postinc0	equ	0xFEE
 10342                           fsr0h	equ	0xFEA
 10343                           fsr0l	equ	0xFE9
 10344                           wreg	equ	0xFE8
 10345                           postdec1	equ	0xFE5
 10346                           plusw1	equ	0xFE3
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           plusw2	equ	0xFDB
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function i2___ftadd *****************
 10358 ;; Defined at:
 10359 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  f1              3   38[COMRAM] float 
 10362 ;;  f2              3   41[COMRAM] float 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  __ftadd         1   49[COMRAM] unsigned char 
 10365 ;;  __ftadd         1   48[COMRAM] unsigned char 
 10366 ;;  __ftadd         1   47[COMRAM] unsigned char 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  3   38[COMRAM] float 
 10369 ;; Registers used:
 10370 ;;		wreg, status,2, status,0, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10376 ;;      Params:         6       0       0       0       0       0       0       0       0
 10377 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10378 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10379 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10380 ;;Total ram usage:       12 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    1
 10383 ;; This function calls:
 10384 ;;		i2___ftpack
 10385 ;; This function is called by:
 10386 ;;		_ADC_ISR
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           	psect	text32
 10391  001ACE                     __ptext32:
 10392                           	opt stack 0
 10393  001ACE                     i2___ftadd:
 10394                           	opt stack 24
 10395                           
 10396                           ;incstack = 0
 10397  001ACE  C029  F02D         	movff	i2___ftadd@f1+2,??i2___ftadd
 10398  001AD2  6A2E               	clrf	(??i2___ftadd+1)& (0+255),c
 10399  001AD4  6A2F               	clrf	(??i2___ftadd+2)& (0+255),c
 10400  001AD6  3428               	rlcf	i2___ftadd@f1+1,w,c
 10401  001AD8  362D               	rlcf	??i2___ftadd& (0+255),f,c
 10402  001ADA  E301               	bnc	u410_41
 10403  001ADC  802E               	bsf	(??i2___ftadd+1)& (0+255),0,c
 10404  001ADE                     u410_41:
 10405  001ADE  502D               	movf	??i2___ftadd,w,c
 10406  001AE0  6E32               	movwf	i2___ftadd@exp1,c
 10407  001AE2  C02C  F02D         	movff	i2___ftadd@f2+2,??i2___ftadd
 10408  001AE6  6A2E               	clrf	(??i2___ftadd+1)& (0+255),c
 10409  001AE8  6A2F               	clrf	(??i2___ftadd+2)& (0+255),c
 10410  001AEA  342B               	rlcf	i2___ftadd@f2+1,w,c
 10411  001AEC  362D               	rlcf	??i2___ftadd& (0+255),f,c
 10412  001AEE  E301               	bnc	u411_41
 10413  001AF0  802E               	bsf	(??i2___ftadd+1)& (0+255),0,c
 10414  001AF2                     u411_41:
 10415  001AF2  502D               	movf	??i2___ftadd,w,c
 10416  001AF4  6E31               	movwf	i2___ftadd@exp2,c
 10417  001AF6  5032               	movf	i2___ftadd@exp1,w,c
 10418  001AF8  B4D8               	btfsc	status,2,c
 10419  001AFA  D00B               	goto	i2l597
 10420  001AFC  5031               	movf	i2___ftadd@exp2,w,c
 10421  001AFE  5C32               	subwf	i2___ftadd@exp1,w,c
 10422  001B00  B0D8               	btfsc	status,0,c
 10423  001B02  D00E               	goto	i2l3677
 10424  001B04  5032               	movf	i2___ftadd@exp1,w,c
 10425  001B06  0800               	sublw	0
 10426  001B08  2431               	addwf	i2___ftadd@exp2,w,c
 10427  001B0A  6E2D               	movwf	??i2___ftadd& (0+255),c
 10428  001B0C  0E18               	movlw	24
 10429  001B0E  642D               	cpfsgt	??i2___ftadd,c
 10430  001B10  D007               	goto	i2l3677
 10431  001B12                     i2l597:
 10432  001B12  C02A  F027         	movff	i2___ftadd@f2,?i2___ftadd
 10433  001B16  C02B  F028         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 10434  001B1A  C02C  F029         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 10435  001B1E  0012               	return	
 10436  001B20                     i2l3677:
 10437  001B20  5031               	movf	i2___ftadd@exp2,w,c
 10438  001B22  B4D8               	btfsc	status,2,c
 10439  001B24  D00B               	goto	i2l601
 10440  001B26  5032               	movf	i2___ftadd@exp1,w,c
 10441  001B28  5C31               	subwf	i2___ftadd@exp2,w,c
 10442  001B2A  B0D8               	btfsc	status,0,c
 10443  001B2C  D00E               	goto	i2l3683
 10444  001B2E  5031               	movf	i2___ftadd@exp2,w,c
 10445  001B30  0800               	sublw	0
 10446  001B32  2432               	addwf	i2___ftadd@exp1,w,c
 10447  001B34  6E2D               	movwf	??i2___ftadd& (0+255),c
 10448  001B36  0E18               	movlw	24
 10449  001B38  642D               	cpfsgt	??i2___ftadd,c
 10450  001B3A  D007               	goto	i2l3683
 10451  001B3C                     i2l601:
 10452  001B3C  C027  F027         	movff	i2___ftadd@f1,?i2___ftadd
 10453  001B40  C028  F028         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 10454  001B44  C029  F029         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 10455  001B48  0012               	return	
 10456  001B4A                     i2l3683:
 10457  001B4A  0E06               	movlw	6
 10458  001B4C  6E30               	movwf	i2___ftadd@sign,c
 10459  001B4E  BE29               	btfsc	i2___ftadd@f1+2,7,c
 10460  001B50  8E30               	bsf	i2___ftadd@sign,7,c
 10461  001B52  BE2C               	btfsc	i2___ftadd@f2+2,7,c
 10462  001B54  8C30               	bsf	i2___ftadd@sign,6,c
 10463  001B56  8E28               	bsf	i2___ftadd@f1+1,7,c
 10464  001B58  0EFF               	movlw	255
 10465  001B5A  1627               	andwf	i2___ftadd@f1,f,c
 10466  001B5C  0EFF               	movlw	255
 10467  001B5E  1628               	andwf	i2___ftadd@f1+1,f,c
 10468  001B60  0E00               	movlw	0
 10469  001B62  1629               	andwf	i2___ftadd@f1+2,f,c
 10470  001B64  8E2B               	bsf	i2___ftadd@f2+1,7,c
 10471  001B66  0EFF               	movlw	255
 10472  001B68  162A               	andwf	i2___ftadd@f2,f,c
 10473  001B6A  0EFF               	movlw	255
 10474  001B6C  162B               	andwf	i2___ftadd@f2+1,f,c
 10475  001B6E  0E00               	movlw	0
 10476  001B70  162C               	andwf	i2___ftadd@f2+2,f,c
 10477  001B72  5031               	movf	i2___ftadd@exp2,w,c
 10478  001B74  5C32               	subwf	i2___ftadd@exp1,w,c
 10479  001B76  B0D8               	btfsc	status,0,c
 10480  001B78  D01B               	goto	i2l3709
 10481  001B7A                     i2l3699:
 10482  001B7A  90D8               	bcf	status,0,c
 10483  001B7C  362A               	rlcf	i2___ftadd@f2,f,c
 10484  001B7E  362B               	rlcf	i2___ftadd@f2+1,f,c
 10485  001B80  362C               	rlcf	i2___ftadd@f2+2,f,c
 10486  001B82  0631               	decf	i2___ftadd@exp2,f,c
 10487  001B84  5032               	movf	i2___ftadd@exp1,w,c
 10488  001B86  1831               	xorwf	i2___ftadd@exp2,w,c
 10489  001B88  B4D8               	btfsc	status,2,c
 10490  001B8A  D00D               	goto	i2l3707
 10491  001B8C  0630               	decf	i2___ftadd@sign,f,c
 10492  001B8E  C030  F02D         	movff	i2___ftadd@sign,??i2___ftadd
 10493  001B92  0E07               	movlw	7
 10494  001B94  162D               	andwf	??i2___ftadd,f,c
 10495  001B96  B4D8               	btfsc	status,2,c
 10496  001B98  D006               	goto	i2l3707
 10497  001B9A  D7EF               	goto	i2l3699
 10498  001B9C                     i2l3705:
 10499  001B9C  90D8               	bcf	status,0,c
 10500  001B9E  3229               	rrcf	i2___ftadd@f1+2,f,c
 10501  001BA0  3228               	rrcf	i2___ftadd@f1+1,f,c
 10502  001BA2  3227               	rrcf	i2___ftadd@f1,f,c
 10503  001BA4  2A32               	incf	i2___ftadd@exp1,f,c
 10504  001BA6                     i2l3707:
 10505  001BA6  5031               	movf	i2___ftadd@exp2,w,c
 10506  001BA8  1832               	xorwf	i2___ftadd@exp1,w,c
 10507  001BAA  B4D8               	btfsc	status,2,c
 10508  001BAC  D01F               	goto	i2l612
 10509  001BAE  D7F6               	goto	i2l3705
 10510  001BB0                     i2l3709:
 10511  001BB0  5032               	movf	i2___ftadd@exp1,w,c
 10512  001BB2  5C31               	subwf	i2___ftadd@exp2,w,c
 10513  001BB4  B0D8               	btfsc	status,0,c
 10514  001BB6  D01A               	goto	i2l612
 10515  001BB8                     i2l3711:
 10516  001BB8  90D8               	bcf	status,0,c
 10517  001BBA  3627               	rlcf	i2___ftadd@f1,f,c
 10518  001BBC  3628               	rlcf	i2___ftadd@f1+1,f,c
 10519  001BBE  3629               	rlcf	i2___ftadd@f1+2,f,c
 10520  001BC0  0632               	decf	i2___ftadd@exp1,f,c
 10521  001BC2  5032               	movf	i2___ftadd@exp1,w,c
 10522  001BC4  1831               	xorwf	i2___ftadd@exp2,w,c
 10523  001BC6  B4D8               	btfsc	status,2,c
 10524  001BC8  D00D               	goto	i2l3719
 10525  001BCA  0630               	decf	i2___ftadd@sign,f,c
 10526  001BCC  C030  F02D         	movff	i2___ftadd@sign,??i2___ftadd
 10527  001BD0  0E07               	movlw	7
 10528  001BD2  162D               	andwf	??i2___ftadd,f,c
 10529  001BD4  B4D8               	btfsc	status,2,c
 10530  001BD6  D006               	goto	i2l3719
 10531  001BD8  D7EF               	goto	i2l3711
 10532  001BDA                     i2l3717:
 10533  001BDA  90D8               	bcf	status,0,c
 10534  001BDC  322C               	rrcf	i2___ftadd@f2+2,f,c
 10535  001BDE  322B               	rrcf	i2___ftadd@f2+1,f,c
 10536  001BE0  322A               	rrcf	i2___ftadd@f2,f,c
 10537  001BE2  2A31               	incf	i2___ftadd@exp2,f,c
 10538  001BE4                     i2l3719:
 10539  001BE4  5031               	movf	i2___ftadd@exp2,w,c
 10540  001BE6  1832               	xorwf	i2___ftadd@exp1,w,c
 10541  001BE8  A4D8               	btfss	status,2,c
 10542  001BEA  D7F7               	goto	i2l3717
 10543  001BEC                     i2l612:
 10544  001BEC  AE30               	btfss	i2___ftadd@sign,7,c
 10545  001BEE  D00C               	goto	i2l621
 10546  001BF0  0EFF               	movlw	255
 10547  001BF2  1A27               	xorwf	i2___ftadd@f1,f,c
 10548  001BF4  0EFF               	movlw	255
 10549  001BF6  1A28               	xorwf	i2___ftadd@f1+1,f,c
 10550  001BF8  0EFF               	movlw	255
 10551  001BFA  1A29               	xorwf	i2___ftadd@f1+2,f,c
 10552  001BFC  0E01               	movlw	1
 10553  001BFE  2627               	addwf	i2___ftadd@f1,f,c
 10554  001C00  0E00               	movlw	0
 10555  001C02  2228               	addwfc	i2___ftadd@f1+1,f,c
 10556  001C04  0E00               	movlw	0
 10557  001C06  2229               	addwfc	i2___ftadd@f1+2,f,c
 10558  001C08                     i2l621:
 10559  001C08  AC30               	btfss	i2___ftadd@sign,6,c
 10560  001C0A  D00C               	goto	i2l3725
 10561  001C0C  0EFF               	movlw	255
 10562  001C0E  1A2A               	xorwf	i2___ftadd@f2,f,c
 10563  001C10  0EFF               	movlw	255
 10564  001C12  1A2B               	xorwf	i2___ftadd@f2+1,f,c
 10565  001C14  0EFF               	movlw	255
 10566  001C16  1A2C               	xorwf	i2___ftadd@f2+2,f,c
 10567  001C18  0E01               	movlw	1
 10568  001C1A  262A               	addwf	i2___ftadd@f2,f,c
 10569  001C1C  0E00               	movlw	0
 10570  001C1E  222B               	addwfc	i2___ftadd@f2+1,f,c
 10571  001C20  0E00               	movlw	0
 10572  001C22  222C               	addwfc	i2___ftadd@f2+2,f,c
 10573  001C24                     i2l3725:
 10574  001C24  0E00               	movlw	0
 10575  001C26  6E30               	movwf	i2___ftadd@sign,c
 10576  001C28  5027               	movf	i2___ftadd@f1,w,c
 10577  001C2A  262A               	addwf	i2___ftadd@f2,f,c
 10578  001C2C  5028               	movf	i2___ftadd@f1+1,w,c
 10579  001C2E  222B               	addwfc	i2___ftadd@f2+1,f,c
 10580  001C30  5029               	movf	i2___ftadd@f1+2,w,c
 10581  001C32  222C               	addwfc	i2___ftadd@f2+2,f,c
 10582  001C34  AE2C               	btfss	i2___ftadd@f2+2,7,c
 10583  001C36  D00E               	goto	i2l3735
 10584  001C38  0EFF               	movlw	255
 10585  001C3A  1A2A               	xorwf	i2___ftadd@f2,f,c
 10586  001C3C  0EFF               	movlw	255
 10587  001C3E  1A2B               	xorwf	i2___ftadd@f2+1,f,c
 10588  001C40  0EFF               	movlw	255
 10589  001C42  1A2C               	xorwf	i2___ftadd@f2+2,f,c
 10590  001C44  0E01               	movlw	1
 10591  001C46  262A               	addwf	i2___ftadd@f2,f,c
 10592  001C48  0E00               	movlw	0
 10593  001C4A  222B               	addwfc	i2___ftadd@f2+1,f,c
 10594  001C4C  0E00               	movlw	0
 10595  001C4E  222C               	addwfc	i2___ftadd@f2+2,f,c
 10596  001C50  0E01               	movlw	1
 10597  001C52  6E30               	movwf	i2___ftadd@sign,c
 10598  001C54                     i2l3735:
 10599  001C54  C02A  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 10600  001C58  C02B  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 10601  001C5C  C02C  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 10602  001C60  C032  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 10603  001C64  C030  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 10604  001C68  ECE6  F014         	call	i2___ftpack	;wreg free
 10605  001C6C  C001  F027         	movff	?i2___ftpack,?i2___ftadd
 10606  001C70  C002  F028         	movff	?i2___ftpack+1,?i2___ftadd+1
 10607  001C74  C003  F029         	movff	?i2___ftpack+2,?i2___ftadd+2
 10608  001C78  0012               	return	
 10609  001C7A                     __end_ofi2___ftadd:
 10610                           	opt stack 0
 10611                           pclatu	equ	0xFFB
 10612                           pclath	equ	0xFFA
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           intcon2	equ	0xFF1
 10621                           indf0	equ	0xFEF
 10622                           postinc0	equ	0xFEE
 10623                           fsr0h	equ	0xFEA
 10624                           fsr0l	equ	0xFE9
 10625                           wreg	equ	0xFE8
 10626                           postdec1	equ	0xFE5
 10627                           plusw1	equ	0xFE3
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           plusw2	equ	0xFDB
 10634                           fsr2h	equ	0xFDA
 10635                           fsr2l	equ	0xFD9
 10636                           status	equ	0xFD8
 10637                           
 10638 ;; *************** function ___ftdiv *****************
 10639 ;; Defined at:
 10640 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  f1              3   23[COMRAM] float 
 10643 ;;  f2              3   26[COMRAM] float 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  f3              3   33[COMRAM] float 
 10646 ;;  sign            1   37[COMRAM] unsigned char 
 10647 ;;  exp             1   36[COMRAM] unsigned char 
 10648 ;;  cntr            1   32[COMRAM] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  3   23[COMRAM] float 
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10658 ;;      Params:         6       0       0       0       0       0       0       0       0
 10659 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10660 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10661 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10662 ;;Total ram usage:       15 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    1
 10665 ;; This function calls:
 10666 ;;		i2___ftpack
 10667 ;; This function is called by:
 10668 ;;		_ADC_ISR
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text33
 10673  0026A4                     __ptext33:
 10674                           	opt stack 0
 10675  0026A4                     ___ftdiv:
 10676                           	opt stack 24
 10677                           
 10678                           ;incstack = 0
 10679  0026A4  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
 10680  0026A8  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
 10681  0026AA  6A20               	clrf	(??___ftdiv+2)& (0+255),c
 10682  0026AC  3419               	rlcf	___ftdiv@f1+1,w,c
 10683  0026AE  361E               	rlcf	??___ftdiv& (0+255),f,c
 10684  0026B0  E301               	bnc	u404_41
 10685  0026B2  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
 10686  0026B4                     u404_41:
 10687  0026B4  501E               	movf	??___ftdiv,w,c
 10688  0026B6  6E25               	movwf	___ftdiv@exp,c
 10689  0026B8  5025               	movf	___ftdiv@exp,w,c
 10690  0026BA  A4D8               	btfss	status,2,c
 10691  0026BC  D007               	goto	i2l3617
 10692  0026BE  0E00               	movlw	0
 10693  0026C0  6E18               	movwf	?___ftdiv,c
 10694  0026C2  0E00               	movlw	0
 10695  0026C4  6E19               	movwf	?___ftdiv+1,c
 10696  0026C6  0E00               	movlw	0
 10697  0026C8  6E1A               	movwf	?___ftdiv+2,c
 10698  0026CA  0012               	return	
 10699  0026CC                     i2l3617:
 10700  0026CC  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
 10701  0026D0  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
 10702  0026D2  6A20               	clrf	(??___ftdiv+2)& (0+255),c
 10703  0026D4  341C               	rlcf	___ftdiv@f2+1,w,c
 10704  0026D6  361E               	rlcf	??___ftdiv& (0+255),f,c
 10705  0026D8  E301               	bnc	u406_41
 10706  0026DA  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
 10707  0026DC                     u406_41:
 10708  0026DC  501E               	movf	??___ftdiv,w,c
 10709  0026DE  6E26               	movwf	___ftdiv@sign,c
 10710  0026E0  5026               	movf	___ftdiv@sign,w,c
 10711  0026E2  A4D8               	btfss	status,2,c
 10712  0026E4  D007               	goto	i2l3623
 10713  0026E6  0E00               	movlw	0
 10714  0026E8  6E18               	movwf	?___ftdiv,c
 10715  0026EA  0E00               	movlw	0
 10716  0026EC  6E19               	movwf	?___ftdiv+1,c
 10717  0026EE  0E00               	movlw	0
 10718  0026F0  6E1A               	movwf	?___ftdiv+2,c
 10719  0026F2  0012               	return	
 10720  0026F4                     i2l3623:
 10721  0026F4  0E00               	movlw	0
 10722  0026F6  6E22               	movwf	___ftdiv@f3,c
 10723  0026F8  0E00               	movlw	0
 10724  0026FA  6E23               	movwf	___ftdiv@f3+1,c
 10725  0026FC  0E00               	movlw	0
 10726  0026FE  6E24               	movwf	___ftdiv@f3+2,c
 10727  002700  5026               	movf	___ftdiv@sign,w,c
 10728  002702  0F89               	addlw	137
 10729  002704  5E25               	subwf	___ftdiv@exp,f,c
 10730  002706  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
 10731  00270A  501D               	movf	___ftdiv@f2+2,w,c
 10732  00270C  1A26               	xorwf	___ftdiv@sign,f,c
 10733  00270E  0E80               	movlw	128
 10734  002710  1626               	andwf	___ftdiv@sign,f,c
 10735  002712  8E19               	bsf	___ftdiv@f1+1,7,c
 10736  002714  0EFF               	movlw	255
 10737  002716  1618               	andwf	___ftdiv@f1,f,c
 10738  002718  0EFF               	movlw	255
 10739  00271A  1619               	andwf	___ftdiv@f1+1,f,c
 10740  00271C  0E00               	movlw	0
 10741  00271E  161A               	andwf	___ftdiv@f1+2,f,c
 10742  002720  8E1C               	bsf	___ftdiv@f2+1,7,c
 10743  002722  0EFF               	movlw	255
 10744  002724  161B               	andwf	___ftdiv@f2,f,c
 10745  002726  0EFF               	movlw	255
 10746  002728  161C               	andwf	___ftdiv@f2+1,f,c
 10747  00272A  0E00               	movlw	0
 10748  00272C  161D               	andwf	___ftdiv@f2+2,f,c
 10749  00272E  0E18               	movlw	24
 10750  002730  6E21               	movwf	___ftdiv@cntr,c
 10751  002732                     i2l3643:
 10752  002732  90D8               	bcf	status,0,c
 10753  002734  3622               	rlcf	___ftdiv@f3,f,c
 10754  002736  3623               	rlcf	___ftdiv@f3+1,f,c
 10755  002738  3624               	rlcf	___ftdiv@f3+2,f,c
 10756  00273A  501B               	movf	___ftdiv@f2,w,c
 10757  00273C  5C18               	subwf	___ftdiv@f1,w,c
 10758  00273E  501C               	movf	___ftdiv@f2+1,w,c
 10759  002740  5819               	subwfb	___ftdiv@f1+1,w,c
 10760  002742  501D               	movf	___ftdiv@f2+2,w,c
 10761  002744  581A               	subwfb	___ftdiv@f1+2,w,c
 10762  002746  A0D8               	btfss	status,0,c
 10763  002748  D007               	goto	i2l632
 10764  00274A  501B               	movf	___ftdiv@f2,w,c
 10765  00274C  5E18               	subwf	___ftdiv@f1,f,c
 10766  00274E  501C               	movf	___ftdiv@f2+1,w,c
 10767  002750  5A19               	subwfb	___ftdiv@f1+1,f,c
 10768  002752  501D               	movf	___ftdiv@f2+2,w,c
 10769  002754  5A1A               	subwfb	___ftdiv@f1+2,f,c
 10770  002756  8022               	bsf	___ftdiv@f3,0,c
 10771  002758                     i2l632:
 10772  002758  90D8               	bcf	status,0,c
 10773  00275A  3618               	rlcf	___ftdiv@f1,f,c
 10774  00275C  3619               	rlcf	___ftdiv@f1+1,f,c
 10775  00275E  361A               	rlcf	___ftdiv@f1+2,f,c
 10776  002760  2E21               	decfsz	___ftdiv@cntr,f,c
 10777  002762  D7E7               	goto	i2l3643
 10778  002764  C022  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 10779  002768  C023  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 10780  00276C  C024  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 10781  002770  C025  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 10782  002774  C026  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 10783  002778  ECE6  F014         	call	i2___ftpack	;wreg free
 10784  00277C  C001  F018         	movff	?i2___ftpack,?___ftdiv
 10785  002780  C002  F019         	movff	?i2___ftpack+1,?___ftdiv+1
 10786  002784  C003  F01A         	movff	?i2___ftpack+2,?___ftdiv+2
 10787  002788  0012               	return	
 10788  00278A                     __end_of___ftdiv:
 10789                           	opt stack 0
 10790                           pclatu	equ	0xFFB
 10791                           pclath	equ	0xFFA
 10792                           tblptru	equ	0xFF8
 10793                           tblptrh	equ	0xFF7
 10794                           tblptrl	equ	0xFF6
 10795                           tablat	equ	0xFF5
 10796                           prodh	equ	0xFF4
 10797                           prodl	equ	0xFF3
 10798                           intcon	equ	0xFF2
 10799                           intcon2	equ	0xFF1
 10800                           indf0	equ	0xFEF
 10801                           postinc0	equ	0xFEE
 10802                           fsr0h	equ	0xFEA
 10803                           fsr0l	equ	0xFE9
 10804                           wreg	equ	0xFE8
 10805                           postdec1	equ	0xFE5
 10806                           plusw1	equ	0xFE3
 10807                           fsr1h	equ	0xFE2
 10808                           fsr1l	equ	0xFE1
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           plusw2	equ	0xFDB
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function ___awtoft *****************
 10818 ;; Defined at:
 10819 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  c               2    8[COMRAM] int 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  sign            1   11[COMRAM] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  3    8[COMRAM] float 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10833 ;;      Params:         3       0       0       0       0       0       0       0       0
 10834 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10836 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10837 ;;Total ram usage:        4 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    1
 10840 ;; This function calls:
 10841 ;;		i2___ftpack
 10842 ;; This function is called by:
 10843 ;;		_ADC_ISR
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           	psect	text34
 10848  002E92                     __ptext34:
 10849                           	opt stack 0
 10850  002E92                     ___awtoft:
 10851                           	opt stack 24
 10852                           
 10853                           ;incstack = 0
 10854  002E92  0E00               	movlw	0
 10855  002E94  6E0C               	movwf	___awtoft@sign,c
 10856  002E96  AE0A               	btfss	___awtoft@c+1,7,c
 10857  002E98  D006               	goto	i2l3665
 10858  002E9A  6C09               	negf	___awtoft@c,c
 10859  002E9C  1E0A               	comf	___awtoft@c+1,f,c
 10860  002E9E  B0D8               	btfsc	status,0,c
 10861  002EA0  2A0A               	incf	___awtoft@c+1,f,c
 10862  002EA2  0E01               	movlw	1
 10863  002EA4  6E0C               	movwf	___awtoft@sign,c
 10864  002EA6                     i2l3665:
 10865  002EA6  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 10866  002EAA  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 10867  002EAE  6A03               	clrf	i2___ftpack@arg+2,c
 10868  002EB0  0E8E               	movlw	142
 10869  002EB2  6E04               	movwf	i2___ftpack@exp,c
 10870  002EB4  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 10871  002EB8  ECE6  F014         	call	i2___ftpack	;wreg free
 10872  002EBC  C001  F009         	movff	?i2___ftpack,?___awtoft
 10873  002EC0  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 10874  002EC4  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 10875  002EC8  0012               	return	
 10876  002ECA                     __end_of___awtoft:
 10877                           	opt stack 0
 10878                           pclatu	equ	0xFFB
 10879                           pclath	equ	0xFFA
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           intcon2	equ	0xFF1
 10888                           indf0	equ	0xFEF
 10889                           postinc0	equ	0xFEE
 10890                           fsr0h	equ	0xFEA
 10891                           fsr0l	equ	0xFE9
 10892                           wreg	equ	0xFE8
 10893                           postdec1	equ	0xFE5
 10894                           plusw1	equ	0xFE3
 10895                           fsr1h	equ	0xFE2
 10896                           fsr1l	equ	0xFE1
 10897                           indf2	equ	0xFDF
 10898                           postinc2	equ	0xFDE
 10899                           postdec2	equ	0xFDD
 10900                           plusw2	equ	0xFDB
 10901                           fsr2h	equ	0xFDA
 10902                           fsr2l	equ	0xFD9
 10903                           status	equ	0xFD8
 10904                           
 10905 ;; *************** function i2___ftpack *****************
 10906 ;; Defined at:
 10907 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;  arg             3    0[COMRAM] unsigned um
 10910 ;;  exp             1    3[COMRAM] unsigned char 
 10911 ;;  sign            1    4[COMRAM] unsigned char 
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  3    0[COMRAM] float 
 10916 ;; Registers used:
 10917 ;;		wreg, status,2, status,0
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10923 ;;      Params:         5       0       0       0       0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10925 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10926 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10927 ;;Total ram usage:        8 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; This function calls:
 10930 ;;		Nothing
 10931 ;; This function is called by:
 10932 ;;		___awtoft
 10933 ;;		___ftdiv
 10934 ;;		i2___ftadd
 10935 ;;		i2___ftmul
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           	psect	text35
 10940  0029CC                     __ptext35:
 10941                           	opt stack 0
 10942  0029CC                     i2___ftpack:
 10943                           	opt stack 24
 10944                           
 10945                           ;incstack = 0
 10946  0029CC  5004               	movf	i2___ftpack@exp,w,c
 10947  0029CE  B4D8               	btfsc	status,2,c
 10948  0029D0  D005               	goto	i2l3141
 10949  0029D2  5001               	movf	i2___ftpack@arg,w,c
 10950  0029D4  1002               	iorwf	i2___ftpack@arg+1,w,c
 10951  0029D6  1003               	iorwf	i2___ftpack@arg+2,w,c
 10952  0029D8  A4D8               	btfss	status,2,c
 10953  0029DA  D00C               	goto	i2l3147
 10954  0029DC                     i2l3141:
 10955  0029DC  0E00               	movlw	0
 10956  0029DE  6E01               	movwf	?i2___ftpack,c
 10957  0029E0  0E00               	movlw	0
 10958  0029E2  6E02               	movwf	?i2___ftpack+1,c
 10959  0029E4  0E00               	movlw	0
 10960  0029E6  6E03               	movwf	?i2___ftpack+2,c
 10961  0029E8  0012               	return	
 10962  0029EA                     i2l3145:
 10963  0029EA  2A04               	incf	i2___ftpack@exp,f,c
 10964  0029EC  90D8               	bcf	status,0,c
 10965  0029EE  3203               	rrcf	i2___ftpack@arg+2,f,c
 10966  0029F0  3202               	rrcf	i2___ftpack@arg+1,f,c
 10967  0029F2  3201               	rrcf	i2___ftpack@arg,f,c
 10968  0029F4                     i2l3147:
 10969  0029F4  0E00               	movlw	0
 10970  0029F6  1401               	andwf	i2___ftpack@arg,w,c
 10971  0029F8  6E06               	movwf	??i2___ftpack& (0+255),c
 10972  0029FA  0E00               	movlw	0
 10973  0029FC  1402               	andwf	i2___ftpack@arg+1,w,c
 10974  0029FE  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 10975  002A00  0EFE               	movlw	254
 10976  002A02  1403               	andwf	i2___ftpack@arg+2,w,c
 10977  002A04  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 10978  002A06  5006               	movf	??i2___ftpack,w,c
 10979  002A08  1007               	iorwf	??i2___ftpack+1,w,c
 10980  002A0A  1008               	iorwf	??i2___ftpack+2,w,c
 10981  002A0C  B4D8               	btfsc	status,2,c
 10982  002A0E  D00C               	goto	i2l3153
 10983  002A10  D7EC               	goto	i2l3145
 10984  002A12                     i2l3149:
 10985  002A12  2A04               	incf	i2___ftpack@exp,f,c
 10986  002A14  0E01               	movlw	1
 10987  002A16  2601               	addwf	i2___ftpack@arg,f,c
 10988  002A18  0E00               	movlw	0
 10989  002A1A  2202               	addwfc	i2___ftpack@arg+1,f,c
 10990  002A1C  0E00               	movlw	0
 10991  002A1E  2203               	addwfc	i2___ftpack@arg+2,f,c
 10992  002A20  90D8               	bcf	status,0,c
 10993  002A22  3203               	rrcf	i2___ftpack@arg+2,f,c
 10994  002A24  3202               	rrcf	i2___ftpack@arg+1,f,c
 10995  002A26  3201               	rrcf	i2___ftpack@arg,f,c
 10996  002A28                     i2l3153:
 10997  002A28  0E00               	movlw	0
 10998  002A2A  1401               	andwf	i2___ftpack@arg,w,c
 10999  002A2C  6E06               	movwf	??i2___ftpack& (0+255),c
 11000  002A2E  0E00               	movlw	0
 11001  002A30  1402               	andwf	i2___ftpack@arg+1,w,c
 11002  002A32  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 11003  002A34  0EFF               	movlw	255
 11004  002A36  1403               	andwf	i2___ftpack@arg+2,w,c
 11005  002A38  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 11006  002A3A  5006               	movf	??i2___ftpack,w,c
 11007  002A3C  1007               	iorwf	??i2___ftpack+1,w,c
 11008  002A3E  1008               	iorwf	??i2___ftpack+2,w,c
 11009  002A40  B4D8               	btfsc	status,2,c
 11010  002A42  D006               	goto	i2l3157
 11011  002A44  D7E6               	goto	i2l3149
 11012  002A46                     i2l3155:
 11013  002A46  0604               	decf	i2___ftpack@exp,f,c
 11014  002A48  90D8               	bcf	status,0,c
 11015  002A4A  3601               	rlcf	i2___ftpack@arg,f,c
 11016  002A4C  3602               	rlcf	i2___ftpack@arg+1,f,c
 11017  002A4E  3603               	rlcf	i2___ftpack@arg+2,f,c
 11018  002A50                     i2l3157:
 11019  002A50  BE02               	btfsc	i2___ftpack@arg+1,7,c
 11020  002A52  D003               	goto	i2l574
 11021  002A54  0E02               	movlw	2
 11022  002A56  6004               	cpfslt	i2___ftpack@exp,c
 11023  002A58  D7F6               	goto	i2l3155
 11024  002A5A                     i2l574:
 11025  002A5A  A004               	btfss	i2___ftpack@exp,0,c
 11026  002A5C  9E02               	bcf	i2___ftpack@arg+1,7,c
 11027  002A5E  90D8               	bcf	status,0,c
 11028  002A60  3204               	rrcf	i2___ftpack@exp,f,c
 11029  002A62  5004               	movf	i2___ftpack@exp,w,c
 11030  002A64  1203               	iorwf	i2___ftpack@arg+2,f,c
 11031  002A66  5005               	movf	i2___ftpack@sign,w,c
 11032  002A68  A4D8               	btfss	status,2,c
 11033  002A6A  8E03               	bsf	i2___ftpack@arg+2,7,c
 11034  002A6C  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 11035  002A70  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 11036  002A74  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 11037  002A78  0012               	return	
 11038  002A7A                     __end_ofi2___ftpack:
 11039                           	opt stack 0
 11040                           pclatu	equ	0xFFB
 11041                           pclath	equ	0xFFA
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           intcon2	equ	0xFF1
 11050                           indf0	equ	0xFEF
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           postdec1	equ	0xFE5
 11056                           plusw1	equ	0xFE3
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           plusw2	equ	0xFDB
 11063                           fsr2h	equ	0xFDA
 11064                           fsr2l	equ	0xFD9
 11065                           status	equ	0xFD8
 11066                           pclatu	equ	0xFFB
 11067                           pclath	equ	0xFFA
 11068                           tblptru	equ	0xFF8
 11069                           tblptrh	equ	0xFF7
 11070                           tblptrl	equ	0xFF6
 11071                           tablat	equ	0xFF5
 11072                           prodh	equ	0xFF4
 11073                           prodl	equ	0xFF3
 11074                           intcon	equ	0xFF2
 11075                           intcon2	equ	0xFF1
 11076                           indf0	equ	0xFEF
 11077                           postinc0	equ	0xFEE
 11078                           fsr0h	equ	0xFEA
 11079                           fsr0l	equ	0xFE9
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           plusw1	equ	0xFE3
 11083                           fsr1h	equ	0xFE2
 11084                           fsr1l	equ	0xFE1
 11085                           indf2	equ	0xFDF
 11086                           postinc2	equ	0xFDE
 11087                           postdec2	equ	0xFDD
 11088                           plusw2	equ	0xFDB
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093                           	psect	rparam
 11094  0000                     pclatu	equ	0xFFB
 11095                           pclath	equ	0xFFA
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           intcon2	equ	0xFF1
 11104                           indf0	equ	0xFEF
 11105                           postinc0	equ	0xFEE
 11106                           fsr0h	equ	0xFEA
 11107                           fsr0l	equ	0xFE9
 11108                           wreg	equ	0xFE8
 11109                           postdec1	equ	0xFE5
 11110                           plusw1	equ	0xFE3
 11111                           fsr1h	equ	0xFE2
 11112                           fsr1l	equ	0xFE1
 11113                           indf2	equ	0xFDF
 11114                           postinc2	equ	0xFDE
 11115                           postdec2	equ	0xFDD
 11116                           plusw2	equ	0xFDB
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121                           	psect	temp
 11122  000059                     btemp:
 11123                           	opt stack 0
 11124  000059                     	ds	1
 11125  0000                     int$flags	set	btemp
 11126                           pclatu	equ	0xFFB
 11127                           pclath	equ	0xFFA
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           intcon2	equ	0xFF1
 11136                           indf0	equ	0xFEF
 11137                           postinc0	equ	0xFEE
 11138                           fsr0h	equ	0xFEA
 11139                           fsr0l	equ	0xFE9
 11140                           wreg	equ	0xFE8
 11141                           postdec1	equ	0xFE5
 11142                           plusw1	equ	0xFE3
 11143                           fsr1h	equ	0xFE2
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           plusw2	equ	0xFDB
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8


Data Sizes:
    Strings     369
    Constant    118
    Data        23
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      88
    BANK0           160    127     154
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> main@pass_cmp(BANK0[7]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 7
		 -> main@pass_verify(BANK0[7]), main@pass(BANK0[7]), 

    memset@p1	PTR void  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 

    memset@p	PTR unsigned char  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> buffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[24]), STR_11(CODE[20]), 
		 -> STR_10(CODE[31]), STR_9(CODE[30]), STR_8(CODE[21]), STR_7(CODE[22]), 
		 -> STR_6(CODE[28]), STR_5(CODE[26]), STR_4(CODE[25]), buffer(BANK1[50]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), 

    sp__memset	PTR void  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ADC_ISR in COMRAM

    _ADC_ISR->i2___ftadd
    i2___ftmul->i2___ftpack
    i2___ftadd->___ftdiv
    ___ftdiv->i2___ftmul
    ___awtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _keyfind->_MSdelay
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _ADC_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ADC_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ADC_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ADC_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ADC_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ADC_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ADC_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ADC_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   56130
                                            101 BANK0     26    26      0
                 _ADC_Interrupt_Init
                           _LCD_Char
                          _LCD_Clear
                        _LCD_Command
                           _LCD_Init
                         _LCD_String
                            _MSdelay
                             ___ftge
                            _keyfind
                             _memset
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     475
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   43434
                                             63 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10229
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10031
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4249
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2086
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3524
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3227
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     480
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _keyfind                                              0     0      0    1116
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    2357
                                              8 BANK0      2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             2     2      0    1160
                                              6 BANK0      2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    2276
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0    1160
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0    1160
                                              6 BANK0      2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2    1116
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Interrupt_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                             19    19      0    4258
                                             50 COMRAM    19    19      0
                           ___awtoft
                            ___ftdiv
                          i2___ftadd
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (6) i2___ftmul                                           15     9      6     921
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) i2___ftadd                                           12     6      6    1435
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    1181
                                             23 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3     698
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___ftpack                                           8     3      5     543
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Interrupt_Init
   _LCD_Char
     _MSdelay
   _LCD_Clear
     _LCD_Command
       _MSdelay
   _LCD_Command
     _MSdelay
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _MSdelay
   ___ftge
   _keyfind
     _MSdelay
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcmp

 _ADC_ISR (ROOT)
   ___awtoft
     i2___ftpack
   ___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
     i2___ftpack (ARG)
   i2___ftadd
     ___ftdiv (ARG)
       i2___ftmul (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___ftpack (ARG)
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
   i2___ftmul
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      32       7       19.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7F      9A       5       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      58       1       93.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     124      20        0.0%
DATA                 0      0     124       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Jul 18 16:36:09 2021

               ?_LCD_Command 0001                 ___awdiv@sign 006B                  __CFG_BOR$ON 000000  
        ___wmul@multiplicand 0070                  __CFG_BORV$3 000000                  ?_LCD_String 0068  
                 i2___ftpack 29CC                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                 ___ftadd@exp1 0098  
               ___ftadd@exp2 0097                  __CFG_LVP$ON 000000                 ___ftadd@sign 0096  
                __CFG_WDT$ON 000000                          l113 0D14                          l302 078E  
                        l190 2312                          l182 22A6                          l175 2246  
                        l177 2270                          l601 1908                          l186 22DC  
                        l603 1930                          l612 1A06                          l621 1A30  
                        l542 1F8E                          l640 1D86                          l721 29BA  
                        l731 2BA4                          l574 257C                          l646 1E06  
                        l671 2F88                          l639 1D42                          l597 18CE  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000              __end_of_ADC_ISR 24A4  
               ___awmod@sign 0065                          prod 000FF3                          wreg 000FE8  
                LCD_Char@dat 0067                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
                       l3011 1F84                         l3003 1F58                         l3025 27CA  
                       l3017 2E1E                         l3009 1F74                         l3035 284E  
                       l3107 29A8                         l3123 2B92                         l3115 2B38  
                       l3131 2BCE                         l3205 2DAA                         l3221 2268  
                       l3029 280A                         l3117 2B48                         l4005 0FE6  
                       l3223 227C                         l3071 21DE                         l3119 2B4E  
                       l3311 003C                         l3209 2DD4                         l3233 229E  
                       l2601 1916                         l3081 2214                         l3049 2138  
                       l3129 2BBE                         l3401 03BC                         l3313 0052  
                       l3305 0022                         l3235 22B2                         l3067 21CA  
                       l3403 03D2                         l3323 008C                         l3331 0102  
                       l4019 104E                         l4027 108C                         l3245 22D4  
                       l2541 2510                         l2533 24BE                         l3085 2230  
                       l3077 21FA                         l3501 0792                         l3413 044A  
                       l3341 0170                         l3317 005C                         l3247 22E8  
                       l2623 1996                         l2607 1926                         l3079 220A  
                       l3095 293E                         l3423 04A8                         l3351 019C  
                       l3343 0186                         l3257 230A                         l2561 25A2  
                       l2545 2530                         l2537 24D2                         l2625 19A4  
                       l2617 1968                         l3097 294E                         l2713 286E  
                       l3513 0814                         l3441 055A                         l3409 041C  
                       l3353 01C6                         l3337 012A                         l3283 2364  
                       l3275 2350                         l3267 233C                         l3259 231C  
                       l2555 2586                         l2547 2560                         l2539 24E0  
                       l2643 1A5A                         l2635 19EC                         l2627 19B2  
                       l3099 2954                         l3531 0924                         l3523 08FC  
                       l3427 050E                         l3347 0196                         l3605 2F0A  
                       l2549 256E                         l2653 1AA8                         l2637 19FA  
                       l2629 19BE                         l2725 28A2                         l2741 28F2  
                       l3525 090A                         l3509 07C2                         l3445 05AA  
                       l3429 0514                         l3533 0932                         l3293 2D54  
                       l2567 2E54                         l2903 1CB4                         l2727 28AE  
                       l2719 2884                         l2663 1FDA                         l3543 0980  
                       l3463 0626                         l3471 0656                         l3359 01E0  
                       l3295 2D60                         l2577 2E76                         l2569 2E5E  
                       l3609 2F1C                         l2745 2906                         l2737 28E4  
                       l2729 28B4                         l2761 2AA6                         l3561 0A26  
                       l3553 09E4                         l3473 066A                         l3465 063C  
                       l3457 060C                         l3449 05D2                         l3393 0348  
                       l3385 02D8                         l3369 0226                         l2579 2E7C  
                       l2595 18DC                         l2683 2062                         l2843 181E  
                       l2835 173A                         l3547 09B0                         l3539 0958  
                       l3299 2D98                         l2909 1CEE                         l2781 2B12  
                       l2773 2AF0                         l2765 2ABA                         l2757 2A96  
                       l2693 20A0                         l2669 2014                         l3565 0A5E  
                       l3477 0696                         l3397 0376                         l2951 1DFC  
                       l2943 1DD0                         l2767 2AC6                         l2687 2080  
                       l2863 1344                         l3591 0AFA                         l3575 0AA0  
                       l3583 0AC8                         l3567 0A68                         l3559 0A1C  
                       l3495 075C                         l3479 069E                         l3487 0734  
                       l3399 038C                         l3903 0DB8                         l3823 0BCA  
                       l2769 2ACC                         l2777 2AFE                         l2697 20BE  
                       l2881 1594                         l2857 127E                         l3585 0AD4  
                       l3497 0770                         l3489 0742                         l3833 0BF2  
                       l2939 1DBC                         l2875 14CE                         l2867 136A  
                       l3595 0B26                         l3915 0DD8                         l3843 0C24  
                       l2965 1E64                         l2949 1DEC                         l2893 2FB6  
                       l3597 0B2C                         l3925 0DF2                         l3845 0C3A  
                       l2959 1E3E                         l3599 0B4A                         l3961 0EC2  
                       l3937 0E20                         l2987 1F0C                         l2979 1EB8  
                       l3971 0EF4                         l3947 0E52                         l3875 0D2C  
                       l3973 0F0A                         l3949 0E68                         l2999 1F44  
                       l3983 0F3C                         l3887 0D52                         _ADIF 007CF6  
                       l3993 0F6E                         l3897 0D94                         l3995 0F84  
                       STR_1 7F00                         STR_2 7EE6                         STR_3 7FB9  
                       STR_4 7F34                         STR_5 7F1A                         STR_6 7ECA  
                       STR_7 7F65                         STR_8 7F7B                         STR_9 7EAC  
                       _LATB 000F8A                         u3111 2114                         _LATC 000F8B  
                       _LATD 000F8C                         u3130 215E                         u2421 187C  
                       u2431 189A                         u3135 2154                         u3340 2DCA  
                       u3350 2DF4                         u2631 1FB6                         u3600 026C  
                       u3347 2DC0                         u2651 1FF0                         u3357 2DEA  
                       u2901 1C90                         u3605 0260                         u2921 1CCA  
                       u4450 0D6E                         u4371 0B98                         u3820 0786  
                       u4381 0BAA                         u4391 0BBC                         _RBPU 007F8F  
                       _main 0B58                 ___ftpack@arg 0060           __size_of_LCD_Clear 0008  
               ___ftpack@exp 0063                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0059                 i2___ftadd@f1 0027                 i2___ftadd@f2 002A  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
            __end_of_MSdelay 2E92                __CFG_IESO$OFF 000000                 _ADC_ISR$1155 0043  
               _sprintf$1159 00AC                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0081  
               i2___ftmul@f1 0009                 i2___ftmul@f2 000C                 ___param_bank 000000  
               ___ftmul@sign 0082                 ___fttol@exp1 0098                 ___fttol@lval 0094  
           __end_of_LCD_Char 2CF8             __end_of_LCD_Init 2F66                __CFG_PLLDIV$1 000000  
             __CFG_CCP2MX$ON 000000                        ?_main 0001              __end_of___awdiv 2910  
            __end_of___ftadd 1ACE                        STR_10 7E8D                        STR_11 7FA5  
                      STR_12 7F4D                        STR_13 7FED                        STR_14 7F90  
                      STR_15 7FED                        STR_16 7F90                        STR_17 7FDC  
                      STR_18 7FCB              __end_of___awmod 2B1C              __end_of___ftdiv 278A  
            __end_of___ftneg 2F96              __end_of___lldiv 29CC              __end_of___ftmul 20FE  
            ___awdiv@divisor 0068              __end_of___llmod 2BB6              __end_of___ftsub 2E48  
            __end_of___fttol 2242                        _LATD0 007C60                        _LATD1 007C61  
                      i2l601 1B3C                        i2l612 1BEC                        i2l621 1C08  
                      i2l632 2758                        i2l574 2A5A                        i2l597 1B12  
            ___awdiv@counter 006A                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0070               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
               main@pass_cmp 00CC                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000           _ADC_Interrupt_Init 2FC0               __CFG_EBTRB$OFF 000000  
              ___awtoft@sign 000C              __end_of_dpowers 7E3F                        _scale 110C  
            __end_of_keyfind 237E              __end_of_isdigit 2FC0                ___ftpack@sign 0064  
                      pclath 000FFA                        tablat 000FF5                        plusw1 000FE3  
                      plusw2 000FDB          ?_ADC_Interrupt_Init 0001                        status 000FD8  
        __size_of_LCD_String 0054              __end_of_sprintf 0B58               __CFG_ICPRT$OFF 000000  
         __size_ofi2___ftadd 01AC           __size_ofi2___ftmul 00F4              __initialization 2C32  
               __end_of_main 110C                i2___ftmul@exp 0012                    ??_ADC_ISR 0033  
                ?i2___ftpack 0001         ??_ADC_Interrupt_Init 0060                       ??_main 00C5  
              ___fttol@sign1 0093            __end_of_LCD_Clear 2FFA                __activetblptr 000002  
       __size_of__tdiv_to_l_ 019E                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0             ___llmod@dividend 0060                       ?_scale 0083  
                     _ADRESH 000FC4                       _ADRESL 000FC3             ___awdiv@dividend 0066  
           __end_of___awtoft 2ECA             __end_of___ftpack 25B0             __end_of___lltoft 2C32  
                  ??_MSdelay 0062                       i2l3141 29DC                       i2l3153 2A28  
                     i2l3145 29EA                       i2l3155 2A46                       i2l3147 29F4  
                     i2l3157 2A50                       i2l3149 2A12                       i2l3623 26F4  
                     i2l3711 1BB8                       i2l3617 26CC                       i2l3705 1B9C  
                     i2l3643 2732                       i2l3707 1BA6                       i2l3725 1C24  
                     i2l3717 1BDA                       i2l3709 1BB0                       i2l3735 1C54  
                     i2l3719 1BE4                       i2l3751 2600                       i2l3665 2EA6  
                     i2l3745 25D8                       i2l3683 1B4A                       i2l3677 1B20  
                     i2l3765 2632                       i2l3775 265A                       i2l3769 2642  
                     i2l3699 1B7A                       i2l3779 266A                       u410_41 1ADE  
                     u411_41 1AF2                       u404_41 26B4                       u406_41 26DC  
                     u431_41 25C0                       u433_41 25E8                       _OSCCON 000FD3  
             __CFG_XINST$OFF 000000             __end_of__powers_ 7E8D                       ___ftge 278A  
                     ___wmul 2ECA                    ??___awdiv 006A                    ??___ftadd 0093  
             __CFG_STVREN$ON 000000                    ??___awmod 0064                    ??___ftdiv 001E  
                  ??___ftneg 0063                    ??___lldiv 0068                    ??___ftmul 007A  
                  ??___llmod 0068                    ??___ftsub 009F                    ??___fttol 008E  
                     _buffer 0100                       _keypad 0046                       _memset 2F00  
                     _fround 15BA                       clear_0 2C78                       clear_1 2C84  
           ___awdiv@quotient 006C              ___awmod@divisor 0062              ___awmod@counter 0064  
                     _rowloc 00F1         __size_of_LCD_Command 005A                       _strcmp 2D52  
      ___ftmul@f3_as_product 007E                 __pdataCOMRAM 0046                    ??_keyfind 0066  
                  ??_isdigit 0060            __end_ofi2___ftadd 1C7A               i2___ftadd@exp1 0032  
             i2___ftadd@exp2 0031            __end_ofi2___ftmul 26A4               i2___ftadd@sign 0030  
               __mediumconst 7E16                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_sprintf 00A6                    ?_LCD_Char 0001  
                 __accesstop 0060      __end_of__initialization 2C90                    ?_LCD_Init 0001  
            __CFG_PBADEN$OFF 000000                   ___ftadd@f1 008D                   ___ftadd@f2 0090  
        __size_ofi2___ftpack 00AE                   ___ftge@ff1 0060                   ___ftge@ff2 0063  
              ___rparam_used 000001                   ___ftdiv@f1 0018                   ___ftdiv@f2 001B  
                 ___ftdiv@f3 0022                   ___ftneg@f1 0060                   ___awtoft@c 0009  
             i2___ftpack@arg 0001               i2___ftpack@exp 0004                   ___ftmul@f1 0074  
                 ___ftmul@f2 0077                   ___ftsub@f1 0099                   ___ftsub@f2 009C  
                 ___fttol@f1 008A               __pcstackCOMRAM 0001                 __pidataBANK0 2FFA  
                 ___lltoft@c 0068               i2___ftmul@cntr 0016                __end_of_scale 15BA  
             i2___ftmul@sign 0017                 ??_LCD_String 006A                   __div_to_l_ 1E18  
            __div_to_l_@exp1 006B              __div_to_l_@cntr 006A                      ??_scale 0086  
            __div_to_l_@quot 0066                 sprintf@width 00BD                   __pbssBANK0 00DF  
                 __pbssBANK1 0100                   ??_LCD_Char 0066                   ??_LCD_Init 0068  
         __end_of_LCD_String 2DFC                __div_to_l_@f1 0060                __div_to_l_@f2 0063  
                    ?___ftge 0060                      ?___wmul 006E                      _ADC_ISR 0008  
                    ?_memset 0060                      ?_fround 0083                    ?___awtoft 0009  
                  ?___ftpack 0060                    ?___lltoft 0068                      ?_strcmp 0060  
             main@count_fail 00DA                      _MSdelay 2E48              __CFG_VREGEN$OFF 000000  
              LCD_String@msg 0068            __end_of__npowers_ 7E66                      __Hparam 0000  
                 _scale$1158 0086                      __Lparam 0000              __size_of___ftge 00C8  
                    ___awdiv 2852                      ___ftadd 1866                      ___awmod 2A7A  
                    ___ftdiv 26A4                      ___ftneg 2F66                      ___lldiv 2910  
            __size_of___wmul 0036                      ___ftmul 1FA0                      ___llmod 2B1C  
                    ___ftsub 2DFC                      ___fttol 20FE                      __pcinit 2C32  
               ??i2___ftpack 0006                   ??___awtoft 000C                   ??___ftpack 0065  
            __size_of_memset 0034              __size_of_fround 02AC      i2___ftmul@f3_as_product 0013  
                    __ramtop 0800                   ??___lltoft 006C                      __ptext0 0B58  
                    __ptext1 2D52                      __ptext2 0012                      __ptext3 110C  
                    __ptext4 2F96                      __ptext5 15BA                      __ptext6 2ECA  
                    __ptext7 1FA0                      __ptext8 2A7A                      __ptext9 2852  
                    _col_loc 00F0              __size_of_strcmp 0056                  ?__div_to_l_ 0060  
                    _dpowers 7E17                      _keyfind 2242                      _isdigit 2F96  
           ___awmod@dividend 0060                    _LCD_Clear 2FF2                      _sprintf 0012  
                    main@key 00DC               __pintcode_body 237E         end_of_initialization 2C90  
                    memset@c 0062                      memset@n 0064                      memset@p 0066  
             LCD_Command@cmd 0067                __Lmediumconst 7E16                      int_func 237E  
         __end_ofi2___ftpack 2A7A              ___lldiv@divisor 0064              ___lldiv@counter 006C  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0060               __tdiv_to_l_@f2 0063  
                    strcmp@r 0065                ??__tdiv_to_l_ 0066  __size_of_ADC_Interrupt_Init 0022  
                  _PORTAbits 000F80                    _PORTEbits 000F84                   _tempurture 00ED  
                 ?_LCD_Clear 0001                    i2___ftadd 1ACE                    i2___ftmul 25B0  
                ___ftdiv@exp 0025            __size_of_LCD_Char 005A              i2___ftpack@sign 0005  
          __size_of_LCD_Init 0032          __size_of__div_to_l_ 0188                  ___ftmul@exp 007D  
              ??_LCD_Command 0066               __end_of___ftge 2852               __end_of___wmul 2F00  
              __pidataCOMRAM 2FE2               __end_of_memset 2F34               __end_of_fround 1866  
             __end_of_strcmp 2DA8          start_initialization 2C32          __end_of__tdiv_to_l_ 1E18  
                 ?i2___ftadd 0027                   ?i2___ftmul 0009              ___llmod@divisor 0064  
            ___llmod@counter 0068                     ??___ftge 0066                     ??___wmul 0072  
                __pdataBANK0 00F3             __CFG_LPT1OSC$OFF 000000                     ?_ADC_ISR 0001  
                   ??_memset 0066                     ??_fround 0086                sprintf@tmpval 00B5  
                   ??_strcmp 0064                   fround@prec 008C            __size_of___awtoft 0038  
          __size_of___ftpack 010C          __end_of_LCD_Command 2D52            __size_of___lltoft 007C  
                __pbssCOMRAM 0056                __pcstackBANK0 0060                  ??_LCD_Clear 0068  
                   ?_MSdelay 0060                  sprintf@flag 00BB                  sprintf@fval 00BF  
                sprintf@prec 00C2                    __pintcode 0008                __pmediumconst 7E16  
                   ?___awdiv 0066                     ?___ftadd 008D                     ?___awmod 0060  
                   ?___ftdiv 0018                     ?___ftneg 0060                     ?___lldiv 0060  
                   ?___ftmul 0074                     ?___llmod 0060                     ?___ftsub 0099  
                  __npowers_ 7E3F                     ?___fttol 008A                  __tdiv_to_l_ 1C7A  
               ??__div_to_l_ 0066                     ?_keyfind 0001                     ?_isdigit 0001  
                ??i2___ftadd 002D                     ?_sprintf 009F                  ??i2___ftmul 000F  
             __size_of_scale 04AE                     MSdelay@i 0062                     MSdelay@j 0064  
                   _LCD_Char 2C9E                     _LCD_Init 2F34               ___wmul@product 0072  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     _PIR1bits 000F9E  
         __end_of__div_to_l_ 1FA0             __CFG_WDTPS$32768 000000                    _value_adc 0056  
                  main@F3964 00DF                    main@F3966 00E6                    main@F3968 00F3  
                _LCD_Command 2CF8             __size_of_ADC_ISR 249C                   _ADCON0bits 000FC2  
          ___wmul@multiplier 006E                    main@count 00DD                    copy_data0 2C46  
                  copy_data1 2C66             __size_of_MSdelay 004A                     __Hrparam 0000  
                   __Lrparam 0000   __end_of_ADC_Interrupt_Init 2FE2             __size_of___awdiv 00BE  
           __size_of___ftadd 0268             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0030             __size_of___lldiv 00BC             __size_of___ftmul 015E  
           __size_of___llmod 009A             __size_of___ftsub 004C             __size_of___fttol 0144  
            main@pass_verify 00C5                     ___awtoft 2E92                     ___ftpack 24A4  
                _fround$1156 0089                  _fround$1157 0086                     ___lltoft 2BB6  
                _isdigit$826 0061                   sprintf@exp 00B9                   sprintf@val 00B1  
           __size_of_keyfind 013C             __size_of_isdigit 002A                     __ptext10 1C7A  
                   __ptext11 1E18                     __ptext20 278A                     __ptext12 2BB6  
                   __ptext21 2F00                     __ptext13 2B1C                     __ptext22 2242  
                   __ptext14 2910                     __ptext31 25B0                     __ptext23 2DA8  
                   __ptext15 20FE                     __ptext32 1ACE                     __ptext24 2C9E  
                   __ptext16 2DFC                     __ptext33 26A4                     __ptext25 2F34  
                   __ptext17 1866                     __ptext34 2E92                     __ptext26 2FF2  
                   __ptext18 24A4                     __ptext35 29CC                     __ptext27 2CF8  
                   __ptext19 2F66                     __ptext28 2E48                     __ptext29 2FC0  
                   __powers_ 7E66             __size_of_sprintf 0B46                __size_of_main 05B4  
                 MSdelay@val 0060                     _temp_col 00F2                     int$flags 0059  
                   main@pass 00D3                   _LCD_String 2DA8        __CFG_CPUDIV$OSC1_PLL2 000000  
                 _INTCONbits 000FF2                     isdigit@c 0062                     memset@p1 0060  
                   scale@scl 0089                     intlevel2 0000                    sprintf@ap 00AF  
           __tdiv_to_l_@exp1 006E                    sprintf@sp 009F             __tdiv_to_l_@cntr 006D  
           __tdiv_to_l_@quot 0069             ___lldiv@dividend 0060                 ?__tdiv_to_l_ 0060  
        __CFG_FOSC$INTOSC_EC 000000                     sprintf@c 00C4                     sprintf@f 00A1  
                   strcmp@s1 0060                     strcmp@s2 0062             ___lldiv@quotient 0068  
