

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Jul 30 17:01:00 2021

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.40
    58                           ; Generated 01/12/2016 GMT
    59                           ; 
    60                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4550 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  002FF6                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _keypad
    97  002FF6  37                 	db	55
    98  002FF7  38                 	db	56
    99  002FF8  39                 	db	57
   100  002FF9  2F                 	db	47
   101  002FFA  34                 	db	52
   102  002FFB  35                 	db	53
   103  002FFC  36                 	db	54
   104  002FFD  2A                 	db	42
   105  002FFE  31                 	db	49
   106  002FFF  32                 	db	50
   107  003000  33                 	db	51
   108  003001  2D                 	db	45
   109  003002  20                 	db	32
   110  003003  30                 	db	48
   111  003004  3D                 	db	61
   112  003005  2B                 	db	43
   113                           
   114                           	psect	idataBANK0
   115  00300E                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for main@F3968
   119  00300E  31                 	db	49
   120  00300F  32                 	db	50
   121  003010  33                 	db	51
   122  003011  34                 	db	52
   123  003012  35                 	db	53
   124  003013  37                 	db	55
   125  003014  00                 	db	0
   126                           
   127                           	psect	mediumconst
   128  007E16                     __pmediumconst:
   129                           	opt stack 0
   130  007E16  00                 	db	0
   131  007E17                     _dpowers:
   132                           	opt stack 0
   133  007E17  0001               	dw	1
   134  007E19  0000               	dw	0
   135  007E1B  000A               	dw	10
   136  007E1D  0000               	dw	0
   137  007E1F  0064               	dw	100
   138  007E21  0000               	dw	0
   139  007E23  03E8               	dw	1000
   140  007E25  0000               	dw	0
   141  007E27  2710               	dw	10000
   142  007E29  0000               	dw	0
   143  007E2B  86A0               	dw	34464
   144  007E2D  0001               	dw	1
   145  007E2F  4240               	dw	16960
   146  007E31  000F               	dw	15
   147  007E33  9680               	dw	38528
   148  007E35  0098               	dw	152
   149  007E37  E100               	dw	57600
   150  007E39  05F5               	dw	1525
   151  007E3B  CA00               	dw	51712
   152  007E3D  3B9A               	dw	15258
   153  007E3F                     __end_of_dpowers:
   154                           	opt stack 0
   155  007E3F                     __npowers_:
   156                           	opt stack 0
   157  007E3F  00                 	db	0
   158  007E40  80                 	db	128
   159  007E41  3F                 	db	63
   160  007E42  CD                 	db	205
   161  007E43  CC                 	db	204
   162  007E44  3D                 	db	61
   163  007E45  D7                 	db	215
   164  007E46  23                 	db	35
   165  007E47  3C                 	db	60
   166  007E48  12                 	db	18
   167  007E49  83                 	db	131
   168  007E4A  3A                 	db	58
   169  007E4B  B7                 	db	183
   170  007E4C  D1                 	db	209
   171  007E4D  38                 	db	56
   172  007E4E  C6                 	db	198
   173  007E4F  27                 	db	39
   174  007E50  37                 	db	55
   175  007E51  38                 	db	56
   176  007E52  86                 	db	134
   177  007E53  35                 	db	53
   178  007E54  C0                 	db	192
   179  007E55  D6                 	db	214
   180  007E56  33                 	db	51
   181  007E57  CC                 	db	204
   182  007E58  2B                 	db	43
   183  007E59  32                 	db	50
   184  007E5A  70                 	db	112
   185  007E5B  89                 	db	137
   186  007E5C  30                 	db	48
   187  007E5D  E7                 	db	231
   188  007E5E  DB                 	db	219
   189  007E5F  2E                 	db	46
   190  007E60  E5                 	db	229
   191  007E61  3C                 	db	60
   192  007E62  1E                 	db	30
   193  007E63  42                 	db	66
   194  007E64  A2                 	db	162
   195  007E65  0D                 	db	13
   196  007E66                     __end_of__npowers_:
   197                           	opt stack 0
   198  007E66                     __powers_:
   199                           	opt stack 0
   200  007E66  00                 	db	0
   201  007E67  80                 	db	128
   202  007E68  3F                 	db	63
   203  007E69  00                 	db	0
   204  007E6A  20                 	db	32
   205  007E6B  41                 	db	65
   206  007E6C  00                 	db	0
   207  007E6D  C8                 	db	200
   208  007E6E  42                 	db	66
   209  007E6F  00                 	db	0
   210  007E70  7A                 	db	122
   211  007E71  44                 	db	68
   212  007E72  40                 	db	64
   213  007E73  1C                 	db	28
   214  007E74  46                 	db	70
   215  007E75  50                 	db	80
   216  007E76  C3                 	db	195
   217  007E77  47                 	db	71
   218  007E78  24                 	db	36
   219  007E79  74                 	db	116
   220  007E7A  49                 	db	73
   221  007E7B  97                 	db	151
   222  007E7C  18                 	db	24
   223  007E7D  4B                 	db	75
   224  007E7E  BC                 	db	188
   225  007E7F  BE                 	db	190
   226  007E80  4C                 	db	76
   227  007E81  6B                 	db	107
   228  007E82  6E                 	db	110
   229  007E83  4E                 	db	78
   230  007E84  03                 	db	3
   231  007E85  15                 	db	21
   232  007E86  50                 	db	80
   233  007E87  79                 	db	121
   234  007E88  AD                 	db	173
   235  007E89  60                 	db	96
   236  007E8A  F3                 	db	243
   237  007E8B  49                 	db	73
   238  007E8C  71                 	db	113
   239  007E8D                     __end_of__powers_:
   240                           	opt stack 0
   241  0000                     _ADCON0	set	4034
   242  0000                     _ADCON0bits	set	4034
   243  0000                     _ADCON1	set	4033
   244  0000                     _ADCON2	set	4032
   245  0000                     _ADRESH	set	4036
   246  0000                     _ADRESL	set	4035
   247  0000                     _INTCONbits	set	4082
   248  0000                     _LATB	set	3978
   249  0000                     _LATC	set	3979
   250  0000                     _LATCbits	set	3979
   251  0000                     _LATD	set	3980
   252  0000                     _OSCCON	set	4051
   253  0000                     _PIE1bits	set	3997
   254  0000                     _PIR1bits	set	3998
   255  0000                     _PORTA	set	3968
   256  0000                     _PORTAbits	set	3968
   257  0000                     _PORTB	set	3969
   258  0000                     _PORTC	set	3970
   259  0000                     _PORTEbits	set	3972
   260  0000                     _TRISA	set	3986
   261  0000                     _TRISB	set	3987
   262  0000                     _TRISC	set	3988
   263  0000                     _TRISD	set	3989
   264  0000                     _TRISE	set	3990
   265  0000                     _ADIF	set	31990
   266  0000                     _LATD0	set	31840
   267  0000                     _LATD1	set	31841
   268  0000                     _RBPU	set	32655
   269  007E8D                     STR_10:
   270  007E8D  56                 	db	86	;'V'
   271  007E8E  65                 	db	101	;'e'
   272  007E8F  72                 	db	114	;'r'
   273  007E90  69                 	db	105	;'i'
   274  007E91  66                 	db	102	;'f'
   275  007E92  79                 	db	121	;'y'
   276  007E93  20                 	db	32
   277  007E94  6E                 	db	110	;'n'
   278  007E95  65                 	db	101	;'e'
   279  007E96  77                 	db	119	;'w'
   280  007E97  20                 	db	32
   281  007E98  70                 	db	112	;'p'
   282  007E99  61                 	db	97	;'a'
   283  007E9A  73                 	db	115	;'s'
   284  007E9B  73                 	db	115	;'s'
   285  007E9C  20                 	db	32
   286  007E9D  20                 	db	32
   287  007E9E  20                 	db	32
   288  007E9F  20                 	db	32
   289  007EA0  20                 	db	32
   290  007EA1  20                 	db	32
   291  007EA2  20                 	db	32
   292  007EA3  20                 	db	32
   293  007EA4  20                 	db	32
   294  007EA5  20                 	db	32
   295  007EA6  20                 	db	32
   296  007EA7  20                 	db	32
   297  007EA8  20                 	db	32
   298  007EA9  20                 	db	32
   299  007EAA  20                 	db	32
   300  007EAB  00                 	db	0
   301  007EAC                     STR_9:
   302  007EAC  45                 	db	69	;'E'
   303  007EAD  6E                 	db	110	;'n'
   304  007EAE  74                 	db	116	;'t'
   305  007EAF  65                 	db	101	;'e'
   306  007EB0  72                 	db	114	;'r'
   307  007EB1  20                 	db	32
   308  007EB2  6E                 	db	110	;'n'
   309  007EB3  65                 	db	101	;'e'
   310  007EB4  77                 	db	119	;'w'
   311  007EB5  20                 	db	32
   312  007EB6  70                 	db	112	;'p'
   313  007EB7  61                 	db	97	;'a'
   314  007EB8  73                 	db	115	;'s'
   315  007EB9  73                 	db	115	;'s'
   316  007EBA  20                 	db	32
   317  007EBB  20                 	db	32
   318  007EBC  20                 	db	32
   319  007EBD  20                 	db	32
   320  007EBE  20                 	db	32
   321  007EBF  20                 	db	32
   322  007EC0  20                 	db	32
   323  007EC1  20                 	db	32
   324  007EC2  20                 	db	32
   325  007EC3  20                 	db	32
   326  007EC4  20                 	db	32
   327  007EC5  20                 	db	32
   328  007EC6  20                 	db	32
   329  007EC7  20                 	db	32
   330  007EC8  20                 	db	32
   331  007EC9  00                 	db	0
   332  007ECA                     STR_6:
   333  007ECA  4F                 	db	79	;'O'
   334  007ECB  75                 	db	117	;'u'
   335  007ECC  74                 	db	116	;'t'
   336  007ECD  20                 	db	32
   337  007ECE  6F                 	db	111	;'o'
   338  007ECF  66                 	db	102	;'f'
   339  007ED0  20                 	db	32
   340  007ED1  6D                 	db	109	;'m'
   341  007ED2  6F                 	db	111	;'o'
   342  007ED3  76                 	db	118	;'v'
   343  007ED4  65                 	db	101	;'e'
   344  007ED5  20                 	db	32
   345  007ED6  21                 	db	33
   346  007ED7  21                 	db	33
   347  007ED8  21                 	db	33
   348  007ED9  20                 	db	32
   349  007EDA  20                 	db	32
   350  007EDB  20                 	db	32
   351  007EDC  20                 	db	32
   352  007EDD  20                 	db	32
   353  007EDE  20                 	db	32
   354  007EDF  20                 	db	32
   355  007EE0  20                 	db	32
   356  007EE1  20                 	db	32
   357  007EE2  20                 	db	32
   358  007EE3  20                 	db	32
   359  007EE4  20                 	db	32
   360  007EE5  00                 	db	0
   361  007EE6                     STR_2:
   362  007EE6  53                 	db	83	;'S'
   363  007EE7  75                 	db	117	;'u'
   364  007EE8  63                 	db	99	;'c'
   365  007EE9  63                 	db	99	;'c'
   366  007EEA  65                 	db	101	;'e'
   367  007EEB  73                 	db	115	;'s'
   368  007EEC  73                 	db	115	;'s'
   369  007EED  66                 	db	102	;'f'
   370  007EEE  75                 	db	117	;'u'
   371  007EEF  6C                 	db	108	;'l'
   372  007EF0  20                 	db	32
   373  007EF1  20                 	db	32
   374  007EF2  20                 	db	32
   375  007EF3  20                 	db	32
   376  007EF4  20                 	db	32
   377  007EF5  20                 	db	32
   378  007EF6  20                 	db	32
   379  007EF7  20                 	db	32
   380  007EF8  20                 	db	32
   381  007EF9  20                 	db	32
   382  007EFA  20                 	db	32
   383  007EFB  20                 	db	32
   384  007EFC  20                 	db	32
   385  007EFD  20                 	db	32
   386  007EFE  20                 	db	32
   387  007EFF  00                 	db	0
   388  007F00                     STR_1:
   389  007F00  45                 	db	69	;'E'
   390  007F01  6E                 	db	110	;'n'
   391  007F02  74                 	db	116	;'t'
   392  007F03  65                 	db	101	;'e'
   393  007F04  72                 	db	114	;'r'
   394  007F05  20                 	db	32
   395  007F06  70                 	db	112	;'p'
   396  007F07  61                 	db	97	;'a'
   397  007F08  73                 	db	115	;'s'
   398  007F09  73                 	db	115	;'s'
   399  007F0A  21                 	db	33
   400  007F0B  21                 	db	33
   401  007F0C  20                 	db	32
   402  007F0D  20                 	db	32
   403  007F0E  20                 	db	32
   404  007F0F  20                 	db	32
   405  007F10  20                 	db	32
   406  007F11  20                 	db	32
   407  007F12  20                 	db	32
   408  007F13  20                 	db	32
   409  007F14  20                 	db	32
   410  007F15  20                 	db	32
   411  007F16  20                 	db	32
   412  007F17  20                 	db	32
   413  007F18  20                 	db	32
   414  007F19  00                 	db	0
   415  007F1A                     STR_5:
   416  007F1A  46                 	db	70	;'F'
   417  007F1B  61                 	db	97	;'a'
   418  007F1C  6E                 	db	110	;'n'
   419  007F1D  20                 	db	32
   420  007F1E  74                 	db	116	;'t'
   421  007F1F  75                 	db	117	;'u'
   422  007F20  72                 	db	114	;'r'
   423  007F21  6E                 	db	110	;'n'
   424  007F22  69                 	db	105	;'i'
   425  007F23  6E                 	db	110	;'n'
   426  007F24  67                 	db	103	;'g'
   427  007F25  20                 	db	32
   428  007F26  6F                 	db	111	;'o'
   429  007F27  66                 	db	102	;'f'
   430  007F28  66                 	db	102	;'f'
   431  007F29  20                 	db	32
   432  007F2A  20                 	db	32
   433  007F2B  20                 	db	32
   434  007F2C  20                 	db	32
   435  007F2D  20                 	db	32
   436  007F2E  20                 	db	32
   437  007F2F  20                 	db	32
   438  007F30  20                 	db	32
   439  007F31  20                 	db	32
   440  007F32  20                 	db	32
   441  007F33  00                 	db	0
   442  007F34                     STR_4:
   443  007F34  46                 	db	70	;'F'
   444  007F35  61                 	db	97	;'a'
   445  007F36  6E                 	db	110	;'n'
   446  007F37  20                 	db	32
   447  007F38  74                 	db	116	;'t'
   448  007F39  75                 	db	117	;'u'
   449  007F3A  72                 	db	114	;'r'
   450  007F3B  6E                 	db	110	;'n'
   451  007F3C  69                 	db	105	;'i'
   452  007F3D  6E                 	db	110	;'n'
   453  007F3E  67                 	db	103	;'g'
   454  007F3F  20                 	db	32
   455  007F40  6F                 	db	111	;'o'
   456  007F41  6E                 	db	110	;'n'
   457  007F42  20                 	db	32
   458  007F43  20                 	db	32
   459  007F44  20                 	db	32
   460  007F45  20                 	db	32
   461  007F46  20                 	db	32
   462  007F47  20                 	db	32
   463  007F48  20                 	db	32
   464  007F49  20                 	db	32
   465  007F4A  20                 	db	32
   466  007F4B  20                 	db	32
   467  007F4C  00                 	db	0
   468  007F4D                     STR_12:
   469  007F4D  43                 	db	67	;'C'
   470  007F4E  68                 	db	104	;'h'
   471  007F4F  61                 	db	97	;'a'
   472  007F50  6E                 	db	110	;'n'
   473  007F51  67                 	db	103	;'g'
   474  007F52  65                 	db	101	;'e'
   475  007F53  20                 	db	32
   476  007F54  70                 	db	112	;'p'
   477  007F55  61                 	db	97	;'a'
   478  007F56  73                 	db	115	;'s'
   479  007F57  73                 	db	115	;'s'
   480  007F58  20                 	db	32
   481  007F59  46                 	db	70	;'F'
   482  007F5A  41                 	db	65	;'A'
   483  007F5B  49                 	db	73	;'I'
   484  007F5C  4C                 	db	76	;'L'
   485  007F5D  45                 	db	69	;'E'
   486  007F5E  44                 	db	68	;'D'
   487  007F5F  20                 	db	32
   488  007F60  20                 	db	32
   489  007F61  20                 	db	32
   490  007F62  20                 	db	32
   491  007F63  20                 	db	32
   492  007F64  00                 	db	0
   493  007F65                     STR_7:
   494  007F65  46                 	db	70	;'F'
   495  007F66  61                 	db	97	;'a'
   496  007F67  69                 	db	105	;'i'
   497  007F68  6C                 	db	108	;'l'
   498  007F69  65                 	db	101	;'e'
   499  007F6A  64                 	db	100	;'d'
   500  007F6B  20                 	db	32
   501  007F6C  20                 	db	32
   502  007F6D  20                 	db	32
   503  007F6E  20                 	db	32
   504  007F6F  20                 	db	32
   505  007F70  20                 	db	32
   506  007F71  20                 	db	32
   507  007F72  20                 	db	32
   508  007F73  20                 	db	32
   509  007F74  20                 	db	32
   510  007F75  20                 	db	32
   511  007F76  20                 	db	32
   512  007F77  20                 	db	32
   513  007F78  20                 	db	32
   514  007F79  20                 	db	32
   515  007F7A  00                 	db	0
   516  007F7B                     STR_8:
   517  007F7B  45                 	db	69	;'E'
   518  007F7C  6E                 	db	110	;'n'
   519  007F7D  5F                 	db	95	;'_'
   520  007F7E  70                 	db	112	;'p'
   521  007F7F  61                 	db	97	;'a'
   522  007F80  73                 	db	115	;'s'
   523  007F81  73                 	db	115	;'s'
   524  007F82  20                 	db	32
   525  007F83  70                 	db	112	;'p'
   526  007F84  72                 	db	114	;'r'
   527  007F85  65                 	db	101	;'e'
   528  007F86  73                 	db	115	;'s'
   529  007F87  65                 	db	101	;'e'
   530  007F88  6E                 	db	110	;'n'
   531  007F89  74                 	db	116	;'t'
   532  007F8A  20                 	db	32
   533  007F8B  20                 	db	32
   534  007F8C  20                 	db	32
   535  007F8D  20                 	db	32
   536  007F8E  20                 	db	32
   537  007F8F  00                 	db	0
   538  007F90                     STR_14:
   539  007F90  74                 	db	116	;'t'
   540  007F91  6F                 	db	111	;'o'
   541  007F92  20                 	db	32
   542  007F93  72                 	db	114	;'r'
   543  007F94  65                 	db	101	;'e'
   544  007F95  63                 	db	99	;'c'
   545  007F96  68                 	db	104	;'h'
   546  007F97  61                 	db	97	;'a'
   547  007F98  6E                 	db	110	;'n'
   548  007F99  67                 	db	103	;'g'
   549  007F9A  65                 	db	101	;'e'
   550  007F9B  20                 	db	32
   551  007F9C  70                 	db	112	;'p'
   552  007F9D  61                 	db	97	;'a'
   553  007F9E  73                 	db	115	;'s'
   554  007F9F  73                 	db	115	;'s'
   555  007FA0  20                 	db	32
   556  007FA1  20                 	db	32
   557  007FA2  20                 	db	32
   558  007FA3  20                 	db	32
   559  007FA4  00                 	db	0
   560  007FA5                     STR_11:
   561  007FA5  43                 	db	67	;'C'
   562  007FA6  68                 	db	104	;'h'
   563  007FA7  61                 	db	97	;'a'
   564  007FA8  6E                 	db	110	;'n'
   565  007FA9  67                 	db	103	;'g'
   566  007FAA  65                 	db	101	;'e'
   567  007FAB  20                 	db	32
   568  007FAC  70                 	db	112	;'p'
   569  007FAD  61                 	db	97	;'a'
   570  007FAE  73                 	db	115	;'s'
   571  007FAF  73                 	db	115	;'s'
   572  007FB0  20                 	db	32
   573  007FB1  4F                 	db	79	;'O'
   574  007FB2  4B                 	db	75	;'K'
   575  007FB3  20                 	db	32
   576  007FB4  20                 	db	32
   577  007FB5  20                 	db	32
   578  007FB6  20                 	db	32
   579  007FB7  20                 	db	32
   580  007FB8  00                 	db	0
   581  007FB9                     STR_3:
   582  007FB9  54                 	db	84	;'T'
   583  007FBA  65                 	db	101	;'e'
   584  007FBB  6D                 	db	109	;'m'
   585  007FBC  70                 	db	112	;'p'
   586  007FBD  65                 	db	101	;'e'
   587  007FBE  72                 	db	114	;'r'
   588  007FBF  61                 	db	97	;'a'
   589  007FC0  74                 	db	116	;'t'
   590  007FC1  75                 	db	117	;'u'
   591  007FC2  72                 	db	114	;'r'
   592  007FC3  65                 	db	101	;'e'
   593  007FC4  3D                 	db	61	;'='
   594  007FC5  25                 	db	37
   595  007FC6  30                 	db	48	;'0'
   596  007FC7  2E                 	db	46
   597  007FC8  31                 	db	49	;'1'
   598  007FC9  66                 	db	102	;'f'
   599  007FCA  00                 	db	0
   600  007FCB                     STR_18:
   601  007FCB  20                 	db	32
   602  007FCC  50                 	db	80	;'P'
   603  007FCD  52                 	db	82	;'R'
   604  007FCE  45                 	db	69	;'E'
   605  007FCF  53                 	db	83	;'S'
   606  007FD0  53                 	db	83	;'S'
   607  007FD1  20                 	db	32
   608  007FD2  45                 	db	69	;'E'
   609  007FD3  4E                 	db	78	;'N'
   610  007FD4  5F                 	db	95	;'_'
   611  007FD5  4B                 	db	75	;'K'
   612  007FD6  45                 	db	69	;'E'
   613  007FD7  59                 	db	89	;'Y'
   614  007FD8  21                 	db	33
   615  007FD9  21                 	db	33
   616  007FDA  20                 	db	32
   617  007FDB  00                 	db	0
   618  007FDC                     STR_17:
   619  007FDC  57                 	db	87	;'W'
   620  007FDD  45                 	db	69	;'E'
   621  007FDE  4C                 	db	76	;'L'
   622  007FDF  43                 	db	67	;'C'
   623  007FE0  4F                 	db	79	;'O'
   624  007FE1  4D                 	db	77	;'M'
   625  007FE2  45                 	db	69	;'E'
   626  007FE3  20                 	db	32
   627  007FE4  54                 	db	84	;'T'
   628  007FE5  4F                 	db	79	;'O'
   629  007FE6  20                 	db	32
   630  007FE7  48                 	db	72	;'H'
   631  007FE8  4F                 	db	79	;'O'
   632  007FE9  4D                 	db	77	;'M'
   633  007FEA  45                 	db	69	;'E'
   634  007FEB  21                 	db	33
   635  007FEC  00                 	db	0
   636  007FED                     STR_13:
   637  007FED  50                 	db	80	;'P'
   638  007FEE  72                 	db	114	;'r'
   639  007FEF  65                 	db	101	;'e'
   640  007FF0  73                 	db	115	;'s'
   641  007FF1  73                 	db	115	;'s'
   642  007FF2  20                 	db	32
   643  007FF3  52                 	db	82	;'R'
   644  007FF4  45                 	db	69	;'E'
   645  007FF5  53                 	db	83	;'S'
   646  007FF6  45                 	db	69	;'E'
   647  007FF7  54                 	db	84	;'T'
   648  007FF8  5F                 	db	95	;'_'
   649  007FF9  50                 	db	80	;'P'
   650  007FFA  41                 	db	65	;'A'
   651  007FFB  53                 	db	83	;'S'
   652  007FFC  53                 	db	83	;'S'
   653  007FFD  00                 	db	0
   654  0000                     
   655                           ; #config settings
   656  007FFE  00                 	db	0	; dummy byte at the end
   657  0000                     
   658                           	psect	cinit
   659  002C46                     __pcinit:
   660                           	opt stack 0
   661  002C46                     start_initialization:
   662                           	opt stack 0
   663  002C46                     __initialization:
   664                           	opt stack 0
   665                           
   666                           ; Initialize objects allocated to BANK0 (7 bytes)
   667                           ; load TBLPTR registers with __pidataBANK0
   668  002C46  0E0E               	movlw	low __pidataBANK0
   669  002C48  6EF6               	movwf	tblptrl,c
   670  002C4A  0E30               	movlw	high __pidataBANK0
   671  002C4C  6EF7               	movwf	tblptrh,c
   672  002C4E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   673  002C50  6EF8               	movwf	tblptru,c
   674  002C52  EE00  F0F3         	lfsr	0,__pdataBANK0
   675  002C56  EE10 F007          	lfsr	1,7
   676  002C5A                     copy_data0:
   677  002C5A  0009               	tblrd		*+
   678  002C5C  CFF5 FFEE          	movff	tablat,postinc0
   679  002C60  50E5               	movf	postdec1,w,c
   680  002C62  50E1               	movf	fsr1l,w,c
   681  002C64  E1FA               	bnz	copy_data0
   682                           
   683                           ; Initialize objects allocated to COMRAM (16 bytes)
   684                           ; load TBLPTR registers with __pidataCOMRAM
   685  002C66  0EF6               	movlw	low __pidataCOMRAM
   686  002C68  6EF6               	movwf	tblptrl,c
   687  002C6A  0E2F               	movlw	high __pidataCOMRAM
   688  002C6C  6EF7               	movwf	tblptrh,c
   689  002C6E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   690  002C70  6EF8               	movwf	tblptru,c
   691  002C72  EE00  F046         	lfsr	0,__pdataCOMRAM
   692  002C76  EE10 F010          	lfsr	1,16
   693  002C7A                     copy_data1:
   694  002C7A  0009               	tblrd		*+
   695  002C7C  CFF5 FFEE          	movff	tablat,postinc0
   696  002C80  50E5               	movf	postdec1,w,c
   697  002C82  50E1               	movf	fsr1l,w,c
   698  002C84  E1FA               	bnz	copy_data1
   699                           
   700                           ; Clear objects allocated to BANK1 (50 bytes)
   701  002C86  EE01  F000         	lfsr	0,__pbssBANK1
   702  002C8A  0E32               	movlw	50
   703  002C8C                     clear_0:
   704  002C8C  6AEE               	clrf	postinc0,c
   705  002C8E  06E8               	decf	wreg,f,c
   706  002C90  E1FD               	bnz	clear_0
   707                           
   708                           ; Clear objects allocated to BANK0 (20 bytes)
   709  002C92  EE00  F0DF         	lfsr	0,__pbssBANK0
   710  002C96  0E14               	movlw	20
   711  002C98                     clear_1:
   712  002C98  6AEE               	clrf	postinc0,c
   713  002C9A  06E8               	decf	wreg,f,c
   714  002C9C  E1FD               	bnz	clear_1
   715                           
   716                           ; Clear objects allocated to COMRAM (3 bytes)
   717  002C9E  6A58               	clrf	(__pbssCOMRAM+2)& (0+255),c
   718  002CA0  6A57               	clrf	(__pbssCOMRAM+1)& (0+255),c
   719  002CA2  6A56               	clrf	__pbssCOMRAM& (0+255),c
   720  002CA4                     end_of_initialization:
   721                           	opt stack 0
   722  002CA4                     __end_of__initialization:
   723                           	opt stack 0
   724  002CA4  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   725  002CA6  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   726  002CA8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   727  002CAA  6EF8               	movwf	tblptru,c
   728  002CAC  0100               	movlb	0
   729  002CAE  EFAC  F005         	goto	_main	;jump to C main() function
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	bssCOMRAM
   740  000056                     __pbssCOMRAM:
   741                           	opt stack 0
   742  000056                     _value_adc:
   743                           	opt stack 0
   744  000056                     	ds	3
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	dataCOMRAM
   755  000046                     __pdataCOMRAM:
   756                           	opt stack 0
   757  000046                     _keypad:
   758                           	opt stack 0
   759  000046                     	ds	16
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           
   769                           	psect	bssBANK0
   770  0000DF                     __pbssBANK0:
   771                           	opt stack 0
   772  0000DF                     main@F3964:
   773                           	opt stack 0
   774  0000DF                     	ds	7
   775  0000E6                     main@F3966:
   776                           	opt stack 0
   777  0000E6                     	ds	7
   778  0000ED                     _tempurture:
   779                           	opt stack 0
   780  0000ED                     	ds	3
   781  0000F0                     _col_loc:
   782                           	opt stack 0
   783  0000F0                     	ds	1
   784  0000F1                     _rowloc:
   785                           	opt stack 0
   786  0000F1                     	ds	1
   787  0000F2                     _temp_col:
   788                           	opt stack 0
   789  0000F2                     	ds	1
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           
   799                           	psect	dataBANK0
   800  0000F3                     __pdataBANK0:
   801                           	opt stack 0
   802  0000F3                     main@F3968:
   803                           	opt stack 0
   804  0000F3                     	ds	7
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           postdec1	equ	0xFE5
   812                           fsr1l	equ	0xFE1
   813                           
   814                           	psect	bssBANK1
   815  000100                     __pbssBANK1:
   816                           	opt stack 0
   817  000100                     _buffer:
   818                           	opt stack 0
   819  000100                     	ds	50
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000060                     __pcstackBANK0:
   831                           	opt stack 0
   832  000060                     ??_isdigit:
   833  000060                     ?_strcmp:
   834                           	opt stack 0
   835  000060                     ?___awmod:
   836                           	opt stack 0
   837  000060                     ?___ftpack:
   838                           	opt stack 0
   839  000060                     ?___ftneg:
   840                           	opt stack 0
   841  000060                     ?__tdiv_to_l_:
   842                           	opt stack 0
   843  000060                     ?__div_to_l_:
   844                           	opt stack 0
   845  000060                     ?___lldiv:
   846                           	opt stack 0
   847  000060                     ?___llmod:
   848                           	opt stack 0
   849  000060                     MSdelay@val:
   850                           	opt stack 0
   851  000060                     ___awmod@dividend:
   852                           	opt stack 0
   853  000060                     memset@p1:
   854                           	opt stack 0
   855  000060                     strcmp@s1:
   856                           	opt stack 0
   857  000060                     __div_to_l_@f1:
   858                           	opt stack 0
   859  000060                     ___ftpack@arg:
   860                           	opt stack 0
   861  000060                     __tdiv_to_l_@f1:
   862                           	opt stack 0
   863  000060                     ___ftge@ff1:
   864                           	opt stack 0
   865  000060                     ___ftneg@f1:
   866                           	opt stack 0
   867  000060                     ___lldiv@dividend:
   868                           	opt stack 0
   869  000060                     ___llmod@dividend:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x0
   873  000060                     	ds	1
   874  000061                     _isdigit$826:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1
   878  000061                     	ds	1
   879  000062                     isdigit@c:
   880                           	opt stack 0
   881  000062                     MSdelay@i:
   882                           	opt stack 0
   883  000062                     ___awmod@divisor:
   884                           	opt stack 0
   885  000062                     memset@c:
   886                           	opt stack 0
   887  000062                     strcmp@s2:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x2
   891  000062                     	ds	1
   892  000063                     ___ftpack@exp:
   893                           	opt stack 0
   894  000063                     __div_to_l_@f2:
   895                           	opt stack 0
   896  000063                     __tdiv_to_l_@f2:
   897                           	opt stack 0
   898  000063                     ___ftge@ff2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x3
   902  000063                     	ds	1
   903  000064                     ??_strcmp:
   904  000064                     ___awmod@counter:
   905                           	opt stack 0
   906  000064                     ___ftpack@sign:
   907                           	opt stack 0
   908  000064                     MSdelay@j:
   909                           	opt stack 0
   910  000064                     memset@n:
   911                           	opt stack 0
   912  000064                     ___lldiv@divisor:
   913                           	opt stack 0
   914  000064                     ___llmod@divisor:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x4
   918  000064                     	ds	1
   919  000065                     ??___ftpack:
   920  000065                     ___awmod@sign:
   921                           	opt stack 0
   922  000065                     strcmp@r:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x5
   926  000065                     	ds	1
   927  000066                     ??_LCD_Command:
   928  000066                     ??_LCD_Char:
   929  000066                     ??__tdiv_to_l_:
   930  000066                     ??___ftge:
   931  000066                     ?___awdiv:
   932                           	opt stack 0
   933  000066                     ___awdiv@dividend:
   934                           	opt stack 0
   935  000066                     memset@p:
   936                           	opt stack 0
   937  000066                     __div_to_l_@quot:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x6
   941  000066                     	ds	1
   942  000067                     LCD_Command@cmd:
   943                           	opt stack 0
   944  000067                     LCD_Char@dat:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x7
   948  000067                     	ds	1
   949  000068                     ?___lltoft:
   950                           	opt stack 0
   951  000068                     ___llmod@counter:
   952                           	opt stack 0
   953  000068                     LCD_String@msg:
   954                           	opt stack 0
   955  000068                     ___awdiv@divisor:
   956                           	opt stack 0
   957  000068                     ___lldiv@quotient:
   958                           	opt stack 0
   959  000068                     ___lltoft@c:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x8
   963  000068                     	ds	1
   964  000069                     __tdiv_to_l_@quot:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x9
   968  000069                     	ds	1
   969  00006A                     ___awdiv@counter:
   970                           	opt stack 0
   971  00006A                     __div_to_l_@cntr:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0xA
   975  00006A                     	ds	1
   976  00006B                     ___awdiv@sign:
   977                           	opt stack 0
   978  00006B                     __div_to_l_@exp1:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0xB
   982  00006B                     	ds	1
   983  00006C                     ??___lltoft:
   984  00006C                     ___lldiv@counter:
   985                           	opt stack 0
   986  00006C                     ___awdiv@quotient:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xC
   990  00006C                     	ds	1
   991  00006D                     __tdiv_to_l_@cntr:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0xD
   995  00006D                     	ds	1
   996  00006E                     ?___wmul:
   997                           	opt stack 0
   998  00006E                     __tdiv_to_l_@exp1:
   999                           	opt stack 0
  1000  00006E                     ___wmul@multiplier:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xE
  1004  00006E                     	ds	2
  1005  000070                     ___lltoft@exp:
  1006                           	opt stack 0
  1007  000070                     ___wmul@multiplicand:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x10
  1011  000070                     	ds	2
  1012  000072                     ___wmul@product:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x12
  1016  000072                     	ds	2
  1017  000074                     ?___ftmul:
  1018                           	opt stack 0
  1019  000074                     ___ftmul@f1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x14
  1023  000074                     	ds	3
  1024  000077                     ___ftmul@f2:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x17
  1028  000077                     	ds	3
  1029  00007A                     ??___ftmul:
  1030                           
  1031                           ; 1 bytes @ 0x1A
  1032  00007A                     	ds	3
  1033  00007D                     ___ftmul@exp:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x1D
  1037  00007D                     	ds	1
  1038  00007E                     ___ftmul@f3_as_product:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x1E
  1042  00007E                     	ds	3
  1043  000081                     ___ftmul@cntr:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x21
  1047  000081                     	ds	1
  1048  000082                     ___ftmul@sign:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x22
  1052  000082                     	ds	1
  1053  000083                     ?_fround:
  1054                           	opt stack 0
  1055  000083                     ?_scale:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x23
  1059  000083                     	ds	3
  1060  000086                     _fround$1157:
  1061                           	opt stack 0
  1062  000086                     _scale$1158:
  1063                           	opt stack 0
  1064                           
  1065                           ; 3 bytes @ 0x26
  1066  000086                     	ds	3
  1067  000089                     scale@scl:
  1068                           	opt stack 0
  1069  000089                     _fround$1156:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x29
  1073  000089                     	ds	1
  1074  00008A                     ?___fttol:
  1075                           	opt stack 0
  1076  00008A                     ___fttol@f1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x2A
  1080  00008A                     	ds	2
  1081  00008C                     fround@prec:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x2C
  1085  00008C                     	ds	1
  1086  00008D                     ?___ftadd:
  1087                           	opt stack 0
  1088  00008D                     ___ftadd@f1:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x2D
  1092  00008D                     	ds	1
  1093  00008E                     ??___fttol:
  1094                           
  1095                           ; 1 bytes @ 0x2E
  1096  00008E                     	ds	2
  1097  000090                     ___ftadd@f2:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x30
  1101  000090                     	ds	3
  1102  000093                     ??___ftadd:
  1103  000093                     ___fttol@sign1:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x33
  1107  000093                     	ds	1
  1108  000094                     ___fttol@lval:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x34
  1112  000094                     	ds	2
  1113  000096                     ___ftadd@sign:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x36
  1117  000096                     	ds	1
  1118  000097                     ___ftadd@exp2:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x37
  1122  000097                     	ds	1
  1123  000098                     ___ftadd@exp1:
  1124                           	opt stack 0
  1125  000098                     ___fttol@exp1:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x38
  1129  000098                     	ds	1
  1130  000099                     ?___ftsub:
  1131                           	opt stack 0
  1132  000099                     ___ftsub@f1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x39
  1136  000099                     	ds	3
  1137  00009C                     ___ftsub@f2:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x3C
  1141  00009C                     	ds	3
  1142  00009F                     ?_sprintf:
  1143                           	opt stack 0
  1144  00009F                     sprintf@sp:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x3F
  1148  00009F                     	ds	2
  1149  0000A1                     sprintf@f:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x41
  1153  0000A1                     	ds	5
  1154  0000A6                     ??_sprintf:
  1155                           
  1156                           ; 1 bytes @ 0x46
  1157  0000A6                     	ds	6
  1158  0000AC                     _sprintf$1159:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x4C
  1162  0000AC                     	ds	3
  1163  0000AF                     sprintf@ap:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x4F
  1167  0000AF                     	ds	2
  1168  0000B1                     sprintf@val:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x51
  1172  0000B1                     	ds	4
  1173  0000B5                     sprintf@tmpval:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x55
  1177  0000B5                     	ds	4
  1178  0000B9                     sprintf@exp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x59
  1182  0000B9                     	ds	2
  1183  0000BB                     sprintf@flag:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x5B
  1187  0000BB                     	ds	2
  1188  0000BD                     sprintf@width:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x5D
  1192  0000BD                     	ds	2
  1193  0000BF                     sprintf@fval:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x5F
  1197  0000BF                     	ds	3
  1198  0000C2                     sprintf@prec:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x62
  1202  0000C2                     	ds	2
  1203  0000C4                     sprintf@c:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x64
  1207  0000C4                     	ds	1
  1208  0000C5                     main@pass_verify:
  1209                           	opt stack 0
  1210                           
  1211                           ; 7 bytes @ 0x65
  1212  0000C5                     	ds	7
  1213  0000CC                     main@pass_cmp:
  1214                           	opt stack 0
  1215                           
  1216                           ; 7 bytes @ 0x6C
  1217  0000CC                     	ds	7
  1218  0000D3                     main@pass:
  1219                           	opt stack 0
  1220                           
  1221                           ; 7 bytes @ 0x73
  1222  0000D3                     	ds	7
  1223  0000DA                     main@count_fail:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x7A
  1227  0000DA                     	ds	2
  1228  0000DC                     main@key:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x7C
  1232  0000DC                     	ds	1
  1233  0000DD                     main@count:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x7D
  1237  0000DD                     	ds	2
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           
  1247                           	psect	cstackCOMRAM
  1248  000001                     __pcstackCOMRAM:
  1249                           	opt stack 0
  1250  000001                     ?i2___ftpack:
  1251                           	opt stack 0
  1252  000001                     i2___ftpack@arg:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x0
  1256  000001                     	ds	3
  1257  000004                     i2___ftpack@exp:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x3
  1261  000004                     	ds	1
  1262  000005                     i2___ftpack@sign:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x4
  1266  000005                     	ds	1
  1267  000006                     ??i2___ftpack:
  1268                           
  1269                           ; 1 bytes @ 0x5
  1270  000006                     	ds	3
  1271  000009                     ?___awtoft:
  1272                           	opt stack 0
  1273  000009                     ?i2___ftmul:
  1274                           	opt stack 0
  1275  000009                     ___awtoft@c:
  1276                           	opt stack 0
  1277  000009                     i2___ftmul@f1:
  1278                           	opt stack 0
  1279                           
  1280                           ; 3 bytes @ 0x8
  1281  000009                     	ds	3
  1282  00000C                     ___awtoft@sign:
  1283                           	opt stack 0
  1284  00000C                     i2___ftmul@f2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0xB
  1288  00000C                     	ds	3
  1289  00000F                     ??i2___ftmul:
  1290                           
  1291                           ; 1 bytes @ 0xE
  1292  00000F                     	ds	3
  1293  000012                     i2___ftmul@exp:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x11
  1297  000012                     	ds	1
  1298  000013                     i2___ftmul@f3_as_product:
  1299                           	opt stack 0
  1300                           
  1301                           ; 3 bytes @ 0x12
  1302  000013                     	ds	3
  1303  000016                     i2___ftmul@cntr:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x15
  1307  000016                     	ds	1
  1308  000017                     i2___ftmul@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x16
  1312  000017                     	ds	1
  1313  000018                     ?___ftdiv:
  1314                           	opt stack 0
  1315  000018                     ___ftdiv@f1:
  1316                           	opt stack 0
  1317                           
  1318                           ; 3 bytes @ 0x17
  1319  000018                     	ds	3
  1320  00001B                     ___ftdiv@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x1A
  1324  00001B                     	ds	3
  1325  00001E                     ??___ftdiv:
  1326                           
  1327                           ; 1 bytes @ 0x1D
  1328  00001E                     	ds	3
  1329  000021                     ___ftdiv@cntr:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x20
  1333  000021                     	ds	1
  1334  000022                     ___ftdiv@f3:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x21
  1338  000022                     	ds	3
  1339  000025                     ___ftdiv@exp:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x24
  1343  000025                     	ds	1
  1344  000026                     ___ftdiv@sign:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x25
  1348  000026                     	ds	1
  1349  000027                     ?i2___ftadd:
  1350                           	opt stack 0
  1351  000027                     i2___ftadd@f1:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x26
  1355  000027                     	ds	3
  1356  00002A                     i2___ftadd@f2:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x29
  1360  00002A                     	ds	3
  1361  00002D                     ??i2___ftadd:
  1362                           
  1363                           ; 1 bytes @ 0x2C
  1364  00002D                     	ds	3
  1365  000030                     i2___ftadd@sign:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x2F
  1369  000030                     	ds	1
  1370  000031                     i2___ftadd@exp2:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x30
  1374  000031                     	ds	1
  1375  000032                     i2___ftadd@exp1:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x31
  1379  000032                     	ds	1
  1380  000033                     ??_ADC_ISR:
  1381                           
  1382                           ; 1 bytes @ 0x32
  1383  000033                     	ds	16
  1384  000043                     _ADC_ISR$1155:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x42
  1388  000043                     	ds	3
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398 ;;
  1399 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1400 ;;
  1401 ;; *************** function _main *****************
  1402 ;; Defined at:
  1403 ;;		line 120 in file "newmain.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;		None
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  pass            7  115[BANK0 ] unsigned char [7]
  1408 ;;  pass_cmp        7  108[BANK0 ] unsigned char [7]
  1409 ;;  pass_verify     7  101[BANK0 ] unsigned char [7]
  1410 ;;  count           2  125[BANK0 ] int 
  1411 ;;  count_fail      2  122[BANK0 ] int 
  1412 ;;  key             1  124[BANK0 ] unsigned char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1422 ;;      Params:         0       0       0       0       0       0       0       0       0
  1423 ;;      Locals:         0      26       0       0       0       0       0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1425 ;;      Totals:         0      26       0       0       0       0       0       0       0
  1426 ;;Total ram usage:       26 bytes
  1427 ;; Hardware stack levels required when called:    7
  1428 ;; This function calls:
  1429 ;;		_ADC_Interrupt_Init
  1430 ;;		_LCD_Char
  1431 ;;		_LCD_Clear
  1432 ;;		_LCD_Command
  1433 ;;		_LCD_Init
  1434 ;;		_LCD_String
  1435 ;;		_MSdelay
  1436 ;;		___ftge
  1437 ;;		_keyfind
  1438 ;;		_memset
  1439 ;;		_sprintf
  1440 ;;		_strcmp
  1441 ;; This function is called by:
  1442 ;;		Startup code after reset
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text0
  1447  000B58                     __ptext0:
  1448                           	opt stack 0
  1449  000B58                     _main:
  1450                           	opt stack 24
  1451                           
  1452                           ;newmain.c: 121: OSCCON=0x72;
  1453                           
  1454                           ;incstack = 0
  1455  000B58  0E72               	movlw	114
  1456  000B5A  6ED3               	movwf	4051,c	;volatile
  1457                           
  1458                           ;newmain.c: 122: LCD_Init();
  1459  000B5C  ECA4  F017         	call	_LCD_Init	;wreg free
  1460                           
  1461                           ;newmain.c: 123: ADC_Interrupt_Init();
  1462  000B60  ECEA  F017         	call	_ADC_Interrupt_Init	;wreg free
  1463                           
  1464                           ;newmain.c: 124: RBPU=0;
  1465  000B64  9EF1               	bcf	intcon2,7,c	;volatile
  1466                           
  1467                           ;newmain.c: 125: TRISA = 0xFF;
  1468  000B66  6892               	setf	3986,c	;volatile
  1469                           
  1470                           ;newmain.c: 126: PORTA=0xFF;
  1471  000B68  6880               	setf	3968,c	;volatile
  1472                           
  1473                           ;newmain.c: 127: TRISC=0x00;
  1474  000B6A  0E00               	movlw	0
  1475  000B6C  6E94               	movwf	3988,c	;volatile
  1476                           
  1477                           ;newmain.c: 128: LATC=0;
  1478  000B6E  0E00               	movlw	0
  1479  000B70  6E8B               	movwf	3979,c	;volatile
  1480                           
  1481                           ;newmain.c: 129: PORTC=0;
  1482  000B72  0E00               	movlw	0
  1483  000B74  6E82               	movwf	3970,c	;volatile
  1484                           
  1485                           ;newmain.c: 130: TRISE=0x07;
  1486  000B76  0E07               	movlw	7
  1487  000B78  6E96               	movwf	3990,c	;volatile
  1488                           
  1489                           ;newmain.c: 131: int count=0;
  1490  000B7A  0E00               	movlw	0
  1491  000B7C  0100               	movlb	0	; () banked
  1492  000B7E  6FDE               	movwf	(main@count+1)& (0+255),b
  1493  000B80  0E00               	movlw	0
  1494  000B82  6FDD               	movwf	main@count& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;newmain.c: 132: int count_fail=0;
  1498  000B84  0E00               	movlw	0
  1499  000B86  0100               	movlb	0	; () banked
  1500  000B88  6FDB               	movwf	(main@count_fail+1)& (0+255),b
  1501  000B8A  0E00               	movlw	0
  1502  000B8C  6FDA               	movwf	main@count_fail& (0+255),b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;newmain.c: 133: char pass[7]={0,};
  1506  000B8E  EE20  F0DF         	lfsr	2,main@F3964
  1507  000B92  EE10  F0D3         	lfsr	1,main@pass
  1508  000B96  0E06               	movlw	6
  1509  000B98                     u4371:
  1510  000B98  CFDB FFE3          	movff	plusw2,plusw1
  1511  000B9C  06E8               	decf	wreg,f,c
  1512  000B9E  E2FC               	bc	u4371
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;newmain.c: 134: char pass_verify[7]={0,};
  1516  000BA0  EE20  F0E6         	lfsr	2,main@F3966
  1517  000BA4  EE10  F0C5         	lfsr	1,main@pass_verify
  1518  000BA8  0E06               	movlw	6
  1519  000BAA                     u4381:
  1520  000BAA  CFDB FFE3          	movff	plusw2,plusw1
  1521  000BAE  06E8               	decf	wreg,f,c
  1522  000BB0  E2FC               	bc	u4381
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;newmain.c: 135: char pass_cmp[7]="123457";
  1526  000BB2  EE20  F0F3         	lfsr	2,main@F3968
  1527  000BB6  EE10  F0CC         	lfsr	1,main@pass_cmp
  1528  000BBA  0E06               	movlw	6
  1529  000BBC                     u4391:
  1530  000BBC  CFDB FFE3          	movff	plusw2,plusw1
  1531  000BC0  06E8               	decf	wreg,f,c
  1532  000BC2  E2FC               	bc	u4391
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;newmain.c: 136: unsigned char key=0;
  1536  000BC4  0E00               	movlw	0
  1537  000BC6  0100               	movlb	0	; () banked
  1538  000BC8  6FDC               	movwf	main@key& (0+255),b
  1539  000BCA                     l3831:
  1540                           
  1541                           ;newmain.c: 138: ADCON0bits.GO = 1;
  1542  000BCA  82C2               	bsf	4034,1,c	;volatile
  1543                           
  1544                           ;newmain.c: 141: if(PORTAbits.RA1==0){
  1545  000BCC  B280               	btfsc	3968,1,c	;volatile
  1546  000BCE  D0FD               	goto	l3917
  1547                           
  1548                           ;newmain.c: 142: LCD_Clear();
  1549  000BD0  EC03  F018         	call	_LCD_Clear	;wreg free
  1550                           
  1551                           ;newmain.c: 143: LCD_Command(0x80);
  1552  000BD4  0E80               	movlw	128
  1553  000BD6  EC86  F016         	call	_LCD_Command
  1554                           
  1555                           ;newmain.c: 144: LCD_String("Enter pass!!             ");
  1556  000BDA  0E00               	movlw	low STR_1
  1557  000BDC  0100               	movlb	0	; () banked
  1558  000BDE  6F68               	movwf	LCD_String@msg& (0+255),b
  1559  000BE0  0E7F               	movlw	high STR_1
  1560  000BE2  0100               	movlb	0	; () banked
  1561  000BE4  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1562  000BE6  ECDE  F016         	call	_LCD_String	;wreg free
  1563                           
  1564                           ;newmain.c: 145: LCD_Command(0xC0);
  1565  000BEA  0EC0               	movlw	192
  1566  000BEC  EC86  F016         	call	_LCD_Command
  1567                           
  1568                           ;newmain.c: 146: while(count<6){
  1569  000BF0  D019               	goto	l3851
  1570  000BF2                     l3841:
  1571                           
  1572                           ;newmain.c: 147: key=keyfind();
  1573  000BF2  EC2B  F011         	call	_keyfind	;wreg free
  1574  000BF6  0100               	movlb	0	; () banked
  1575  000BF8  6FDC               	movwf	main@key& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;newmain.c: 148: if(key>0){
  1579  000BFA  0100               	movlb	0	; () banked
  1580  000BFC  51DC               	movf	main@key& (0+255),w,b
  1581  000BFE  0100               	movlb	0	; () banked
  1582  000C00  B4D8               	btfsc	status,2,c
  1583  000C02  D010               	goto	l3851
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;newmain.c: 149: pass[count]=key;
  1587  000C04  0ED3               	movlw	low main@pass
  1588  000C06  0100               	movlb	0	; () banked
  1589  000C08  25DD               	addwf	main@count& (0+255),w,b
  1590  000C0A  6ED9               	movwf	fsr2l,c
  1591  000C0C  0E00               	movlw	high main@pass
  1592  000C0E  0100               	movlb	0	; () banked
  1593  000C10  21DE               	addwfc	(main@count+1)& (0+255),w,b
  1594  000C12  6EDA               	movwf	fsr2h,c
  1595  000C14  C0DC  FFDF         	movff	main@key,indf2
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;newmain.c: 150: LCD_Char('*');
  1599  000C18  0E2A               	movlw	42
  1600  000C1A  EC59  F016         	call	_LCD_Char
  1601                           
  1602                           ;newmain.c: 151: count++;
  1603  000C1E  0100               	movlb	0	; () banked
  1604  000C20  4BDD               	infsnz	main@count& (0+255),f,b
  1605  000C22  2BDE               	incf	(main@count+1)& (0+255),f,b
  1606  000C24                     l3851:
  1607  000C24  0100               	movlb	0	; () banked
  1608  000C26  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  1609  000C28  D7E4               	goto	l3841
  1610  000C2A  0100               	movlb	0	; () banked
  1611  000C2C  51DE               	movf	(main@count+1)& (0+255),w,b
  1612  000C2E  E105               	bnz	l3853
  1613  000C30  0E06               	movlw	6
  1614  000C32  0100               	movlb	0	; () banked
  1615  000C34  5DDD               	subwf	main@count& (0+255),w,b
  1616  000C36  A0D8               	btfss	status,0,c
  1617  000C38  D7DC               	goto	l3841
  1618  000C3A                     l3853:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;newmain.c: 152: }
  1622                           ;newmain.c: 153: }
  1623                           ;newmain.c: 154: count=0;
  1624  000C3A  0E00               	movlw	0
  1625  000C3C  0100               	movlb	0	; () banked
  1626  000C3E  6FDE               	movwf	(main@count+1)& (0+255),b
  1627  000C40  0E00               	movlw	0
  1628  000C42  6FDD               	movwf	main@count& (0+255),b
  1629                           
  1630                           ;newmain.c: 155: pass[6]='\0';
  1631  000C44  0E00               	movlw	0
  1632  000C46  0100               	movlb	0	; () banked
  1633  000C48  6FD9               	movwf	(main@pass+6)& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;newmain.c: 156: if(!strcmp(pass,pass_cmp)){
  1637  000C4A  0ED3               	movlw	low main@pass
  1638  000C4C  0100               	movlb	0	; () banked
  1639  000C4E  6F60               	movwf	strcmp@s1& (0+255),b
  1640  000C50  0E00               	movlw	high main@pass
  1641  000C52  0100               	movlb	0	; () banked
  1642  000C54  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  1643  000C56  0ECC               	movlw	low main@pass_cmp
  1644  000C58  0100               	movlb	0	; () banked
  1645  000C5A  6F62               	movwf	strcmp@s2& (0+255),b
  1646  000C5C  0E00               	movlw	high main@pass_cmp
  1647  000C5E  0100               	movlb	0	; () banked
  1648  000C60  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1649  000C62  ECB3  F016         	call	_strcmp	;wreg free
  1650  000C66  0100               	movlb	0	; () banked
  1651  000C68  5160               	movf	?_strcmp& (0+255),w,b
  1652  000C6A  0100               	movlb	0	; () banked
  1653  000C6C  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1654  000C6E  A4D8               	btfss	status,2,c
  1655  000C70  D070               	goto	l3895
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;newmain.c: 157: count_fail=0;
  1659  000C72  0E00               	movlw	0
  1660  000C74  0100               	movlb	0	; () banked
  1661  000C76  6FDB               	movwf	(main@count_fail+1)& (0+255),b
  1662  000C78  0E00               	movlw	0
  1663  000C7A  6FDA               	movwf	main@count_fail& (0+255),b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;newmain.c: 158: LATCbits.LATC2=1;
  1667  000C7C  848B               	bsf	3979,2,c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;newmain.c: 159: LCD_Command(0xC0);
  1671  000C7E  0EC0               	movlw	192
  1672  000C80  EC86  F016         	call	_LCD_Command
  1673                           
  1674                           ;newmain.c: 160: LCD_String("Successful               ");
  1675  000C84  0EE6               	movlw	low STR_2
  1676  000C86  0100               	movlb	0	; () banked
  1677  000C88  6F68               	movwf	LCD_String@msg& (0+255),b
  1678  000C8A  0E7E               	movlw	high STR_2
  1679  000C8C  0100               	movlb	0	; () banked
  1680  000C8E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1681  000C90  ECDE  F016         	call	_LCD_String	;wreg free
  1682                           
  1683                           ;newmain.c: 161: LCD_Command(0x80);
  1684  000C94  0E80               	movlw	128
  1685  000C96  EC86  F016         	call	_LCD_Command
  1686                           
  1687                           ;newmain.c: 162: sprintf(buffer,"Temperature=%0.1f",tempurture);
  1688  000C9A  0E00               	movlw	low _buffer
  1689  000C9C  0100               	movlb	0	; () banked
  1690  000C9E  6F9F               	movwf	sprintf@sp& (0+255),b
  1691  000CA0  0E01               	movlw	high _buffer
  1692  000CA2  0100               	movlb	0	; () banked
  1693  000CA4  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1694  000CA6  0EB9               	movlw	low STR_3
  1695  000CA8  0100               	movlb	0	; () banked
  1696  000CAA  6FA1               	movwf	sprintf@f& (0+255),b
  1697  000CAC  0E7F               	movlw	high STR_3
  1698  000CAE  0100               	movlb	0	; () banked
  1699  000CB0  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1700  000CB2  C0ED  F0A3         	movff	_tempurture,?_sprintf+4
  1701  000CB6  C0EE  F0A4         	movff	_tempurture+1,?_sprintf+5
  1702  000CBA  C0EF  F0A5         	movff	_tempurture+2,?_sprintf+6
  1703  000CBE  EC09  F000         	call	_sprintf	;wreg free
  1704                           
  1705                           ;newmain.c: 163: LCD_String(buffer);
  1706  000CC2  0E00               	movlw	low _buffer
  1707  000CC4  0100               	movlb	0	; () banked
  1708  000CC6  6F68               	movwf	LCD_String@msg& (0+255),b
  1709  000CC8  0E01               	movlw	high _buffer
  1710  000CCA  0100               	movlb	0	; () banked
  1711  000CCC  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1712  000CCE  ECDE  F016         	call	_LCD_String	;wreg free
  1713                           
  1714                           ;newmain.c: 164: if(tempurture>29.0){
  1715  000CD2  0E00               	movlw	0
  1716  000CD4  0100               	movlb	0	; () banked
  1717  000CD6  6F60               	movwf	___ftge@ff1& (0+255),b
  1718  000CD8  0EE8               	movlw	232
  1719  000CDA  0100               	movlb	0	; () banked
  1720  000CDC  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  1721  000CDE  0E41               	movlw	65
  1722  000CE0  0100               	movlb	0	; () banked
  1723  000CE2  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  1724  000CE4  C0ED  F063         	movff	_tempurture,___ftge@ff2
  1725  000CE8  C0EE  F064         	movff	_tempurture+1,___ftge@ff2+1
  1726  000CEC  C0EF  F065         	movff	_tempurture+2,___ftge@ff2+2
  1727  000CF0  ECCF  F013         	call	___ftge	;wreg free
  1728  000CF4  0100               	movlb	0	; () banked
  1729  000CF6  B0D8               	btfsc	status,0,c
  1730  000CF8  D00D               	goto	l113
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;newmain.c: 165: LATCbits.LATC6=1;
  1734  000CFA  8C8B               	bsf	3979,6,c	;volatile
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;newmain.c: 166: LCD_Command(0xC0);
  1738  000CFC  0EC0               	movlw	192
  1739  000CFE  EC86  F016         	call	_LCD_Command
  1740                           
  1741                           ;newmain.c: 167: LCD_String("Fan turning on          ");
  1742  000D02  0E34               	movlw	low STR_4
  1743  000D04  0100               	movlb	0	; () banked
  1744  000D06  6F68               	movwf	LCD_String@msg& (0+255),b
  1745  000D08  0E7F               	movlw	high STR_4
  1746  000D0A  0100               	movlb	0	; () banked
  1747  000D0C  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1748  000D0E  ECDE  F016         	call	_LCD_String	;wreg free
  1749                           
  1750                           ;newmain.c: 168: }
  1751  000D12  D00C               	goto	l3883
  1752  000D14                     l113:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;newmain.c: 169: else{
  1756                           ;newmain.c: 170: LATCbits.LATC6=0;
  1757  000D14  9C8B               	bcf	3979,6,c	;volatile
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;newmain.c: 171: LCD_Command(0xC0);
  1761  000D16  0EC0               	movlw	192
  1762  000D18  EC86  F016         	call	_LCD_Command
  1763                           
  1764                           ;newmain.c: 172: LCD_String("Fan turning off          ");
  1765  000D1C  0E1A               	movlw	low STR_5
  1766  000D1E  0100               	movlb	0	; () banked
  1767  000D20  6F68               	movwf	LCD_String@msg& (0+255),b
  1768  000D22  0E7F               	movlw	high STR_5
  1769  000D24  0100               	movlb	0	; () banked
  1770  000D26  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1771  000D28  ECDE  F016         	call	_LCD_String	;wreg free
  1772  000D2C                     l3883:
  1773                           
  1774                           ;newmain.c: 173: }
  1775                           ;newmain.c: 174: MSdelay(3000);
  1776  000D2C  0E0B               	movlw	11
  1777  000D2E  0100               	movlb	0	; () banked
  1778  000D30  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1779  000D32  0EB8               	movlw	184
  1780  000D34  6F60               	movwf	MSdelay@val& (0+255),b
  1781  000D36  EC2E  F017         	call	_MSdelay	;wreg free
  1782                           
  1783                           ;newmain.c: 175: LATCbits.LATC0=1;
  1784  000D3A  808B               	bsf	3979,0,c	;volatile
  1785                           
  1786                           ;newmain.c: 176: LATCbits.LATC1=0;
  1787  000D3C  928B               	bcf	3979,1,c	;volatile
  1788                           
  1789                           ;newmain.c: 177: MSdelay(5000);
  1790  000D3E  0E13               	movlw	19
  1791  000D40  0100               	movlb	0	; () banked
  1792  000D42  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1793  000D44  0E88               	movlw	136
  1794  000D46  6F60               	movwf	MSdelay@val& (0+255),b
  1795  000D48  EC2E  F017         	call	_MSdelay	;wreg free
  1796                           
  1797                           ;newmain.c: 178: LATCbits.LATC0=0;
  1798  000D4C  908B               	bcf	3979,0,c	;volatile
  1799                           
  1800                           ;newmain.c: 179: LATCbits.LATC1=0;
  1801  000D4E  928B               	bcf	3979,1,c	;volatile
  1802                           
  1803                           ;newmain.c: 180: }
  1804  000D50  D03C               	goto	l3917
  1805  000D52                     l3895:
  1806                           
  1807                           ;newmain.c: 181: else{
  1808                           ;newmain.c: 182: count_fail++;
  1809  000D52  0100               	movlb	0	; () banked
  1810  000D54  4BDA               	infsnz	main@count_fail& (0+255),f,b
  1811  000D56  2BDB               	incf	(main@count_fail+1)& (0+255),f,b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;newmain.c: 183: if(count_fail>2){
  1815  000D58  0100               	movlb	0	; () banked
  1816  000D5A  BFDB               	btfsc	(main@count_fail+1)& (0+255),7,b
  1817  000D5C  D024               	goto	l3911
  1818  000D5E  0100               	movlb	0	; () banked
  1819  000D60  51DB               	movf	(main@count_fail+1)& (0+255),w,b
  1820  000D62  E105               	bnz	u4450
  1821  000D64  0E03               	movlw	3
  1822  000D66  0100               	movlb	0	; () banked
  1823  000D68  5DDA               	subwf	main@count_fail& (0+255),w,b
  1824  000D6A  A0D8               	btfss	status,0,c
  1825  000D6C  D01C               	goto	l3911
  1826  000D6E                     u4450:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;newmain.c: 184: LCD_Command(0xC0);
  1830  000D6E  0EC0               	movlw	192
  1831  000D70  EC86  F016         	call	_LCD_Command
  1832                           
  1833                           ;newmain.c: 185: LCD_String("Out of move !!!            ");
  1834  000D74  0ECA               	movlw	low STR_6
  1835  000D76  0100               	movlb	0	; () banked
  1836  000D78  6F68               	movwf	LCD_String@msg& (0+255),b
  1837  000D7A  0E7E               	movlw	high STR_6
  1838  000D7C  0100               	movlb	0	; () banked
  1839  000D7E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1840  000D80  ECDE  F016         	call	_LCD_String	;wreg free
  1841                           
  1842                           ;newmain.c: 186: MSdelay(2000);
  1843  000D84  0E07               	movlw	7
  1844  000D86  0100               	movlb	0	; () banked
  1845  000D88  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1846  000D8A  0ED0               	movlw	208
  1847  000D8C  6F60               	movwf	MSdelay@val& (0+255),b
  1848  000D8E  EC2E  F017         	call	_MSdelay	;wreg free
  1849                           
  1850                           ;newmain.c: 187: LATCbits.LATC7=1;
  1851  000D92  8E8B               	bsf	3979,7,c	;volatile
  1852                           
  1853                           ;newmain.c: 188: MSdelay(3000);
  1854  000D94  0E0B               	movlw	11
  1855  000D96  0100               	movlb	0	; () banked
  1856  000D98  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1857  000D9A  0EB8               	movlw	184
  1858  000D9C  6F60               	movwf	MSdelay@val& (0+255),b
  1859  000D9E  EC2E  F017         	call	_MSdelay	;wreg free
  1860                           
  1861                           ;newmain.c: 189: LATCbits.LATC7=0;
  1862  000DA2  9E8B               	bcf	3979,7,c	;volatile
  1863                           
  1864                           ;newmain.c: 190: }
  1865  000DA4  D012               	goto	l3917
  1866  000DA6                     l3911:
  1867                           
  1868                           ;newmain.c: 191: else{
  1869                           ;newmain.c: 192: LCD_Command(0xC0);
  1870  000DA6  0EC0               	movlw	192
  1871  000DA8  EC86  F016         	call	_LCD_Command
  1872                           
  1873                           ;newmain.c: 193: LCD_String("Failed               ");
  1874  000DAC  0E65               	movlw	low STR_7
  1875  000DAE  0100               	movlb	0	; () banked
  1876  000DB0  6F68               	movwf	LCD_String@msg& (0+255),b
  1877  000DB2  0E7F               	movlw	high STR_7
  1878  000DB4  0100               	movlb	0	; () banked
  1879  000DB6  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1880  000DB8  ECDE  F016         	call	_LCD_String	;wreg free
  1881                           
  1882                           ;newmain.c: 194: MSdelay(2000);
  1883  000DBC  0E07               	movlw	7
  1884  000DBE  0100               	movlb	0	; () banked
  1885  000DC0  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1886  000DC2  0ED0               	movlw	208
  1887  000DC4  6F60               	movwf	MSdelay@val& (0+255),b
  1888  000DC6  EC2E  F017         	call	_MSdelay	;wreg free
  1889  000DCA                     l3917:
  1890                           
  1891                           ;newmain.c: 195: }
  1892                           ;newmain.c: 196: }
  1893                           ;newmain.c: 197: }
  1894                           ;newmain.c: 202: if(PORTAbits.RA2==0) LATCbits.LATC2=0;
  1895  000DCA  A480               	btfss	3968,2,c	;volatile
  1896  000DCC  948B               	bcf	3979,2,c	;volatile
  1897                           
  1898                           ;newmain.c: 203: if(PORTEbits.RE2==0) LATCbits.LATC2=1;
  1899  000DCE  A484               	btfss	3972,2,c	;volatile
  1900  000DD0  848B               	bsf	3979,2,c	;volatile
  1901                           
  1902                           ;newmain.c: 204: if(PORTAbits.RA3==0){
  1903  000DD2  B680               	btfsc	3968,3,c	;volatile
  1904  000DD4  D00B               	goto	l3931
  1905                           
  1906                           ;newmain.c: 205: LATCbits.LATC0=0;
  1907  000DD6  908B               	bcf	3979,0,c	;volatile
  1908                           
  1909                           ;newmain.c: 206: LATCbits.LATC1=1;
  1910  000DD8  828B               	bsf	3979,1,c	;volatile
  1911                           
  1912                           ;newmain.c: 207: MSdelay(5000);
  1913  000DDA  0E13               	movlw	19
  1914  000DDC  0100               	movlb	0	; () banked
  1915  000DDE  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1916  000DE0  0E88               	movlw	136
  1917  000DE2  6F60               	movwf	MSdelay@val& (0+255),b
  1918  000DE4  EC2E  F017         	call	_MSdelay	;wreg free
  1919                           
  1920                           ;newmain.c: 208: LATCbits.LATC0=0;
  1921  000DE8  908B               	bcf	3979,0,c	;volatile
  1922                           
  1923                           ;newmain.c: 209: LATCbits.LATC1=0;
  1924  000DEA  928B               	bcf	3979,1,c	;volatile
  1925  000DEC                     l3931:
  1926                           
  1927                           ;newmain.c: 210: }
  1928                           ;newmain.c: 211: if(PORTAbits.RA4==0){
  1929  000DEC  B880               	btfsc	3968,4,c	;volatile
  1930  000DEE  D00B               	goto	l3941
  1931                           
  1932                           ;newmain.c: 212: LATCbits.LATC0=1;
  1933  000DF0  808B               	bsf	3979,0,c	;volatile
  1934                           
  1935                           ;newmain.c: 213: LATCbits.LATC1=0;
  1936  000DF2  928B               	bcf	3979,1,c	;volatile
  1937                           
  1938                           ;newmain.c: 214: MSdelay(5000);
  1939  000DF4  0E13               	movlw	19
  1940  000DF6  0100               	movlb	0	; () banked
  1941  000DF8  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  1942  000DFA  0E88               	movlw	136
  1943  000DFC  6F60               	movwf	MSdelay@val& (0+255),b
  1944  000DFE  EC2E  F017         	call	_MSdelay	;wreg free
  1945                           
  1946                           ;newmain.c: 215: LATCbits.LATC0=0;
  1947  000E02  908B               	bcf	3979,0,c	;volatile
  1948                           
  1949                           ;newmain.c: 216: LATCbits.LATC1=0;
  1950  000E04  928B               	bcf	3979,1,c	;volatile
  1951  000E06                     l3941:
  1952                           
  1953                           ;newmain.c: 217: }
  1954                           ;newmain.c: 218: if(PORTEbits.RE0==0){
  1955  000E06  A084               	btfss	3972,0,c	;volatile
  1956                           
  1957                           ;newmain.c: 219: LATCbits.LATC6=1;
  1958  000E08  8C8B               	bsf	3979,6,c	;volatile
  1959                           
  1960                           ;newmain.c: 220: }
  1961                           ;newmain.c: 221: if(PORTEbits.RE1==0){
  1962  000E0A  A284               	btfss	3972,1,c	;volatile
  1963                           
  1964                           ;newmain.c: 222: LATCbits.LATC6=0;
  1965  000E0C  9C8B               	bcf	3979,6,c	;volatile
  1966                           
  1967                           ;newmain.c: 223: }
  1968                           ;newmain.c: 227: if(PORTAbits.RA5==0){
  1969  000E0E  BA80               	btfsc	3968,5,c	;volatile
  1970  000E10  D147               	goto	l4043
  1971                           
  1972                           ;newmain.c: 228: LCD_Clear();
  1973  000E12  EC03  F018         	call	_LCD_Clear	;wreg free
  1974                           
  1975                           ;newmain.c: 229: LCD_Command(0x80);
  1976  000E16  0E80               	movlw	128
  1977  000E18  EC86  F016         	call	_LCD_Command
  1978                           
  1979                           ;newmain.c: 230: LCD_String("En_pass present     ");
  1980  000E1C  0E7B               	movlw	low STR_8
  1981  000E1E  0100               	movlb	0	; () banked
  1982  000E20  6F68               	movwf	LCD_String@msg& (0+255),b
  1983  000E22  0E7F               	movlw	high STR_8
  1984  000E24  0100               	movlb	0	; () banked
  1985  000E26  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  1986  000E28  ECDE  F016         	call	_LCD_String	;wreg free
  1987                           
  1988                           ;newmain.c: 231: LCD_Command(0xC0);
  1989  000E2C  0EC0               	movlw	192
  1990  000E2E  EC86  F016         	call	_LCD_Command
  1991                           
  1992                           ;newmain.c: 232: while(count<6){
  1993  000E32  D019               	goto	l3963
  1994  000E34                     l3953:
  1995                           
  1996                           ;newmain.c: 233: key=keyfind();
  1997  000E34  EC2B  F011         	call	_keyfind	;wreg free
  1998  000E38  0100               	movlb	0	; () banked
  1999  000E3A  6FDC               	movwf	main@key& (0+255),b
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;newmain.c: 234: if(key>0){
  2003  000E3C  0100               	movlb	0	; () banked
  2004  000E3E  51DC               	movf	main@key& (0+255),w,b
  2005  000E40  0100               	movlb	0	; () banked
  2006  000E42  B4D8               	btfsc	status,2,c
  2007  000E44  D010               	goto	l3963
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;newmain.c: 235: pass[count]=key;
  2011  000E46  0ED3               	movlw	low main@pass
  2012  000E48  0100               	movlb	0	; () banked
  2013  000E4A  25DD               	addwf	main@count& (0+255),w,b
  2014  000E4C  6ED9               	movwf	fsr2l,c
  2015  000E4E  0E00               	movlw	high main@pass
  2016  000E50  0100               	movlb	0	; () banked
  2017  000E52  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2018  000E54  6EDA               	movwf	fsr2h,c
  2019  000E56  C0DC  FFDF         	movff	main@key,indf2
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;newmain.c: 236: LCD_Char('*');
  2023  000E5A  0E2A               	movlw	42
  2024  000E5C  EC59  F016         	call	_LCD_Char
  2025                           
  2026                           ;newmain.c: 237: count++;
  2027  000E60  0100               	movlb	0	; () banked
  2028  000E62  4BDD               	infsnz	main@count& (0+255),f,b
  2029  000E64  2BDE               	incf	(main@count+1)& (0+255),f,b
  2030  000E66                     l3963:
  2031  000E66  0100               	movlb	0	; () banked
  2032  000E68  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2033  000E6A  D7E4               	goto	l3953
  2034  000E6C  0100               	movlb	0	; () banked
  2035  000E6E  51DE               	movf	(main@count+1)& (0+255),w,b
  2036  000E70  E105               	bnz	l3965
  2037  000E72  0E06               	movlw	6
  2038  000E74  0100               	movlb	0	; () banked
  2039  000E76  5DDD               	subwf	main@count& (0+255),w,b
  2040  000E78  A0D8               	btfss	status,0,c
  2041  000E7A  D7DC               	goto	l3953
  2042  000E7C                     l3965:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;newmain.c: 238: }
  2046                           ;newmain.c: 239: }
  2047                           ;newmain.c: 240: count=0;
  2048  000E7C  0E00               	movlw	0
  2049  000E7E  0100               	movlb	0	; () banked
  2050  000E80  6FDE               	movwf	(main@count+1)& (0+255),b
  2051  000E82  0E00               	movlw	0
  2052  000E84  6FDD               	movwf	main@count& (0+255),b
  2053                           
  2054                           ;newmain.c: 241: pass[6]='\0';
  2055  000E86  0E00               	movlw	0
  2056  000E88  0100               	movlb	0	; () banked
  2057  000E8A  6FD9               	movwf	(main@pass+6)& (0+255),b
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;newmain.c: 242: LCD_Clear();
  2061  000E8C  EC03  F018         	call	_LCD_Clear	;wreg free
  2062                           
  2063                           ;newmain.c: 243: if(!strcmp(pass,pass_cmp)){
  2064  000E90  0ED3               	movlw	low main@pass
  2065  000E92  0100               	movlb	0	; () banked
  2066  000E94  6F60               	movwf	strcmp@s1& (0+255),b
  2067  000E96  0E00               	movlw	high main@pass
  2068  000E98  0100               	movlb	0	; () banked
  2069  000E9A  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  2070  000E9C  0ECC               	movlw	low main@pass_cmp
  2071  000E9E  0100               	movlb	0	; () banked
  2072  000EA0  6F62               	movwf	strcmp@s2& (0+255),b
  2073  000EA2  0E00               	movlw	high main@pass_cmp
  2074  000EA4  0100               	movlb	0	; () banked
  2075  000EA6  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  2076  000EA8  ECB3  F016         	call	_strcmp	;wreg free
  2077  000EAC  0100               	movlb	0	; () banked
  2078  000EAE  5160               	movf	?_strcmp& (0+255),w,b
  2079  000EB0  0100               	movlb	0	; () banked
  2080  000EB2  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  2081  000EB4  A4D8               	btfss	status,2,c
  2082  000EB6  D0D5               	goto	l4035
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;newmain.c: 244: LCD_Command(0x80);
  2086  000EB8  0E80               	movlw	128
  2087  000EBA  EC86  F016         	call	_LCD_Command
  2088                           
  2089                           ;newmain.c: 245: LCD_String("Enter new pass               ");
  2090  000EBE  0EAC               	movlw	low STR_9
  2091  000EC0  0100               	movlb	0	; () banked
  2092  000EC2  6F68               	movwf	LCD_String@msg& (0+255),b
  2093  000EC4  0E7E               	movlw	high STR_9
  2094  000EC6  0100               	movlb	0	; () banked
  2095  000EC8  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2096  000ECA  ECDE  F016         	call	_LCD_String	;wreg free
  2097                           
  2098                           ;newmain.c: 246: LCD_Command(0xC0);
  2099  000ECE  0EC0               	movlw	192
  2100  000ED0  EC86  F016         	call	_LCD_Command
  2101                           
  2102                           ;newmain.c: 247: while(count<6){
  2103  000ED4  D019               	goto	l3987
  2104  000ED6                     l3977:
  2105                           
  2106                           ;newmain.c: 248: key=keyfind();
  2107  000ED6  EC2B  F011         	call	_keyfind	;wreg free
  2108  000EDA  0100               	movlb	0	; () banked
  2109  000EDC  6FDC               	movwf	main@key& (0+255),b
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;newmain.c: 249: if(key>0){
  2113  000EDE  0100               	movlb	0	; () banked
  2114  000EE0  51DC               	movf	main@key& (0+255),w,b
  2115  000EE2  0100               	movlb	0	; () banked
  2116  000EE4  B4D8               	btfsc	status,2,c
  2117  000EE6  D010               	goto	l3987
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;newmain.c: 250: pass_cmp[count]=key;
  2121  000EE8  0ECC               	movlw	low main@pass_cmp
  2122  000EEA  0100               	movlb	0	; () banked
  2123  000EEC  25DD               	addwf	main@count& (0+255),w,b
  2124  000EEE  6ED9               	movwf	fsr2l,c
  2125  000EF0  0E00               	movlw	high main@pass_cmp
  2126  000EF2  0100               	movlb	0	; () banked
  2127  000EF4  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2128  000EF6  6EDA               	movwf	fsr2h,c
  2129  000EF8  C0DC  FFDF         	movff	main@key,indf2
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;newmain.c: 251: LCD_Char('*');
  2133  000EFC  0E2A               	movlw	42
  2134  000EFE  EC59  F016         	call	_LCD_Char
  2135                           
  2136                           ;newmain.c: 252: count++;
  2137  000F02  0100               	movlb	0	; () banked
  2138  000F04  4BDD               	infsnz	main@count& (0+255),f,b
  2139  000F06  2BDE               	incf	(main@count+1)& (0+255),f,b
  2140  000F08                     l3987:
  2141  000F08  0100               	movlb	0	; () banked
  2142  000F0A  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2143  000F0C  D7E4               	goto	l3977
  2144  000F0E  0100               	movlb	0	; () banked
  2145  000F10  51DE               	movf	(main@count+1)& (0+255),w,b
  2146  000F12  E105               	bnz	l3989
  2147  000F14  0E06               	movlw	6
  2148  000F16  0100               	movlb	0	; () banked
  2149  000F18  5DDD               	subwf	main@count& (0+255),w,b
  2150  000F1A  A0D8               	btfss	status,0,c
  2151  000F1C  D7DC               	goto	l3977
  2152  000F1E                     l3989:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;newmain.c: 253: }
  2156                           ;newmain.c: 254: }
  2157                           ;newmain.c: 255: count=0;
  2158  000F1E  0E00               	movlw	0
  2159  000F20  0100               	movlb	0	; () banked
  2160  000F22  6FDE               	movwf	(main@count+1)& (0+255),b
  2161  000F24  0E00               	movlw	0
  2162  000F26  6FDD               	movwf	main@count& (0+255),b
  2163                           
  2164                           ;newmain.c: 256: pass_cmp[6]='\0';
  2165  000F28  0E00               	movlw	0
  2166  000F2A  0100               	movlb	0	; () banked
  2167  000F2C  6FD2               	movwf	(main@pass_cmp+6)& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;newmain.c: 257: LCD_Clear();
  2171  000F2E  EC03  F018         	call	_LCD_Clear	;wreg free
  2172                           
  2173                           ;newmain.c: 258: LCD_Command(0x80);
  2174  000F32  0E80               	movlw	128
  2175  000F34  EC86  F016         	call	_LCD_Command
  2176                           
  2177                           ;newmain.c: 259: LCD_String("Verify new pass               ");
  2178  000F38  0E8D               	movlw	low STR_10
  2179  000F3A  0100               	movlb	0	; () banked
  2180  000F3C  6F68               	movwf	LCD_String@msg& (0+255),b
  2181  000F3E  0E7E               	movlw	high STR_10
  2182  000F40  0100               	movlb	0	; () banked
  2183  000F42  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2184  000F44  ECDE  F016         	call	_LCD_String	;wreg free
  2185                           
  2186                           ;newmain.c: 260: LCD_Command(0xC0);
  2187  000F48  0EC0               	movlw	192
  2188  000F4A  EC86  F016         	call	_LCD_Command
  2189                           
  2190                           ;newmain.c: 261: while(count<6){
  2191  000F4E  D019               	goto	l4009
  2192  000F50                     l3999:
  2193                           
  2194                           ;newmain.c: 262: key=keyfind();
  2195  000F50  EC2B  F011         	call	_keyfind	;wreg free
  2196  000F54  0100               	movlb	0	; () banked
  2197  000F56  6FDC               	movwf	main@key& (0+255),b
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;newmain.c: 263: if(key>0){
  2201  000F58  0100               	movlb	0	; () banked
  2202  000F5A  51DC               	movf	main@key& (0+255),w,b
  2203  000F5C  0100               	movlb	0	; () banked
  2204  000F5E  B4D8               	btfsc	status,2,c
  2205  000F60  D010               	goto	l4009
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;newmain.c: 264: pass_verify[count]=key;
  2209  000F62  0EC5               	movlw	low main@pass_verify
  2210  000F64  0100               	movlb	0	; () banked
  2211  000F66  25DD               	addwf	main@count& (0+255),w,b
  2212  000F68  6ED9               	movwf	fsr2l,c
  2213  000F6A  0E00               	movlw	high main@pass_verify
  2214  000F6C  0100               	movlb	0	; () banked
  2215  000F6E  21DE               	addwfc	(main@count+1)& (0+255),w,b
  2216  000F70  6EDA               	movwf	fsr2h,c
  2217  000F72  C0DC  FFDF         	movff	main@key,indf2
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;newmain.c: 265: LCD_Char('*');
  2221  000F76  0E2A               	movlw	42
  2222  000F78  EC59  F016         	call	_LCD_Char
  2223                           
  2224                           ;newmain.c: 266: count++;
  2225  000F7C  0100               	movlb	0	; () banked
  2226  000F7E  4BDD               	infsnz	main@count& (0+255),f,b
  2227  000F80  2BDE               	incf	(main@count+1)& (0+255),f,b
  2228  000F82                     l4009:
  2229  000F82  0100               	movlb	0	; () banked
  2230  000F84  BFDE               	btfsc	(main@count+1)& (0+255),7,b
  2231  000F86  D7E4               	goto	l3999
  2232  000F88  0100               	movlb	0	; () banked
  2233  000F8A  51DE               	movf	(main@count+1)& (0+255),w,b
  2234  000F8C  E105               	bnz	l4011
  2235  000F8E  0E06               	movlw	6
  2236  000F90  0100               	movlb	0	; () banked
  2237  000F92  5DDD               	subwf	main@count& (0+255),w,b
  2238  000F94  A0D8               	btfss	status,0,c
  2239  000F96  D7DC               	goto	l3999
  2240  000F98                     l4011:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;newmain.c: 267: }
  2244                           ;newmain.c: 268: }
  2245                           ;newmain.c: 269: count=0;
  2246  000F98  0E00               	movlw	0
  2247  000F9A  0100               	movlb	0	; () banked
  2248  000F9C  6FDE               	movwf	(main@count+1)& (0+255),b
  2249  000F9E  0E00               	movlw	0
  2250  000FA0  6FDD               	movwf	main@count& (0+255),b
  2251                           
  2252                           ;newmain.c: 270: pass_verify[6]='\0';
  2253  000FA2  0E00               	movlw	0
  2254  000FA4  0100               	movlb	0	; () banked
  2255  000FA6  6FCB               	movwf	(main@pass_verify+6)& (0+255),b
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;newmain.c: 271: if(!strcmp(pass_verify,pass_cmp)){
  2259  000FA8  0EC5               	movlw	low main@pass_verify
  2260  000FAA  0100               	movlb	0	; () banked
  2261  000FAC  6F60               	movwf	strcmp@s1& (0+255),b
  2262  000FAE  0E00               	movlw	high main@pass_verify
  2263  000FB0  0100               	movlb	0	; () banked
  2264  000FB2  6F61               	movwf	(strcmp@s1+1)& (0+255),b
  2265  000FB4  0ECC               	movlw	low main@pass_cmp
  2266  000FB6  0100               	movlb	0	; () banked
  2267  000FB8  6F62               	movwf	strcmp@s2& (0+255),b
  2268  000FBA  0E00               	movlw	high main@pass_cmp
  2269  000FBC  0100               	movlb	0	; () banked
  2270  000FBE  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  2271  000FC0  ECB3  F016         	call	_strcmp	;wreg free
  2272  000FC4  0100               	movlb	0	; () banked
  2273  000FC6  5160               	movf	?_strcmp& (0+255),w,b
  2274  000FC8  0100               	movlb	0	; () banked
  2275  000FCA  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  2276  000FCC  A4D8               	btfss	status,2,c
  2277  000FCE  D015               	goto	l4021
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;newmain.c: 272: LCD_Clear();
  2281  000FD0  EC03  F018         	call	_LCD_Clear	;wreg free
  2282                           
  2283                           ;newmain.c: 273: LCD_Command(0x80);
  2284  000FD4  0E80               	movlw	128
  2285  000FD6  EC86  F016         	call	_LCD_Command
  2286                           
  2287                           ;newmain.c: 274: LCD_String("Change pass OK     ");
  2288  000FDA  0EA5               	movlw	low STR_11
  2289  000FDC  0100               	movlb	0	; () banked
  2290  000FDE  6F68               	movwf	LCD_String@msg& (0+255),b
  2291  000FE0  0E7F               	movlw	high STR_11
  2292  000FE2  0100               	movlb	0	; () banked
  2293  000FE4  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2294  000FE6  ECDE  F016         	call	_LCD_String	;wreg free
  2295                           
  2296                           ;newmain.c: 275: MSdelay(2000);
  2297  000FEA  0E07               	movlw	7
  2298  000FEC  0100               	movlb	0	; () banked
  2299  000FEE  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2300  000FF0  0ED0               	movlw	208
  2301  000FF2  6F60               	movwf	MSdelay@val& (0+255),b
  2302  000FF4  EC2E  F017         	call	_MSdelay	;wreg free
  2303                           
  2304                           ;newmain.c: 276: }
  2305  000FF8  D053               	goto	l4043
  2306  000FFA                     l4021:
  2307                           
  2308                           ;newmain.c: 277: else{
  2309                           ;newmain.c: 278: LCD_Clear();
  2310  000FFA  EC03  F018         	call	_LCD_Clear	;wreg free
  2311                           
  2312                           ;newmain.c: 279: LCD_Command(0x80);
  2313  000FFE  0E80               	movlw	128
  2314  001000  EC86  F016         	call	_LCD_Command
  2315                           
  2316                           ;newmain.c: 280: LCD_String("Change pass FAILED     ");
  2317  001004  0E4D               	movlw	low STR_12
  2318  001006  0100               	movlb	0	; () banked
  2319  001008  6F68               	movwf	LCD_String@msg& (0+255),b
  2320  00100A  0E7F               	movlw	high STR_12
  2321  00100C  0100               	movlb	0	; () banked
  2322  00100E  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2323  001010  ECDE  F016         	call	_LCD_String	;wreg free
  2324                           
  2325                           ;newmain.c: 281: MSdelay(1500);
  2326  001014  0E05               	movlw	5
  2327  001016  0100               	movlb	0	; () banked
  2328  001018  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2329  00101A  0EDC               	movlw	220
  2330  00101C  6F60               	movwf	MSdelay@val& (0+255),b
  2331  00101E  EC2E  F017         	call	_MSdelay	;wreg free
  2332                           
  2333                           ;newmain.c: 282: LCD_Clear();
  2334  001022  EC03  F018         	call	_LCD_Clear	;wreg free
  2335                           
  2336                           ;newmain.c: 283: LCD_Command(0x80);
  2337  001026  0E80               	movlw	128
  2338  001028  EC86  F016         	call	_LCD_Command
  2339                           
  2340                           ;newmain.c: 284: LCD_String("Press RESET_PASS");
  2341  00102C  0EED               	movlw	low STR_13
  2342  00102E  0100               	movlb	0	; () banked
  2343  001030  6F68               	movwf	LCD_String@msg& (0+255),b
  2344  001032  0E7F               	movlw	high STR_13
  2345  001034  0100               	movlb	0	; () banked
  2346  001036  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2347  001038  ECDE  F016         	call	_LCD_String	;wreg free
  2348                           
  2349                           ;newmain.c: 285: LCD_Command(0xC0);
  2350  00103C  0EC0               	movlw	192
  2351  00103E  EC86  F016         	call	_LCD_Command
  2352                           
  2353                           ;newmain.c: 286: LCD_String("to rechange pass    ");
  2354  001042  0E90               	movlw	low STR_14
  2355  001044  0100               	movlb	0	; () banked
  2356  001046  6F68               	movwf	LCD_String@msg& (0+255),b
  2357  001048  0E7F               	movlw	high STR_14
  2358  00104A  0100               	movlb	0	; () banked
  2359  00104C  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2360  00104E  ECDE  F016         	call	_LCD_String	;wreg free
  2361                           
  2362                           ;newmain.c: 287: MSdelay(3000);
  2363  001052  0E0B               	movlw	11
  2364  001054  0100               	movlb	0	; () banked
  2365  001056  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2366  001058  0EB8               	movlw	184
  2367  00105A  6F60               	movwf	MSdelay@val& (0+255),b
  2368  00105C  EC2E  F017         	call	_MSdelay	;wreg free
  2369                           
  2370                           ;newmain.c: 288: }
  2371                           ;newmain.c: 289: }
  2372  001060  D01F               	goto	l4043
  2373  001062                     l4035:
  2374                           
  2375                           ;newmain.c: 290: else{
  2376                           ;newmain.c: 291: LCD_Clear();
  2377  001062  EC03  F018         	call	_LCD_Clear	;wreg free
  2378                           
  2379                           ;newmain.c: 292: LCD_Command(0x80);
  2380  001066  0E80               	movlw	128
  2381  001068  EC86  F016         	call	_LCD_Command
  2382                           
  2383                           ;newmain.c: 293: LCD_String("Press RESET_PASS");
  2384  00106C  0EED               	movlw	low STR_13
  2385  00106E  0100               	movlb	0	; () banked
  2386  001070  6F68               	movwf	LCD_String@msg& (0+255),b
  2387  001072  0E7F               	movlw	high STR_13
  2388  001074  0100               	movlb	0	; () banked
  2389  001076  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2390  001078  ECDE  F016         	call	_LCD_String	;wreg free
  2391                           
  2392                           ;newmain.c: 294: LCD_Command(0xC0);
  2393  00107C  0EC0               	movlw	192
  2394  00107E  EC86  F016         	call	_LCD_Command
  2395                           
  2396                           ;newmain.c: 295: LCD_String("to rechange pass    ");
  2397  001082  0E90               	movlw	low STR_14
  2398  001084  0100               	movlb	0	; () banked
  2399  001086  6F68               	movwf	LCD_String@msg& (0+255),b
  2400  001088  0E7F               	movlw	high STR_14
  2401  00108A  0100               	movlb	0	; () banked
  2402  00108C  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2403  00108E  ECDE  F016         	call	_LCD_String	;wreg free
  2404                           
  2405                           ;newmain.c: 296: MSdelay(3000);
  2406  001092  0E0B               	movlw	11
  2407  001094  0100               	movlb	0	; () banked
  2408  001096  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  2409  001098  0EB8               	movlw	184
  2410  00109A  6F60               	movwf	MSdelay@val& (0+255),b
  2411  00109C  EC2E  F017         	call	_MSdelay	;wreg free
  2412  0010A0                     l4043:
  2413                           
  2414                           ;newmain.c: 297: }
  2415                           ;newmain.c: 298: }
  2416                           ;newmain.c: 301: LCD_Command(0x80);
  2417  0010A0  0E80               	movlw	128
  2418  0010A2  EC86  F016         	call	_LCD_Command
  2419                           
  2420                           ;newmain.c: 302: LCD_String("WELCOME TO HOME!");
  2421  0010A6  0EDC               	movlw	low STR_17
  2422  0010A8  0100               	movlb	0	; () banked
  2423  0010AA  6F68               	movwf	LCD_String@msg& (0+255),b
  2424  0010AC  0E7F               	movlw	high STR_17
  2425  0010AE  0100               	movlb	0	; () banked
  2426  0010B0  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2427  0010B2  ECDE  F016         	call	_LCD_String	;wreg free
  2428                           
  2429                           ;newmain.c: 303: LCD_Command(0xC0);
  2430  0010B6  0EC0               	movlw	192
  2431  0010B8  EC86  F016         	call	_LCD_Command
  2432                           
  2433                           ;newmain.c: 304: LCD_String(" PRESS EN_KEY!! ");
  2434  0010BC  0ECB               	movlw	low STR_18
  2435  0010BE  0100               	movlb	0	; () banked
  2436  0010C0  6F68               	movwf	LCD_String@msg& (0+255),b
  2437  0010C2  0E7F               	movlw	high STR_18
  2438  0010C4  0100               	movlb	0	; () banked
  2439  0010C6  6F69               	movwf	(LCD_String@msg+1)& (0+255),b
  2440  0010C8  ECDE  F016         	call	_LCD_String	;wreg free
  2441                           
  2442                           ;newmain.c: 305: count=0;
  2443  0010CC  0E00               	movlw	0
  2444  0010CE  0100               	movlb	0	; () banked
  2445  0010D0  6FDE               	movwf	(main@count+1)& (0+255),b
  2446  0010D2  0E00               	movlw	0
  2447  0010D4  6FDD               	movwf	main@count& (0+255),b
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;newmain.c: 306: memset(pass,0,6);
  2451  0010D6  0ED3               	movlw	low main@pass
  2452  0010D8  0100               	movlb	0	; () banked
  2453  0010DA  6F60               	movwf	memset@p1& (0+255),b
  2454  0010DC  0E00               	movlw	high main@pass
  2455  0010DE  0100               	movlb	0	; () banked
  2456  0010E0  6F61               	movwf	(memset@p1+1)& (0+255),b
  2457  0010E2  0E00               	movlw	0
  2458  0010E4  0100               	movlb	0	; () banked
  2459  0010E6  6F63               	movwf	(memset@c+1)& (0+255),b
  2460  0010E8  0E00               	movlw	0
  2461  0010EA  6F62               	movwf	memset@c& (0+255),b
  2462  0010EC  0E00               	movlw	0
  2463  0010EE  0100               	movlb	0	; () banked
  2464  0010F0  6F65               	movwf	(memset@n+1)& (0+255),b
  2465  0010F2  0E06               	movlw	6
  2466  0010F4  6F64               	movwf	memset@n& (0+255),b
  2467  0010F6  EC8A  F017         	call	_memset	;wreg free
  2468                           
  2469                           ;newmain.c: 307: memset(buffer,0,50);
  2470  0010FA  0E00               	movlw	low _buffer
  2471  0010FC  0100               	movlb	0	; () banked
  2472  0010FE  6F60               	movwf	memset@p1& (0+255),b
  2473  001100  0E01               	movlw	high _buffer
  2474  001102  0100               	movlb	0	; () banked
  2475  001104  6F61               	movwf	(memset@p1+1)& (0+255),b
  2476  001106  0E00               	movlw	0
  2477  001108  0100               	movlb	0	; () banked
  2478  00110A  6F63               	movwf	(memset@c+1)& (0+255),b
  2479  00110C  0E00               	movlw	0
  2480  00110E  6F62               	movwf	memset@c& (0+255),b
  2481  001110  0E00               	movlw	0
  2482  001112  0100               	movlb	0	; () banked
  2483  001114  6F65               	movwf	(memset@n+1)& (0+255),b
  2484  001116  0E32               	movlw	50
  2485  001118  6F64               	movwf	memset@n& (0+255),b
  2486  00111A  EC8A  F017         	call	_memset	;wreg free
  2487  00111E  D555               	goto	l3831
  2488  001120                     __end_of_main:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           intcon2	equ	0xFF1
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           plusw1	equ	0xFE3
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           plusw2	equ	0xFDB
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _strcmp *****************
  2507 ;; Defined at:
  2508 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  2511 ;;		 -> main@pass_verify(7), main@pass(7), 
  2512 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  2513 ;;		 -> main@pass_cmp(7), 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  r               1    5[BANK0 ] char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  2    0[BANK0 ] int 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2525 ;;      Params:         0       4       0       0       0       0       0       0       0
  2526 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2527 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2528 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2529 ;;Total ram usage:        6 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    3
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text1
  2540  002D66                     __ptext1:
  2541                           	opt stack 0
  2542  002D66                     _strcmp:
  2543                           	opt stack 27
  2544                           
  2545                           ;incstack = 0
  2546  002D66  D006               	goto	l3303
  2547  002D68                     l3301:
  2548  002D68  0100               	movlb	0	; () banked
  2549  002D6A  4B60               	infsnz	strcmp@s1& (0+255),f,b
  2550  002D6C  2B61               	incf	(strcmp@s1+1)& (0+255),f,b
  2551  002D6E  0100               	movlb	0	; () banked
  2552  002D70  4B62               	infsnz	strcmp@s2& (0+255),f,b
  2553  002D72  2B63               	incf	(strcmp@s2+1)& (0+255),f,b
  2554  002D74                     l3303:
  2555  002D74  C060  FFD9         	movff	strcmp@s1,fsr2l
  2556  002D78  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  2557  002D7C  50DF               	movf	indf2,w,c
  2558  002D7E  0100               	movlb	0	; () banked
  2559  002D80  6F64               	movwf	??_strcmp& (0+255),b
  2560  002D82  C062  FFD9         	movff	strcmp@s2,fsr2l
  2561  002D86  C063  FFDA         	movff	strcmp@s2+1,fsr2h
  2562  002D8A  50DF               	movf	indf2,w,c
  2563  002D8C  0800               	sublw	0
  2564  002D8E  0100               	movlb	0	; () banked
  2565  002D90  2564               	addwf	??_strcmp& (0+255),w,b
  2566  002D92  0100               	movlb	0	; () banked
  2567  002D94  6F65               	movwf	strcmp@r& (0+255),b
  2568  002D96  0100               	movlb	0	; () banked
  2569  002D98  5165               	movf	strcmp@r& (0+255),w,b
  2570  002D9A  A4D8               	btfss	status,2,c
  2571  002D9C  D007               	goto	l3307
  2572                           
  2573                           ; BSR set to: 0
  2574  002D9E  C060  FFD9         	movff	strcmp@s1,fsr2l
  2575  002DA2  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  2576  002DA6  50DF               	movf	indf2,w,c
  2577  002DA8  A4D8               	btfss	status,2,c
  2578  002DAA  D7DE               	goto	l3301
  2579  002DAC                     l3307:
  2580                           
  2581                           ; BSR set to: 0
  2582  002DAC  0100               	movlb	0	; () banked
  2583  002DAE  5165               	movf	strcmp@r& (0+255),w,b
  2584  002DB0  0100               	movlb	0	; () banked
  2585  002DB2  6F60               	movwf	?_strcmp& (0+255),b
  2586  002DB4  6B61               	clrf	(?_strcmp+1)& (0+255),b
  2587  002DB6  BF60               	btfsc	?_strcmp& (0+255),7,b
  2588  002DB8  0761               	decf	(?_strcmp+1)& (0+255),f,b
  2589  002DBA  0012               	return	
  2590  002DBC                     __end_of_strcmp:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           intcon2	equ	0xFF1
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postdec1	equ	0xFE5
  2600                           plusw1	equ	0xFE3
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           plusw2	equ	0xFDB
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _sprintf *****************
  2609 ;; Defined at:
  2610 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  2613 ;;		 -> buffer(50), 
  2614 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  2615 ;;		 -> STR_3(18), 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  tmpval          4   85[BANK0 ] struct .
  2618 ;;  val             4   81[BANK0 ] unsigned long 
  2619 ;;  fval            3   95[BANK0 ] unsigned long 
  2620 ;;  cp              3    0        PTR const unsigned char 
  2621 ;;  prec            2   98[BANK0 ] int 
  2622 ;;  width           2   93[BANK0 ] int 
  2623 ;;  flag            2   91[BANK0 ] unsigned short 
  2624 ;;  exp             2   89[BANK0 ] int 
  2625 ;;  ap              2   79[BANK0 ] PTR void [1]
  2626 ;;		 -> ?_sprintf(2), 
  2627 ;;  len             2    0        unsigned int 
  2628 ;;  c               1  100[BANK0 ] char 
  2629 ;;  d               1    0        unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  2   63[BANK0 ] int 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2639 ;;      Params:         0       7       0       0       0       0       0       0       0
  2640 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2641 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2642 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2643 ;;Total ram usage:       38 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    6
  2646 ;; This function calls:
  2647 ;;		___awdiv
  2648 ;;		___ftadd
  2649 ;;		___ftge
  2650 ;;		___ftmul
  2651 ;;		___ftneg
  2652 ;;		___ftsub
  2653 ;;		___fttol
  2654 ;;		___lldiv
  2655 ;;		___llmod
  2656 ;;		___lltoft
  2657 ;;		___wmul
  2658 ;;		__div_to_l_
  2659 ;;		__tdiv_to_l_
  2660 ;;		_fround
  2661 ;;		_isdigit
  2662 ;;		_scale
  2663 ;; This function is called by:
  2664 ;;		_main
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text2
  2669  000012                     __ptext2:
  2670                           	opt stack 0
  2671  000012                     _sprintf:
  2672                           	opt stack 24
  2673                           
  2674                           ;doprnt.c: 494: va_list ap;
  2675                           ;doprnt.c: 499: signed char c;
  2676                           ;doprnt.c: 501: int width;
  2677                           ;doprnt.c: 504: int prec;
  2678                           ;doprnt.c: 508: unsigned short flag;
  2679                           ;doprnt.c: 515: char d;
  2680                           ;doprnt.c: 516: double fval;
  2681                           ;doprnt.c: 517: int exp;
  2682                           ;doprnt.c: 523: union {
  2683                           ;doprnt.c: 524: unsigned long vd;
  2684                           ;doprnt.c: 525: double integ;
  2685                           ;doprnt.c: 526: } tmpval;
  2686                           ;doprnt.c: 528: unsigned long val;
  2687                           ;doprnt.c: 529: unsigned len;
  2688                           ;doprnt.c: 530: const char * cp;
  2689                           ;doprnt.c: 533: *ap = __va_start();
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;incstack = 0
  2693  000012  0EA3               	movlw	low (?_sprintf+4)
  2694  000014  0100               	movlb	0	; () banked
  2695  000016  6FAF               	movwf	sprintf@ap& (0+255),b
  2696  000018  0E00               	movlw	high (?_sprintf+4)
  2697  00001A  0100               	movlb	0	; () banked
  2698  00001C  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  2699                           
  2700                           ;doprnt.c: 536: while(c = *f++) {
  2701  00001E  EF96  F005         	goto	l3605
  2702  000022                     l3313:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;doprnt.c: 538: if(c != '%')
  2706  000022  0E25               	movlw	37
  2707  000024  0100               	movlb	0	; () banked
  2708  000026  19C4               	xorwf	sprintf@c& (0+255),w,b
  2709  000028  B4D8               	btfsc	status,2,c
  2710  00002A  D008               	goto	l3319
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 540: {
  2714                           ;doprnt.c: 541: ((*sp++ = (c)));
  2715  00002C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2716  000030  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2717  000034  C0C4  FFDF         	movff	sprintf@c,indf2
  2718  000038  EF93  F005         	goto	l3603
  2719  00003C                     l3319:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;doprnt.c: 543: }
  2723                           ;doprnt.c: 546: width = 0;
  2724  00003C  0E00               	movlw	0
  2725  00003E  0100               	movlb	0	; () banked
  2726  000040  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2727  000042  0E00               	movlw	0
  2728  000044  6FBD               	movwf	sprintf@width& (0+255),b
  2729                           
  2730                           ;doprnt.c: 548: flag = 0;
  2731  000046  0E00               	movlw	0
  2732  000048  0100               	movlb	0	; () banked
  2733  00004A  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  2734  00004C  0E00               	movlw	0
  2735  00004E  6FBB               	movwf	sprintf@flag& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;doprnt.c: 551: switch(*f) {
  2739                           
  2740                           ;doprnt.c: 550: for(;;) {
  2741  000050  D005               	goto	l3325
  2742  000052                     l3321:
  2743                           
  2744                           ;doprnt.c: 580: flag |= 0x04;
  2745  000052  0100               	movlb	0	; () banked
  2746  000054  85BB               	bsf	sprintf@flag& (0+255),2,b
  2747                           
  2748                           ;doprnt.c: 581: f++;
  2749  000056  0100               	movlb	0	; () banked
  2750  000058  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2751  00005A  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2752  00005C                     l3325:
  2753  00005C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2754  000060  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2755  000064                     	if	0	;tblptru may be non-zero
  2756  000064                     	endif
  2757  000064                     	if	0	;tblptru may be non-zero
  2758  000064                     	endif
  2759  000064  0008               	tblrd		*
  2760  000066  50F5               	movf	tablat,w,c
  2761                           
  2762                           ; Switch size 1, requested type "space"
  2763                           ; Number of cases is 1, Range of values is 48 to 48
  2764                           ; switch strategies available:
  2765                           ; Name         Instructions Cycles
  2766                           ; simple_byte            4     3 (average)
  2767                           ;	Chosen strategy is simple_byte
  2768  000068  0A30               	xorlw	48	; case 48
  2769  00006A  B4D8               	btfsc	status,2,c
  2770  00006C  D7F2               	goto	l3321
  2771                           
  2772                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2773                           
  2774                           ;doprnt.c: 586: }
  2775                           
  2776                           ;doprnt.c: 585: break;
  2777  00006E  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2778  000072  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2779  000076                     	if	0	;tblptru may be non-zero
  2780  000076                     	endif
  2781  000076                     	if	0	;tblptru may be non-zero
  2782  000076                     	endif
  2783  000076  0008               	tblrd		*
  2784  000078  50F5               	movf	tablat,w,c
  2785  00007A  ECD5  F017         	call	_isdigit
  2786  00007E  A0D8               	btfss	status,0,c
  2787  000080  D040               	goto	l3339
  2788                           
  2789                           ;doprnt.c: 598: width = 0;
  2790  000082  0E00               	movlw	0
  2791  000084  0100               	movlb	0	; () banked
  2792  000086  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2793  000088  0E00               	movlw	0
  2794  00008A  6FBD               	movwf	sprintf@width& (0+255),b
  2795  00008C                     l3331:
  2796                           
  2797                           ;doprnt.c: 600: width *= 10;
  2798  00008C  C0BD  F06E         	movff	sprintf@width,___wmul@multiplier
  2799  000090  C0BE  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  2800  000094  0E00               	movlw	0
  2801  000096  0100               	movlb	0	; () banked
  2802  000098  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2803  00009A  0E0A               	movlw	10
  2804  00009C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2805  00009E  EC6F  F017         	call	___wmul	;wreg free
  2806  0000A2  C06E  F0BD         	movff	?___wmul,sprintf@width
  2807  0000A6  C06F  F0BE         	movff	?___wmul+1,sprintf@width+1
  2808                           
  2809                           ;doprnt.c: 601: width += *f++ - '0';
  2810  0000AA  0ED0               	movlw	208
  2811  0000AC  0100               	movlb	0	; () banked
  2812  0000AE  6FA6               	movwf	??_sprintf& (0+255),b
  2813  0000B0  0EFF               	movlw	255
  2814  0000B2  0100               	movlb	0	; () banked
  2815  0000B4  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2816  0000B6  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2817  0000BA  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2818  0000BE                     	if	0	;tblptru may be non-zero
  2819  0000BE                     	endif
  2820  0000BE                     	if	0	;tblptru may be non-zero
  2821  0000BE                     	endif
  2822  0000BE  0008               	tblrd		*
  2823  0000C0  50F5               	movf	tablat,w,c
  2824  0000C2  0100               	movlb	0	; () banked
  2825  0000C4  6FA8               	movwf	(??_sprintf+2)& (0+255),b
  2826  0000C6  6BA9               	clrf	(??_sprintf+3)& (0+255),b
  2827  0000C8  0100               	movlb	0	; () banked
  2828  0000CA  51A6               	movf	??_sprintf& (0+255),w,b
  2829  0000CC  0100               	movlb	0	; () banked
  2830  0000CE  27A8               	addwf	(??_sprintf+2)& (0+255),f,b
  2831  0000D0  0100               	movlb	0	; () banked
  2832  0000D2  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  2833  0000D4  0100               	movlb	0	; () banked
  2834  0000D6  23A9               	addwfc	(??_sprintf+3)& (0+255),f,b
  2835  0000D8  0100               	movlb	0	; () banked
  2836  0000DA  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  2837  0000DC  0100               	movlb	0	; () banked
  2838  0000DE  27BD               	addwf	sprintf@width& (0+255),f,b
  2839  0000E0  0100               	movlb	0	; () banked
  2840  0000E2  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  2841  0000E4  0100               	movlb	0	; () banked
  2842  0000E6  23BE               	addwfc	(sprintf@width+1)& (0+255),f,b
  2843                           
  2844                           ; BSR set to: 0
  2845  0000E8  0100               	movlb	0	; () banked
  2846  0000EA  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2847  0000EC  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2851  0000EE  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2852  0000F2  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2853  0000F6                     	if	0	;tblptru may be non-zero
  2854  0000F6                     	endif
  2855  0000F6                     	if	0	;tblptru may be non-zero
  2856  0000F6                     	endif
  2857  0000F6  0008               	tblrd		*
  2858  0000F8  50F5               	movf	tablat,w,c
  2859  0000FA  ECD5  F017         	call	_isdigit
  2860  0000FE  B0D8               	btfsc	status,0,c
  2861  000100  D7C5               	goto	l3331
  2862  000102                     l3339:
  2863                           
  2864                           ;doprnt.c: 608: }
  2865                           ;doprnt.c: 611: if(*f == '.') {
  2866  000102  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2867  000106  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2868  00010A                     	if	0	;tblptru may be non-zero
  2869  00010A                     	endif
  2870  00010A                     	if	0	;tblptru may be non-zero
  2871  00010A                     	endif
  2872  00010A  0008               	tblrd		*
  2873  00010C  50F5               	movf	tablat,w,c
  2874  00010E  0A2E               	xorlw	46
  2875  000110  A4D8               	btfss	status,2,c
  2876  000112  D039               	goto	l3351
  2877                           
  2878                           ;doprnt.c: 612: flag |= 0x4000;
  2879  000114  0100               	movlb	0	; () banked
  2880  000116  8DBC               	bsf	(sprintf@flag+1)& (0+255),6,b
  2881                           
  2882                           ;doprnt.c: 613: f++;
  2883  000118  0100               	movlb	0	; () banked
  2884  00011A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2885  00011C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;doprnt.c: 620: {
  2889                           ;doprnt.c: 621: prec = 0;
  2890  00011E  0E00               	movlw	0
  2891  000120  0100               	movlb	0	; () banked
  2892  000122  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2893  000124  0E00               	movlw	0
  2894  000126  6FC2               	movwf	sprintf@prec& (0+255),b
  2895                           
  2896                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2897  000128  D023               	goto	l3349
  2898  00012A                     l3345:
  2899                           
  2900                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2901  00012A  C0C2  F06E         	movff	sprintf@prec,___wmul@multiplier
  2902  00012E  C0C3  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2903  000132  0E00               	movlw	0
  2904  000134  0100               	movlb	0	; () banked
  2905  000136  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2906  000138  0E0A               	movlw	10
  2907  00013A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2908  00013C  EC6F  F017         	call	___wmul	;wreg free
  2909  000140  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2910  000144  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2911  000148                     	if	0	;tblptru may be non-zero
  2912  000148                     	endif
  2913  000148                     	if	0	;tblptru may be non-zero
  2914  000148                     	endif
  2915  000148  0008               	tblrd		*
  2916  00014A  50F5               	movf	tablat,w,c
  2917  00014C  0100               	movlb	0	; () banked
  2918  00014E  276E               	addwf	?___wmul& (0+255),f,b
  2919  000150  0E00               	movlw	0
  2920  000152  0100               	movlb	0	; () banked
  2921  000154  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  2922  000156  0ED0               	movlw	208
  2923  000158  0100               	movlb	0	; () banked
  2924  00015A  256E               	addwf	?___wmul& (0+255),w,b
  2925  00015C  0100               	movlb	0	; () banked
  2926  00015E  6FC2               	movwf	sprintf@prec& (0+255),b
  2927  000160  0EFF               	movlw	255
  2928  000162  0100               	movlb	0	; () banked
  2929  000164  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2930  000166  0100               	movlb	0	; () banked
  2931  000168  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934  00016A  0100               	movlb	0	; () banked
  2935  00016C  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2936  00016E  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2937  000170                     l3349:
  2938                           
  2939                           ; BSR set to: 0
  2940  000170  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2941  000174  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2942  000178                     	if	0	;tblptru may be non-zero
  2943  000178                     	endif
  2944  000178                     	if	0	;tblptru may be non-zero
  2945  000178                     	endif
  2946  000178  0008               	tblrd		*
  2947  00017A  50F5               	movf	tablat,w,c
  2948  00017C  ECD5  F017         	call	_isdigit
  2949  000180  A0D8               	btfss	status,0,c
  2950  000182  D00C               	goto	l3359
  2951  000184  D7D2               	goto	l3345
  2952  000186                     l3351:
  2953                           
  2954                           ;doprnt.c: 626: prec = 0;
  2955  000186  0E00               	movlw	0
  2956  000188  0100               	movlb	0	; () banked
  2957  00018A  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2958  00018C  0E00               	movlw	0
  2959  00018E  6FC2               	movwf	sprintf@prec& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;doprnt.c: 628: flag |= 0x1000;
  2963  000190  0100               	movlb	0	; () banked
  2964  000192  89BC               	bsf	(sprintf@flag+1)& (0+255),4,b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;doprnt.c: 630: }
  2968                           ;doprnt.c: 635: switch(c = *f++) {
  2969  000194  D003               	goto	l3359
  2970  000196                     l3355:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;doprnt.c: 663: flag |= 0x400;
  2974  000196  0100               	movlb	0	; () banked
  2975  000198  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2976                           
  2977                           ;doprnt.c: 664: break;
  2978  00019A  D015               	goto	l3361
  2979  00019C                     l3359:
  2980  00019C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2981  0001A0  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2982  0001A4  0100               	movlb	0	; () banked
  2983  0001A6  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2984  0001A8  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2985  0001AA                     	if	0	;tblptru may be non-zero
  2986  0001AA                     	endif
  2987  0001AA                     	if	0	;tblptru may be non-zero
  2988  0001AA                     	endif
  2989  0001AA  0008               	tblrd		*
  2990  0001AC  CFF5 F0C4          	movff	tablat,sprintf@c
  2991  0001B0  0100               	movlb	0	; () banked
  2992  0001B2  51C4               	movf	sprintf@c& (0+255),w,b
  2993                           
  2994                           ; Switch size 1, requested type "space"
  2995                           ; Number of cases is 2, Range of values is 0 to 102
  2996                           ; switch strategies available:
  2997                           ; Name         Instructions Cycles
  2998                           ; simple_byte            7     4 (average)
  2999                           ;	Chosen strategy is simple_byte
  3000  0001B4  0A00               	xorlw	0	; case 0
  3001  0001B6  B4D8               	btfsc	status,2,c
  3002  0001B8  EFA5  F005         	goto	l3607
  3003  0001BC  0A66               	xorlw	102	; case 102
  3004  0001BE  B4D8               	btfsc	status,2,c
  3005  0001C0  D7EA               	goto	l3355
  3006  0001C2  EF96  F005         	goto	l3605
  3007  0001C6                     l3361:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;doprnt.c: 825: if(flag & (0x700)) {
  3011  0001C6  0E07               	movlw	7
  3012  0001C8  0100               	movlb	0	; () banked
  3013  0001CA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3014  0001CC  B4D8               	btfsc	status,2,c
  3015  0001CE  D3B1               	goto	l3541
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;doprnt.c: 827: if(flag & 0x1000)
  3019  0001D0  0100               	movlb	0	; () banked
  3020  0001D2  A9BC               	btfss	(sprintf@flag+1)& (0+255),4,b
  3021  0001D4  D005               	goto	l3367
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;doprnt.c: 829: prec = 6;
  3025  0001D6  0E00               	movlw	0
  3026  0001D8  0100               	movlb	0	; () banked
  3027  0001DA  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  3028  0001DC  0E06               	movlw	6
  3029  0001DE  6FC2               	movwf	sprintf@prec& (0+255),b
  3030  0001E0                     l3367:
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3034  0001E0  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  3035  0001E4  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  3036  0001E8  CFDE F0BF          	movff	postinc2,sprintf@fval
  3037  0001EC  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  3038  0001F0  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  3039                           
  3040                           ; BSR set to: 0
  3041  0001F4  0E03               	movlw	3
  3042  0001F6  0100               	movlb	0	; () banked
  3043  0001F8  27AF               	addwf	sprintf@ap& (0+255),f,b
  3044  0001FA  0E00               	movlw	0
  3045  0001FC  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;doprnt.c: 831: if(fval < 0.0) {
  3049  0001FE  0100               	movlb	0	; () banked
  3050  000200  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  3051  000202  D011               	goto	l3377
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;doprnt.c: 832: fval = -fval;
  3055  000204  C0BF  F060         	movff	sprintf@fval,___ftneg@f1
  3056  000208  C0C0  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  3057  00020C  C0C1  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  3058  000210  ECBD  F017         	call	___ftneg	;wreg free
  3059  000214  C060  F0BF         	movff	?___ftneg,sprintf@fval
  3060  000218  C061  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  3061  00021C  C062  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  3062                           
  3063                           ;doprnt.c: 833: flag |= 0x03;
  3064  000220  0E03               	movlw	3
  3065  000222  0100               	movlb	0	; () banked
  3066  000224  13BB               	iorwf	sprintf@flag& (0+255),f,b
  3067  000226                     l3377:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;doprnt.c: 834: }
  3071                           ;doprnt.c: 835: exp = 0;
  3072  000226  0E00               	movlw	0
  3073  000228  0100               	movlb	0	; () banked
  3074  00022A  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3075  00022C  0E00               	movlw	0
  3076  00022E  6FB9               	movwf	sprintf@exp& (0+255),b
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;doprnt.c: 836: if( fval!=0) {
  3080  000230  0100               	movlb	0	; () banked
  3081  000232  51BF               	movf	sprintf@fval& (0+255),w,b
  3082  000234  0100               	movlb	0	; () banked
  3083  000236  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3084  000238  0100               	movlb	0	; () banked
  3085  00023A  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3086  00023C  B4D8               	btfsc	status,2,c
  3087  00023E  D09B               	goto	l3405
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3091  000240  0E82               	movlw	130
  3092  000242  0100               	movlb	0	; () banked
  3093  000244  6FA6               	movwf	??_sprintf& (0+255),b
  3094  000246  0EFF               	movlw	255
  3095  000248  0100               	movlb	0	; () banked
  3096  00024A  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3097  00024C  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  3098  000250  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  3099  000254  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  3100  000258  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  3101  00025C  0E10               	movlw	16
  3102  00025E  D006               	goto	u3600
  3103  000260                     u3605:
  3104  000260  0100               	movlb	0	; () banked
  3105  000262  90D8               	bcf	status,0,c
  3106  000264  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  3107  000266  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  3108  000268  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  3109  00026A  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  3110  00026C                     u3600:
  3111  00026C  2EE8               	decfsz	wreg,f,c
  3112  00026E  D7F8               	goto	u3605
  3113  000270  0100               	movlb	0	; () banked
  3114  000272  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  3115  000274  0100               	movlb	0	; () banked
  3116  000276  25A6               	addwf	??_sprintf& (0+255),w,b
  3117  000278  0100               	movlb	0	; () banked
  3118  00027A  6FB9               	movwf	sprintf@exp& (0+255),b
  3119  00027C  0E00               	movlw	0
  3120  00027E  0100               	movlb	0	; () banked
  3121  000280  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  3122  000282  0100               	movlb	0	; () banked
  3123  000284  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 838: exp--;
  3127  000286  0100               	movlb	0	; () banked
  3128  000288  07B9               	decf	sprintf@exp& (0+255),f,b
  3129  00028A  A0D8               	btfss	status,0,c
  3130  00028C  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 839: exp *= 3;
  3134  00028E  C0B9  F06E         	movff	sprintf@exp,___wmul@multiplier
  3135  000292  C0BA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3136  000296  0E00               	movlw	0
  3137  000298  0100               	movlb	0	; () banked
  3138  00029A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3139  00029C  0E03               	movlw	3
  3140  00029E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3141  0002A0  EC6F  F017         	call	___wmul	;wreg free
  3142  0002A4  C06E  F0B9         	movff	?___wmul,sprintf@exp
  3143  0002A8  C06F  F0BA         	movff	?___wmul+1,sprintf@exp+1
  3144                           
  3145                           ;doprnt.c: 840: exp /= 10;
  3146  0002AC  C0B9  F066         	movff	sprintf@exp,___awdiv@dividend
  3147  0002B0  C0BA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  3148  0002B4  0E00               	movlw	0
  3149  0002B6  0100               	movlb	0	; () banked
  3150  0002B8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3151  0002BA  0E0A               	movlw	10
  3152  0002BC  6F68               	movwf	___awdiv@divisor& (0+255),b
  3153  0002BE  EC33  F014         	call	___awdiv	;wreg free
  3154  0002C2  C066  F0B9         	movff	?___awdiv,sprintf@exp
  3155  0002C6  C067  F0BA         	movff	?___awdiv+1,sprintf@exp+1
  3156                           
  3157                           ;doprnt.c: 841: if(exp < 0)
  3158  0002CA  0100               	movlb	0	; () banked
  3159  0002CC  AFBA               	btfss	(sprintf@exp+1)& (0+255),7,b
  3160  0002CE  D004               	goto	l3393
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 842: exp--;
  3164  0002D0  0100               	movlb	0	; () banked
  3165  0002D2  07B9               	decf	sprintf@exp& (0+255),f,b
  3166  0002D4  A0D8               	btfss	status,0,c
  3167  0002D6  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3168  0002D8                     l3393:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3172  0002D8  0100               	movlb	0	; () banked
  3173  0002DA  51B9               	movf	sprintf@exp& (0+255),w,b
  3174  0002DC  0800               	sublw	0
  3175  0002DE  EC90  F008         	call	_scale
  3176  0002E2  C083  F0B5         	movff	?_scale,sprintf@tmpval
  3177  0002E6  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  3178  0002EA  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  3179                           
  3180                           ;doprnt.c: 847: tmpval.integ *= fval;
  3181  0002EE  C0B5  F074         	movff	sprintf@tmpval,___ftmul@f1
  3182  0002F2  C0B6  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3183  0002F6  C0B7  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3184  0002FA  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  3185  0002FE  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3186  000302  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3187  000306  ECDA  F00F         	call	___ftmul	;wreg free
  3188  00030A  C074  F0B5         	movff	?___ftmul,sprintf@tmpval
  3189  00030E  C075  F0B6         	movff	?___ftmul+1,sprintf@tmpval+1
  3190  000312  C076  F0B7         	movff	?___ftmul+2,sprintf@tmpval+2
  3191                           
  3192                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3193  000316  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3194  00031A  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3195  00031E  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3196  000322  0E00               	movlw	0
  3197  000324  0100               	movlb	0	; () banked
  3198  000326  6F63               	movwf	___ftge@ff2& (0+255),b
  3199  000328  0E80               	movlw	128
  3200  00032A  0100               	movlb	0	; () banked
  3201  00032C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3202  00032E  0E3F               	movlw	63
  3203  000330  0100               	movlb	0	; () banked
  3204  000332  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3205  000334  ECCF  F013         	call	___ftge	;wreg free
  3206  000338  0100               	movlb	0	; () banked
  3207  00033A  B0D8               	btfsc	status,0,c
  3208  00033C  D005               	goto	l3401
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;doprnt.c: 849: exp--;
  3212  00033E  0100               	movlb	0	; () banked
  3213  000340  07B9               	decf	sprintf@exp& (0+255),f,b
  3214  000342  A0D8               	btfss	status,0,c
  3215  000344  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3216  000346  D017               	goto	l3405
  3217  000348                     l3401:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3221  000348  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3222  00034C  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3223  000350  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3224  000354  0E00               	movlw	0
  3225  000356  0100               	movlb	0	; () banked
  3226  000358  6F63               	movwf	___ftge@ff2& (0+255),b
  3227  00035A  0E20               	movlw	32
  3228  00035C  0100               	movlb	0	; () banked
  3229  00035E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3230  000360  0E41               	movlw	65
  3231  000362  0100               	movlb	0	; () banked
  3232  000364  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3233  000366  ECCF  F013         	call	___ftge	;wreg free
  3234  00036A  0100               	movlb	0	; () banked
  3235  00036C  A0D8               	btfss	status,0,c
  3236  00036E  D003               	goto	l3405
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;doprnt.c: 851: exp++;
  3240  000370  0100               	movlb	0	; () banked
  3241  000372  4BB9               	infsnz	sprintf@exp& (0+255),f,b
  3242  000374  2BBA               	incf	(sprintf@exp+1)& (0+255),f,b
  3243  000376                     l3405:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;doprnt.c: 852: }
  3247                           ;doprnt.c: 1112: if(prec <= 12)
  3248  000376  0100               	movlb	0	; () banked
  3249  000378  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3250  00037A  D008               	goto	l3407
  3251  00037C  0100               	movlb	0	; () banked
  3252  00037E  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3253  000380  E11D               	bnz	l3409
  3254  000382  0E0D               	movlw	13
  3255  000384  0100               	movlb	0	; () banked
  3256  000386  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3257  000388  B0D8               	btfsc	status,0,c
  3258  00038A  D018               	goto	l3409
  3259  00038C                     l3407:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 1113: fval += fround(prec);
  3263  00038C  C0BF  F08D         	movff	sprintf@fval,___ftadd@f1
  3264  000390  C0C0  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  3265  000394  C0C1  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  3266  000398  0100               	movlb	0	; () banked
  3267  00039A  51C2               	movf	sprintf@prec& (0+255),w,b
  3268  00039C  ECE7  F00A         	call	_fround
  3269  0003A0  C083  F090         	movff	?_fround,___ftadd@f2
  3270  0003A4  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  3271  0003A8  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  3272  0003AC  EC3D  F00C         	call	___ftadd	;wreg free
  3273  0003B0  C08D  F0BF         	movff	?___ftadd,sprintf@fval
  3274  0003B4  C08E  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  3275  0003B8  C08F  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  3276  0003BC                     l3409:
  3277                           
  3278                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3279  0003BC  0100               	movlb	0	; () banked
  3280  0003BE  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3281  0003C0  D008               	goto	l3411
  3282  0003C2  0100               	movlb	0	; () banked
  3283  0003C4  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3284  0003C6  E12A               	bnz	l3417
  3285  0003C8  0E0A               	movlw	10
  3286  0003CA  0100               	movlb	0	; () banked
  3287  0003CC  5DB9               	subwf	sprintf@exp& (0+255),w,b
  3288  0003CE  B0D8               	btfsc	status,0,c
  3289  0003D0  D025               	goto	l3417
  3290  0003D2                     l3411:
  3291                           
  3292                           ; BSR set to: 0
  3293  0003D2  0100               	movlb	0	; () banked
  3294  0003D4  51BF               	movf	sprintf@fval& (0+255),w,b
  3295  0003D6  0100               	movlb	0	; () banked
  3296  0003D8  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3297  0003DA  0100               	movlb	0	; () banked
  3298  0003DC  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3299  0003DE  B4D8               	btfsc	status,2,c
  3300  0003E0  D063               	goto	l3431
  3301                           
  3302                           ; BSR set to: 0
  3303  0003E2  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  3304  0003E6  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3305  0003EA  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3306  0003EE  EC89  F010         	call	___fttol	;wreg free
  3307  0003F2  0100               	movlb	0	; () banked
  3308  0003F4  518A               	movf	?___fttol& (0+255),w,b
  3309  0003F6  0100               	movlb	0	; () banked
  3310  0003F8  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  3311  0003FA  0100               	movlb	0	; () banked
  3312  0003FC  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  3313  0003FE  0100               	movlb	0	; () banked
  3314  000400  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  3315  000402  A4D8               	btfss	status,2,c
  3316  000404  D051               	goto	l3431
  3317                           
  3318                           ; BSR set to: 0
  3319  000406  0100               	movlb	0	; () banked
  3320  000408  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3321  00040A  D04E               	goto	l3431
  3322  00040C  0100               	movlb	0	; () banked
  3323  00040E  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3324  000410  E105               	bnz	l3417
  3325  000412  0E02               	movlw	2
  3326  000414  0100               	movlb	0	; () banked
  3327  000416  5DB9               	subwf	sprintf@exp& (0+255),w,b
  3328  000418  A0D8               	btfss	status,0,c
  3329  00041A  D046               	goto	l3431
  3330  00041C                     l3417:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3334  00041C  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  3335  000420  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3336  000424  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3337  000428  0E70               	movlw	112
  3338  00042A  0100               	movlb	0	; () banked
  3339  00042C  6F63               	movwf	___ftge@ff2& (0+255),b
  3340  00042E  0E89               	movlw	137
  3341  000430  0100               	movlb	0	; () banked
  3342  000432  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3343  000434  0E40               	movlw	64
  3344  000436  0100               	movlb	0	; () banked
  3345  000438  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3346  00043A  ECCF  F013         	call	___ftge	;wreg free
  3347  00043E  0100               	movlb	0	; () banked
  3348  000440  B0D8               	btfsc	status,0,c
  3349  000442  D003               	goto	l3421
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3353  000444  0100               	movlb	0	; () banked
  3354  000446  0EF7               	movlw	247
  3355  000448  D002               	goto	L1
  3356  00044A                     l3421:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3360  00044A  0100               	movlb	0	; () banked
  3361  00044C  0EF8               	movlw	248
  3362  00044E                     L1:
  3363  00044E  27B9               	addwf	sprintf@exp& (0+255),f,b
  3364  000450  0EFF               	movlw	255
  3365  000452  23BA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;doprnt.c: 1124: }
  3369                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3370                           
  3371                           ; BSR set to: 0
  3372  000454  0100               	movlb	0	; () banked
  3373  000456  51B9               	movf	sprintf@exp& (0+255),w,b
  3374  000458  EC90  F008         	call	_scale
  3375  00045C  C083  F0B5         	movff	?_scale,sprintf@tmpval
  3376  000460  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  3377  000464  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  3378                           
  3379                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3380  000468  C0BF  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  3381  00046C  C0C0  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3382  000470  C0C1  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3383  000474  C0B5  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3384  000478  C0B6  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3385  00047C  C0B7  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3386  000480  EC47  F00E         	call	__tdiv_to_l_	;wreg free
  3387  000484  C060  F0B1         	movff	?__tdiv_to_l_,sprintf@val
  3388  000488  C061  F0B2         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3389  00048C  C062  F0B3         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3390  000490  C063  F0B4         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3391                           
  3392                           ;doprnt.c: 1129: fval = 0.0;
  3393  000494  0E00               	movlw	0
  3394  000496  0100               	movlb	0	; () banked
  3395  000498  6FBF               	movwf	sprintf@fval& (0+255),b
  3396  00049A  0E00               	movlw	0
  3397  00049C  0100               	movlb	0	; () banked
  3398  00049E  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  3399  0004A0  0E00               	movlw	0
  3400  0004A2  0100               	movlb	0	; () banked
  3401  0004A4  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  3402                           
  3403                           ;doprnt.c: 1130: } else {
  3404  0004A6  D033               	goto	l3435
  3405  0004A8                     l3431:
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3409  0004A8  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  3410  0004AC  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3411  0004B0  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3412  0004B4  EC89  F010         	call	___fttol	;wreg free
  3413  0004B8  C08A  F0B1         	movff	?___fttol,sprintf@val
  3414  0004BC  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  3415  0004C0  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  3416  0004C4  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  3417                           
  3418                           ;doprnt.c: 1132: fval -= (double)val;
  3419  0004C8  C0BF  F099         	movff	sprintf@fval,___ftsub@f1
  3420  0004CC  C0C0  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  3421  0004D0  C0C1  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  3422  0004D4  C0B1  F068         	movff	sprintf@val,___lltoft@c
  3423  0004D8  C0B2  F069         	movff	sprintf@val+1,___lltoft@c+1
  3424  0004DC  C0B3  F06A         	movff	sprintf@val+2,___lltoft@c+2
  3425  0004E0  C0B4  F06B         	movff	sprintf@val+3,___lltoft@c+3
  3426  0004E4  ECE5  F015         	call	___lltoft	;wreg free
  3427  0004E8  C068  F09C         	movff	?___lltoft,___ftsub@f2
  3428  0004EC  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  3429  0004F0  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  3430  0004F4  EC08  F017         	call	___ftsub	;wreg free
  3431  0004F8  C099  F0BF         	movff	?___ftsub,sprintf@fval
  3432  0004FC  C09A  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  3433  000500  C09B  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  3434                           
  3435                           ;doprnt.c: 1133: exp = 0;
  3436  000504  0E00               	movlw	0
  3437  000506  0100               	movlb	0	; () banked
  3438  000508  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  3439  00050A  0E00               	movlw	0
  3440  00050C  6FB9               	movwf	sprintf@exp& (0+255),b
  3441  00050E                     l3435:
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;doprnt.c: 1134: }
  3445                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3446  00050E  0E01               	movlw	1
  3447  000510  0100               	movlb	0	; () banked
  3448  000512  6FC4               	movwf	sprintf@c& (0+255),b
  3449  000514                     l3437:
  3450                           
  3451                           ; BSR set to: 0
  3452  000514  0E0A               	movlw	10
  3453  000516  0100               	movlb	0	; () banked
  3454  000518  19C4               	xorwf	sprintf@c& (0+255),w,b
  3455  00051A  B4D8               	btfsc	status,2,c
  3456  00051C  D01E               	goto	l3449
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;doprnt.c: 1137: if(val < dpowers[c])
  3460                           
  3461                           ; BSR set to: 0
  3462                           
  3463                           ; BSR set to: 0
  3464  00051E  0100               	movlb	0	; () banked
  3465  000520  51C4               	movf	sprintf@c& (0+255),w,b
  3466  000522  0D04               	mullw	4
  3467  000524  0E17               	movlw	low _dpowers
  3468  000526  24F3               	addwf	prodl,w,c
  3469  000528  6EF6               	movwf	tblptrl,c
  3470  00052A  0E7E               	movlw	high _dpowers
  3471  00052C  20F4               	addwfc	prodh,w,c
  3472  00052E  6EF7               	movwf	tblptrh,c
  3473  000530                     	if	0	;There are less than 3 active tblptr bytes
  3474  000530                     	endif
  3475  000530  0009               	tblrd		*+
  3476  000532  50F5               	movf	tablat,w,c
  3477  000534  0100               	movlb	0	; () banked
  3478  000536  5DB1               	subwf	sprintf@val& (0+255),w,b
  3479  000538  0009               	tblrd		*+
  3480  00053A  50F5               	movf	tablat,w,c
  3481  00053C  0100               	movlb	0	; () banked
  3482  00053E  59B2               	subwfb	(sprintf@val+1)& (0+255),w,b
  3483  000540  0009               	tblrd		*+
  3484  000542  50F5               	movf	tablat,w,c
  3485  000544  0100               	movlb	0	; () banked
  3486  000546  59B3               	subwfb	(sprintf@val+2)& (0+255),w,b
  3487  000548  0009               	tblrd		*+
  3488  00054A  50F5               	movf	tablat,w,c
  3489  00054C  0100               	movlb	0	; () banked
  3490  00054E  59B4               	subwfb	(sprintf@val+3)& (0+255),w,b
  3491  000550  A0D8               	btfss	status,0,c
  3492  000552  D003               	goto	l3449
  3493                           
  3494                           ; BSR set to: 0
  3495                           
  3496                           ; BSR set to: 0
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;doprnt.c: 1138: break;
  3500  000554  0100               	movlb	0	; () banked
  3501  000556  2BC4               	incf	sprintf@c& (0+255),f,b
  3502  000558  D7DD               	goto	l3437
  3503  00055A                     l3449:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;doprnt.c: 1142: width -= prec + c + exp;
  3507  00055A  C0C4  F0A6         	movff	sprintf@c,??_sprintf
  3508  00055E  0100               	movlb	0	; () banked
  3509  000560  6BA7               	clrf	(??_sprintf+1)& (0+255),b
  3510  000562  BFA6               	btfsc	??_sprintf& (0+255),7,b
  3511  000564  07A7               	decf	(??_sprintf+1)& (0+255),f,b
  3512  000566  0100               	movlb	0	; () banked
  3513  000568  51C2               	movf	sprintf@prec& (0+255),w,b
  3514  00056A  0100               	movlb	0	; () banked
  3515  00056C  27A6               	addwf	??_sprintf& (0+255),f,b
  3516  00056E  0100               	movlb	0	; () banked
  3517  000570  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3518  000572  0100               	movlb	0	; () banked
  3519  000574  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  3520  000576  0100               	movlb	0	; () banked
  3521  000578  51B9               	movf	sprintf@exp& (0+255),w,b
  3522  00057A  0100               	movlb	0	; () banked
  3523  00057C  27A6               	addwf	??_sprintf& (0+255),f,b
  3524  00057E  0100               	movlb	0	; () banked
  3525  000580  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3526  000582  0100               	movlb	0	; () banked
  3527  000584  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  3528  000586  0100               	movlb	0	; () banked
  3529  000588  51A6               	movf	??_sprintf& (0+255),w,b
  3530  00058A  0100               	movlb	0	; () banked
  3531  00058C  5FBD               	subwf	sprintf@width& (0+255),f,b
  3532  00058E  0100               	movlb	0	; () banked
  3533  000590  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  3534  000592  0100               	movlb	0	; () banked
  3535  000594  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3536                           
  3537                           ;doprnt.c: 1143: if(
  3538                           ;doprnt.c: 1147: prec)
  3539  000596  0100               	movlb	0	; () banked
  3540  000598  51C2               	movf	sprintf@prec& (0+255),w,b
  3541  00059A  0100               	movlb	0	; () banked
  3542  00059C  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3543  00059E  B4D8               	btfsc	status,2,c
  3544  0005A0  D004               	goto	l3453
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 1148: width--;
  3548  0005A2  0100               	movlb	0	; () banked
  3549  0005A4  07BD               	decf	sprintf@width& (0+255),f,b
  3550  0005A6  A0D8               	btfss	status,0,c
  3551  0005A8  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3552  0005AA                     l3453:
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;doprnt.c: 1149: if(flag & 0x03)
  3556  0005AA  0E03               	movlw	3
  3557  0005AC  0100               	movlb	0	; () banked
  3558  0005AE  15BB               	andwf	sprintf@flag& (0+255),w,b
  3559  0005B0  0100               	movlb	0	; () banked
  3560  0005B2  6FA6               	movwf	??_sprintf& (0+255),b
  3561  0005B4  0E00               	movlw	0
  3562  0005B6  0100               	movlb	0	; () banked
  3563  0005B8  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3564  0005BA  0100               	movlb	0	; () banked
  3565  0005BC  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3566  0005BE  0100               	movlb	0	; () banked
  3567  0005C0  51A6               	movf	??_sprintf& (0+255),w,b
  3568  0005C2  0100               	movlb	0	; () banked
  3569  0005C4  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3570  0005C6  B4D8               	btfsc	status,2,c
  3571  0005C8  D004               	goto	l3457
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;doprnt.c: 1150: width--;
  3575  0005CA  0100               	movlb	0	; () banked
  3576  0005CC  07BD               	decf	sprintf@width& (0+255),f,b
  3577  0005CE  A0D8               	btfss	status,0,c
  3578  0005D0  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3579  0005D2                     l3457:
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;doprnt.c: 1153: if(flag & 0x04) {
  3583  0005D2  0100               	movlb	0	; () banked
  3584  0005D4  A5BB               	btfss	sprintf@flag& (0+255),2,b
  3585  0005D6  D03F               	goto	l3479
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;doprnt.c: 1157: if(flag & 0x03)
  3589  0005D8  0E03               	movlw	3
  3590  0005DA  0100               	movlb	0	; () banked
  3591  0005DC  15BB               	andwf	sprintf@flag& (0+255),w,b
  3592  0005DE  0100               	movlb	0	; () banked
  3593  0005E0  6FA6               	movwf	??_sprintf& (0+255),b
  3594  0005E2  0E00               	movlw	0
  3595  0005E4  0100               	movlb	0	; () banked
  3596  0005E6  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3597  0005E8  0100               	movlb	0	; () banked
  3598  0005EA  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3599  0005EC  0100               	movlb	0	; () banked
  3600  0005EE  51A6               	movf	??_sprintf& (0+255),w,b
  3601  0005F0  0100               	movlb	0	; () banked
  3602  0005F2  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3603  0005F4  B4D8               	btfsc	status,2,c
  3604  0005F6  D017               	goto	l3471
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3608  0005F8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3609  0005FC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3610  000600  0E2D               	movlw	45
  3611  000602  6EDF               	movwf	indf2,c
  3612                           
  3613                           ; BSR set to: 0
  3614  000604  0100               	movlb	0	; () banked
  3615  000606  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3616  000608  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;doprnt.c: 1168: while(width > 0) {
  3620  00060A  D00D               	goto	l3471
  3621  00060C                     l3465:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3625  00060C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3626  000610  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3627  000614  0E30               	movlw	48
  3628  000616  6EDF               	movwf	indf2,c
  3629                           
  3630                           ; BSR set to: 0
  3631  000618  0100               	movlb	0	; () banked
  3632  00061A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3633  00061C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;doprnt.c: 1170: width--;
  3637  00061E  0100               	movlb	0	; () banked
  3638  000620  07BD               	decf	sprintf@width& (0+255),f,b
  3639  000622  A0D8               	btfss	status,0,c
  3640  000624  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3641  000626                     l3471:
  3642                           
  3643                           ; BSR set to: 0
  3644  000626  0100               	movlb	0	; () banked
  3645  000628  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  3646  00062A  D084               	goto	l3495
  3647  00062C  0100               	movlb	0	; () banked
  3648  00062E  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3649  000630  E1ED               	bnz	l3465
  3650  000632  0100               	movlb	0	; () banked
  3651  000634  05BD               	decf	sprintf@width& (0+255),w,b
  3652  000636  A0D8               	btfss	status,0,c
  3653  000638  D07D               	goto	l3495
  3654  00063A  D7E8               	goto	l3465
  3655  00063C                     l3473:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3659  00063C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3660  000640  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3661  000644  0E20               	movlw	32
  3662  000646  6EDF               	movwf	indf2,c
  3663                           
  3664                           ; BSR set to: 0
  3665  000648  0100               	movlb	0	; () banked
  3666  00064A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3667  00064C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 1182: width--;
  3671  00064E  0100               	movlb	0	; () banked
  3672  000650  07BD               	decf	sprintf@width& (0+255),f,b
  3673  000652  A0D8               	btfss	status,0,c
  3674  000654  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3675  000656                     l3479:
  3676                           
  3677                           ; BSR set to: 0
  3678  000656  0100               	movlb	0	; () banked
  3679  000658  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  3680  00065A  D007               	goto	l3481
  3681  00065C  0100               	movlb	0	; () banked
  3682  00065E  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3683  000660  E1ED               	bnz	l3473
  3684  000662  0100               	movlb	0	; () banked
  3685  000664  05BD               	decf	sprintf@width& (0+255),w,b
  3686  000666  B0D8               	btfsc	status,0,c
  3687  000668  D7E9               	goto	l3473
  3688  00066A                     l3481:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;doprnt.c: 1183: }
  3692                           ;doprnt.c: 1188: if(flag & 0x03)
  3693  00066A  0E03               	movlw	3
  3694  00066C  0100               	movlb	0	; () banked
  3695  00066E  15BB               	andwf	sprintf@flag& (0+255),w,b
  3696  000670  0100               	movlb	0	; () banked
  3697  000672  6FA6               	movwf	??_sprintf& (0+255),b
  3698  000674  0E00               	movlw	0
  3699  000676  0100               	movlb	0	; () banked
  3700  000678  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3701  00067A  0100               	movlb	0	; () banked
  3702  00067C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3703  00067E  0100               	movlb	0	; () banked
  3704  000680  51A6               	movf	??_sprintf& (0+255),w,b
  3705  000682  0100               	movlb	0	; () banked
  3706  000684  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3707  000686  B4D8               	btfsc	status,2,c
  3708  000688  D055               	goto	l3495
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3712  00068A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3713  00068E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3714  000692  0E2D               	movlw	45
  3715  000694  D04D               	goto	L2
  3716  000696                     l3485:
  3717                           
  3718                           ; BSR set to: 0
  3719  000696  0100               	movlb	0	; () banked
  3720  000698  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3721  00069A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;doprnt.c: 1195: }
  3725                           ;doprnt.c: 1196: while(c--) {
  3726                           
  3727                           ; BSR set to: 0
  3728  00069C  D04B               	goto	l3495
  3729  00069E                     l3487:
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;doprnt.c: 1200: {
  3733                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3734  00069E  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  3735  0006A2  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3736  0006A6  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3737  0006AA  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3738  0006AE  0100               	movlb	0	; () banked
  3739  0006B0  51C4               	movf	sprintf@c& (0+255),w,b
  3740  0006B2  0D04               	mullw	4
  3741  0006B4  0E17               	movlw	low _dpowers
  3742  0006B6  24F3               	addwf	prodl,w,c
  3743  0006B8  6EF6               	movwf	tblptrl,c
  3744  0006BA  0E7E               	movlw	high _dpowers
  3745  0006BC  20F4               	addwfc	prodh,w,c
  3746  0006BE  6EF7               	movwf	tblptrh,c
  3747  0006C0                     	if	0	;There are less than 3 active tblptr bytes
  3748  0006C0                     	endif
  3749  0006C0  0009               	tblrd		*+
  3750  0006C2  CFF5 F064          	movff	tablat,___lldiv@divisor
  3751  0006C6  0009               	tblrd		*+
  3752  0006C8  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3753  0006CC  0009               	tblrd		*+
  3754  0006CE  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3755  0006D2  000A               	tblrd		*-
  3756  0006D4  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3757  0006D8  EC92  F014         	call	___lldiv	;wreg free
  3758  0006DC  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  3759  0006E0  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  3760  0006E4  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  3761  0006E8  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  3762                           
  3763                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3764  0006EC  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  3765  0006F0  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3766  0006F4  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3767  0006F8  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3768  0006FC  0E0A               	movlw	10
  3769  0006FE  0100               	movlb	0	; () banked
  3770  000700  6F64               	movwf	___llmod@divisor& (0+255),b
  3771  000702  0E00               	movlw	0
  3772  000704  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3773  000706  0E00               	movlw	0
  3774  000708  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3775  00070A  0E00               	movlw	0
  3776  00070C  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3777  00070E  EC98  F015         	call	___llmod	;wreg free
  3778  000712  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  3779  000716  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  3780  00071A  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  3781  00071E  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  3782                           
  3783                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3784  000722  0100               	movlb	0	; () banked
  3785  000724  51B5               	movf	sprintf@tmpval& (0+255),w,b
  3786  000726  0F30               	addlw	48
  3787  000728  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3788  00072C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3789  000730                     L2:
  3790  000730  6EDF               	movwf	indf2,c
  3791  000732  D7B1               	goto	l3485
  3792  000734                     l3495:
  3793                           
  3794                           ; BSR set to: 0
  3795  000734  0100               	movlb	0	; () banked
  3796  000736  07C4               	decf	sprintf@c& (0+255),f,b
  3797  000738  0100               	movlb	0	; () banked
  3798  00073A  29C4               	incf	sprintf@c& (0+255),w,b
  3799  00073C  B4D8               	btfsc	status,2,c
  3800  00073E  D00E               	goto	l3503
  3801  000740  D7AE               	goto	l3487
  3802  000742                     l3497:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3806  000742  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3807  000746  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3808  00074A  0E30               	movlw	48
  3809  00074C  6EDF               	movwf	indf2,c
  3810                           
  3811                           ; BSR set to: 0
  3812  00074E  0100               	movlb	0	; () banked
  3813  000750  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3814  000752  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 1209: exp--;
  3818  000754  0100               	movlb	0	; () banked
  3819  000756  07B9               	decf	sprintf@exp& (0+255),f,b
  3820  000758  A0D8               	btfss	status,0,c
  3821  00075A  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  3822  00075C                     l3503:
  3823                           
  3824                           ; BSR set to: 0
  3825  00075C  0100               	movlb	0	; () banked
  3826  00075E  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3827  000760  D007               	goto	l3505
  3828  000762  0100               	movlb	0	; () banked
  3829  000764  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  3830  000766  E1ED               	bnz	l3497
  3831  000768  0100               	movlb	0	; () banked
  3832  00076A  05B9               	decf	sprintf@exp& (0+255),w,b
  3833  00076C  B0D8               	btfsc	status,0,c
  3834  00076E  D7E9               	goto	l3497
  3835  000770                     l3505:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1210: }
  3839                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3840  000770  0100               	movlb	0	; () banked
  3841  000772  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3842  000774  D00C               	goto	l302
  3843  000776  0100               	movlb	0	; () banked
  3844  000778  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3845  00077A  E105               	bnz	u3820
  3846  00077C  0E09               	movlw	9
  3847  00077E  0100               	movlb	0	; () banked
  3848  000780  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3849  000782  A0D8               	btfss	status,0,c
  3850  000784  D004               	goto	l302
  3851  000786                     u3820:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3855  000786  0E08               	movlw	8
  3856  000788  0100               	movlb	0	; () banked
  3857  00078A  6FC4               	movwf	sprintf@c& (0+255),b
  3858  00078C  D002               	goto	l3509
  3859  00078E                     l302:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;doprnt.c: 1213: else
  3863                           ;doprnt.c: 1214: c = prec;
  3864  00078E  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  3865  000792                     l3509:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;doprnt.c: 1215: prec -= c;
  3869  000792  0100               	movlb	0	; () banked
  3870  000794  51C4               	movf	sprintf@c& (0+255),w,b
  3871  000796  0100               	movlb	0	; () banked
  3872  000798  5FC2               	subwf	sprintf@prec& (0+255),f,b
  3873  00079A  0E00               	movlw	0
  3874  00079C  0100               	movlb	0	; () banked
  3875  00079E  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3876  0007A0  0EFF               	movlw	255
  3877  0007A2  0100               	movlb	0	; () banked
  3878  0007A4  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;doprnt.c: 1219: if(c)
  3882  0007A6  0100               	movlb	0	; () banked
  3883  0007A8  51C4               	movf	sprintf@c& (0+255),w,b
  3884  0007AA  0100               	movlb	0	; () banked
  3885  0007AC  B4D8               	btfsc	status,2,c
  3886  0007AE  D009               	goto	l3517
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3890  0007B0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3891  0007B4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3892  0007B8  0E2E               	movlw	46
  3893  0007BA  6EDF               	movwf	indf2,c
  3894                           
  3895                           ; BSR set to: 0
  3896  0007BC  0100               	movlb	0	; () banked
  3897  0007BE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3898  0007C0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3899  0007C2                     l3517:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3903  0007C2  0100               	movlb	0	; () banked
  3904  0007C4  51C4               	movf	sprintf@c& (0+255),w,b
  3905  0007C6  EC90  F008         	call	_scale
  3906  0007CA  C083  F0AC         	movff	?_scale,_sprintf$1159
  3907  0007CE  C084  F0AD         	movff	?_scale+1,_sprintf$1159+1
  3908  0007D2  C085  F0AE         	movff	?_scale+2,_sprintf$1159+2
  3909                           
  3910                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3911  0007D6  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  3912  0007DA  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3913  0007DE  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3914  0007E2  C0AC  F074         	movff	_sprintf$1159,___ftmul@f1
  3915  0007E6  C0AD  F075         	movff	_sprintf$1159+1,___ftmul@f1+1
  3916  0007EA  C0AE  F076         	movff	_sprintf$1159+2,___ftmul@f1+2
  3917  0007EE  ECDA  F00F         	call	___ftmul	;wreg free
  3918  0007F2  C074  F08A         	movff	?___ftmul,___fttol@f1
  3919  0007F6  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3920  0007FA  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3921  0007FE  EC89  F010         	call	___fttol	;wreg free
  3922  000802  C08A  F0B1         	movff	?___fttol,sprintf@val
  3923  000806  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  3924  00080A  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  3925  00080E  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  3926                           
  3927                           ;doprnt.c: 1228: while(c--) {
  3928  000812  D074               	goto	l3531
  3929  000814                     l3521:
  3930                           
  3931                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3932  000814  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  3933  000818  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3934  00081C  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3935  000820  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3936  000824  0100               	movlb	0	; () banked
  3937  000826  51C4               	movf	sprintf@c& (0+255),w,b
  3938  000828  0D04               	mullw	4
  3939  00082A  0E17               	movlw	low _dpowers
  3940  00082C  24F3               	addwf	prodl,w,c
  3941  00082E  6EF6               	movwf	tblptrl,c
  3942  000830  0E7E               	movlw	high _dpowers
  3943  000832  20F4               	addwfc	prodh,w,c
  3944  000834  6EF7               	movwf	tblptrh,c
  3945  000836                     	if	0	;There are less than 3 active tblptr bytes
  3946  000836                     	endif
  3947  000836  0009               	tblrd		*+
  3948  000838  CFF5 F064          	movff	tablat,___lldiv@divisor
  3949  00083C  0009               	tblrd		*+
  3950  00083E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3951  000842  0009               	tblrd		*+
  3952  000844  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3953  000848  000A               	tblrd		*-
  3954  00084A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3955  00084E  EC92  F014         	call	___lldiv	;wreg free
  3956  000852  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  3957  000856  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  3958  00085A  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  3959  00085E  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  3960                           
  3961                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3962  000862  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  3963  000866  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3964  00086A  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3965  00086E  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3966  000872  0E0A               	movlw	10
  3967  000874  0100               	movlb	0	; () banked
  3968  000876  6F64               	movwf	___llmod@divisor& (0+255),b
  3969  000878  0E00               	movlw	0
  3970  00087A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3971  00087C  0E00               	movlw	0
  3972  00087E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3973  000880  0E00               	movlw	0
  3974  000882  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3975  000884  EC98  F015         	call	___llmod	;wreg free
  3976  000888  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  3977  00088C  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  3978  000890  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  3979  000894  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  3980                           
  3981                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3982  000898  0100               	movlb	0	; () banked
  3983  00089A  51B5               	movf	sprintf@tmpval& (0+255),w,b
  3984  00089C  0F30               	addlw	48
  3985  00089E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3986  0008A2  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3987  0008A6  6EDF               	movwf	indf2,c
  3988                           
  3989                           ; BSR set to: 0
  3990  0008A8  0100               	movlb	0	; () banked
  3991  0008AA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3992  0008AC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;doprnt.c: 1232: val %= dpowers[c];
  3996  0008AE  C0B1  F060         	movff	sprintf@val,___llmod@dividend
  3997  0008B2  C0B2  F061         	movff	sprintf@val+1,___llmod@dividend+1
  3998  0008B6  C0B3  F062         	movff	sprintf@val+2,___llmod@dividend+2
  3999  0008BA  C0B4  F063         	movff	sprintf@val+3,___llmod@dividend+3
  4000  0008BE  0100               	movlb	0	; () banked
  4001  0008C0  51C4               	movf	sprintf@c& (0+255),w,b
  4002  0008C2  0D04               	mullw	4
  4003  0008C4  0E17               	movlw	low _dpowers
  4004  0008C6  24F3               	addwf	prodl,w,c
  4005  0008C8  6EF6               	movwf	tblptrl,c
  4006  0008CA  0E7E               	movlw	high _dpowers
  4007  0008CC  20F4               	addwfc	prodh,w,c
  4008  0008CE  6EF7               	movwf	tblptrh,c
  4009  0008D0                     	if	0	;There are less than 3 active tblptr bytes
  4010  0008D0                     	endif
  4011  0008D0  0009               	tblrd		*+
  4012  0008D2  CFF5 F064          	movff	tablat,___llmod@divisor
  4013  0008D6  0009               	tblrd		*+
  4014  0008D8  CFF5 F065          	movff	tablat,___llmod@divisor+1
  4015  0008DC  0009               	tblrd		*+
  4016  0008DE  CFF5 F066          	movff	tablat,___llmod@divisor+2
  4017  0008E2  000A               	tblrd		*-
  4018  0008E4  CFF5 F067          	movff	tablat,___llmod@divisor+3
  4019  0008E8  EC98  F015         	call	___llmod	;wreg free
  4020  0008EC  C060  F0B1         	movff	?___llmod,sprintf@val
  4021  0008F0  C061  F0B2         	movff	?___llmod+1,sprintf@val+1
  4022  0008F4  C062  F0B3         	movff	?___llmod+2,sprintf@val+2
  4023  0008F8  C063  F0B4         	movff	?___llmod+3,sprintf@val+3
  4024  0008FC                     l3531:
  4025  0008FC  0100               	movlb	0	; () banked
  4026  0008FE  07C4               	decf	sprintf@c& (0+255),f,b
  4027  000900  0100               	movlb	0	; () banked
  4028  000902  29C4               	incf	sprintf@c& (0+255),w,b
  4029  000904  B4D8               	btfsc	status,2,c
  4030  000906  D00E               	goto	l3539
  4031  000908  D785               	goto	l3521
  4032  00090A                     l3533:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4036  00090A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4037  00090E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4038  000912  0E30               	movlw	48
  4039  000914  6EDF               	movwf	indf2,c
  4040                           
  4041                           ; BSR set to: 0
  4042  000916  0100               	movlb	0	; () banked
  4043  000918  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4044  00091A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;doprnt.c: 1237: prec--;
  4048  00091C  0100               	movlb	0	; () banked
  4049  00091E  07C2               	decf	sprintf@prec& (0+255),f,b
  4050  000920  A0D8               	btfss	status,0,c
  4051  000922  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  4052  000924                     l3539:
  4053                           
  4054                           ; BSR set to: 0
  4055  000924  0100               	movlb	0	; () banked
  4056  000926  51C2               	movf	sprintf@prec& (0+255),w,b
  4057  000928  0100               	movlb	0	; () banked
  4058  00092A  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4059  00092C  B4D8               	btfsc	status,2,c
  4060  00092E  D0FE               	goto	l3605
  4061  000930  D7EC               	goto	l3533
  4062  000932                     l3541:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;doprnt.c: 1246: }
  4066                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4067  000932  0100               	movlb	0	; () banked
  4068  000934  51C2               	movf	sprintf@prec& (0+255),w,b
  4069  000936  0100               	movlb	0	; () banked
  4070  000938  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4071  00093A  A4D8               	btfss	status,2,c
  4072  00093C  D00D               	goto	l3547
  4073                           
  4074                           ; BSR set to: 0
  4075  00093E  0100               	movlb	0	; () banked
  4076  000940  51B1               	movf	sprintf@val& (0+255),w,b
  4077  000942  0100               	movlb	0	; () banked
  4078  000944  11B2               	iorwf	(sprintf@val+1)& (0+255),w,b
  4079  000946  0100               	movlb	0	; () banked
  4080  000948  11B3               	iorwf	(sprintf@val+2)& (0+255),w,b
  4081  00094A  0100               	movlb	0	; () banked
  4082  00094C  11B4               	iorwf	(sprintf@val+3)& (0+255),w,b
  4083  00094E  A4D8               	btfss	status,2,c
  4084  000950  D003               	goto	l3547
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;doprnt.c: 1291: prec++;
  4088  000952  0100               	movlb	0	; () banked
  4089  000954  4BC2               	infsnz	sprintf@prec& (0+255),f,b
  4090  000956  2BC3               	incf	(sprintf@prec+1)& (0+255),f,b
  4091  000958                     l3547:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;doprnt.c: 1339: if(c < prec)
  4095  000958  0E80               	movlw	128
  4096  00095A  0100               	movlb	0	; () banked
  4097  00095C  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4098  00095E  0E7F               	movlw	127
  4099  000960  0100               	movlb	0	; () banked
  4100  000962  6FA6               	movwf	??_sprintf& (0+255),b
  4101  000964  0100               	movlb	0	; () banked
  4102  000966  51C2               	movf	sprintf@prec& (0+255),w,b
  4103  000968  0100               	movlb	0	; () banked
  4104  00096A  5DC4               	subwf	sprintf@c& (0+255),w,b
  4105  00096C  0100               	movlb	0	; () banked
  4106  00096E  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4107  000970  0A80               	xorlw	128
  4108  000972  0100               	movlb	0	; () banked
  4109  000974  59A6               	subwfb	??_sprintf& (0+255),w,b
  4110  000976  B0D8               	btfsc	status,0,c
  4111  000978  D003               	goto	l3551
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;doprnt.c: 1340: c = prec;
  4115  00097A  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  4116  00097E  D018               	goto	l3555
  4117  000980                     l3551:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;doprnt.c: 1341: else if(prec < c)
  4121  000980  0100               	movlb	0	; () banked
  4122  000982  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4123  000984  0A80               	xorlw	128
  4124  000986  0100               	movlb	0	; () banked
  4125  000988  6FA6               	movwf	??_sprintf& (0+255),b
  4126  00098A  0100               	movlb	0	; () banked
  4127  00098C  51C4               	movf	sprintf@c& (0+255),w,b
  4128  00098E  0100               	movlb	0	; () banked
  4129  000990  5DC2               	subwf	sprintf@prec& (0+255),w,b
  4130  000992  0E80               	movlw	128
  4131  000994  0100               	movlb	0	; () banked
  4132  000996  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4133  000998  0E7F               	movlw	127
  4134  00099A  0100               	movlb	0	; () banked
  4135  00099C  59A6               	subwfb	??_sprintf& (0+255),w,b
  4136  00099E  B0D8               	btfsc	status,0,c
  4137  0009A0  D007               	goto	l3555
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;doprnt.c: 1342: prec = c;
  4141  0009A2  0100               	movlb	0	; () banked
  4142  0009A4  51C4               	movf	sprintf@c& (0+255),w,b
  4143  0009A6  0100               	movlb	0	; () banked
  4144  0009A8  6FC2               	movwf	sprintf@prec& (0+255),b
  4145  0009AA  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  4146  0009AC  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  4147  0009AE  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  4148  0009B0                     l3555:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4152  0009B0  0100               	movlb	0	; () banked
  4153  0009B2  51BD               	movf	sprintf@width& (0+255),w,b
  4154  0009B4  0100               	movlb	0	; () banked
  4155  0009B6  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4156  0009B8  B4D8               	btfsc	status,2,c
  4157  0009BA  D014               	goto	l3561
  4158                           
  4159                           ; BSR set to: 0
  4160  0009BC  0E03               	movlw	3
  4161  0009BE  0100               	movlb	0	; () banked
  4162  0009C0  15BB               	andwf	sprintf@flag& (0+255),w,b
  4163  0009C2  0100               	movlb	0	; () banked
  4164  0009C4  6FA6               	movwf	??_sprintf& (0+255),b
  4165  0009C6  0E00               	movlw	0
  4166  0009C8  0100               	movlb	0	; () banked
  4167  0009CA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4168  0009CC  0100               	movlb	0	; () banked
  4169  0009CE  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4170  0009D0  0100               	movlb	0	; () banked
  4171  0009D2  51A6               	movf	??_sprintf& (0+255),w,b
  4172  0009D4  0100               	movlb	0	; () banked
  4173  0009D6  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4174  0009D8  B4D8               	btfsc	status,2,c
  4175  0009DA  D004               	goto	l3561
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 1346: width--;
  4179  0009DC  0100               	movlb	0	; () banked
  4180  0009DE  07BD               	decf	sprintf@width& (0+255),f,b
  4181  0009E0  A0D8               	btfss	status,0,c
  4182  0009E2  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4183  0009E4                     l3561:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4187  0009E4  0100               	movlb	0	; () banked
  4188  0009E6  ADBC               	btfss	(sprintf@flag+1)& (0+255),6,b
  4189  0009E8  D01E               	goto	l3569
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;doprnt.c: 1349: if(width > prec)
  4193  0009EA  0100               	movlb	0	; () banked
  4194  0009EC  51BD               	movf	sprintf@width& (0+255),w,b
  4195  0009EE  0100               	movlb	0	; () banked
  4196  0009F0  5DC2               	subwf	sprintf@prec& (0+255),w,b
  4197  0009F2  0100               	movlb	0	; () banked
  4198  0009F4  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4199  0009F6  0A80               	xorlw	128
  4200  0009F8  0100               	movlb	0	; () banked
  4201  0009FA  6FA6               	movwf	??_sprintf& (0+255),b
  4202  0009FC  0100               	movlb	0	; () banked
  4203  0009FE  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  4204  000A00  0A80               	xorlw	128
  4205  000A02  0100               	movlb	0	; () banked
  4206  000A04  59A6               	subwfb	??_sprintf& (0+255),w,b
  4207  000A06  B0D8               	btfsc	status,0,c
  4208  000A08  D009               	goto	l3567
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;doprnt.c: 1350: width -= prec;
  4212  000A0A  0100               	movlb	0	; () banked
  4213  000A0C  51C2               	movf	sprintf@prec& (0+255),w,b
  4214  000A0E  0100               	movlb	0	; () banked
  4215  000A10  5FBD               	subwf	sprintf@width& (0+255),f,b
  4216  000A12  0100               	movlb	0	; () banked
  4217  000A14  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  4218  000A16  0100               	movlb	0	; () banked
  4219  000A18  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  4220  000A1A  D005               	goto	l3569
  4221  000A1C                     l3567:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;doprnt.c: 1351: else
  4225                           ;doprnt.c: 1352: width = 0;
  4226  000A1C  0E00               	movlw	0
  4227  000A1E  0100               	movlb	0	; () banked
  4228  000A20  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  4229  000A22  0E00               	movlw	0
  4230  000A24  6FBD               	movwf	sprintf@width& (0+255),b
  4231  000A26                     l3569:
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;doprnt.c: 1353: }
  4235                           ;doprnt.c: 1381: if(width > c)
  4236  000A26  0E80               	movlw	128
  4237  000A28  0100               	movlb	0	; () banked
  4238  000A2A  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4239  000A2C  0E7F               	movlw	127
  4240  000A2E  0100               	movlb	0	; () banked
  4241  000A30  6FA6               	movwf	??_sprintf& (0+255),b
  4242  000A32  0100               	movlb	0	; () banked
  4243  000A34  51BD               	movf	sprintf@width& (0+255),w,b
  4244  000A36  0100               	movlb	0	; () banked
  4245  000A38  5DC4               	subwf	sprintf@c& (0+255),w,b
  4246  000A3A  0100               	movlb	0	; () banked
  4247  000A3C  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  4248  000A3E  0A80               	xorlw	128
  4249  000A40  0100               	movlb	0	; () banked
  4250  000A42  59A6               	subwfb	??_sprintf& (0+255),w,b
  4251  000A44  B0D8               	btfsc	status,0,c
  4252  000A46  D00B               	goto	l3573
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 1382: width -= c;
  4256  000A48  0100               	movlb	0	; () banked
  4257  000A4A  51C4               	movf	sprintf@c& (0+255),w,b
  4258  000A4C  0100               	movlb	0	; () banked
  4259  000A4E  5FBD               	subwf	sprintf@width& (0+255),f,b
  4260  000A50  0E00               	movlw	0
  4261  000A52  0100               	movlb	0	; () banked
  4262  000A54  BFC4               	btfsc	sprintf@c& (0+255),7,b
  4263  000A56  0EFF               	movlw	255
  4264  000A58  0100               	movlb	0	; () banked
  4265  000A5A  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  4266  000A5C  D005               	goto	l3575
  4267  000A5E                     l3573:
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 1383: else
  4271                           ;doprnt.c: 1384: width = 0;
  4272  000A5E  0E00               	movlw	0
  4273  000A60  0100               	movlb	0	; () banked
  4274  000A62  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  4275  000A64  0E00               	movlw	0
  4276  000A66  6FBD               	movwf	sprintf@width& (0+255),b
  4277  000A68                     l3575:
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 1387: if(flag & 0x04) {
  4281  000A68  0100               	movlb	0	; () banked
  4282  000A6A  A5BB               	btfss	sprintf@flag& (0+255),2,b
  4283  000A6C  D02D               	goto	l3591
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;doprnt.c: 1392: if(flag & 0x03)
  4287  000A6E  0E03               	movlw	3
  4288  000A70  0100               	movlb	0	; () banked
  4289  000A72  15BB               	andwf	sprintf@flag& (0+255),w,b
  4290  000A74  0100               	movlb	0	; () banked
  4291  000A76  6FA6               	movwf	??_sprintf& (0+255),b
  4292  000A78  0E00               	movlw	0
  4293  000A7A  0100               	movlb	0	; () banked
  4294  000A7C  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4295  000A7E  0100               	movlb	0	; () banked
  4296  000A80  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4297  000A82  0100               	movlb	0	; () banked
  4298  000A84  51A6               	movf	??_sprintf& (0+255),w,b
  4299  000A86  0100               	movlb	0	; () banked
  4300  000A88  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4301  000A8A  B4D8               	btfsc	status,2,c
  4302  000A8C  D009               	goto	l3583
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4306  000A8E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4307  000A92  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4308  000A96  0E2D               	movlw	45
  4309  000A98  6EDF               	movwf	indf2,c
  4310                           
  4311                           ; BSR set to: 0
  4312  000A9A  0100               	movlb	0	; () banked
  4313  000A9C  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4314  000A9E  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4315  000AA0                     l3583:
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;doprnt.c: 1415: if(width)
  4319  000AA0  0100               	movlb	0	; () banked
  4320  000AA2  51BD               	movf	sprintf@width& (0+255),w,b
  4321  000AA4  0100               	movlb	0	; () banked
  4322  000AA6  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4323  000AA8  B4D8               	btfsc	status,2,c
  4324  000AAA  D040               	goto	l3605
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4328                           
  4329                           ; BSR set to: 0
  4330                           
  4331                           ;doprnt.c: 1416: do
  4332  000AAC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4333  000AB0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4334  000AB4  0E30               	movlw	48
  4335  000AB6  6EDF               	movwf	indf2,c
  4336                           
  4337                           ; BSR set to: 0
  4338  000AB8  0100               	movlb	0	; () banked
  4339  000ABA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4340  000ABC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;doprnt.c: 1418: while(--width);
  4344  000ABE  0100               	movlb	0	; () banked
  4345  000AC0  07BD               	decf	sprintf@width& (0+255),f,b
  4346  000AC2  A0D8               	btfss	status,0,c
  4347  000AC4  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4348  000AC6  D7EC               	goto	l3583
  4349  000AC8                     l3591:
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;doprnt.c: 1422: {
  4353                           ;doprnt.c: 1424: if(width
  4354                           ;doprnt.c: 1428: )
  4355  000AC8  0100               	movlb	0	; () banked
  4356  000ACA  51BD               	movf	sprintf@width& (0+255),w,b
  4357  000ACC  0100               	movlb	0	; () banked
  4358  000ACE  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4359  000AD0  B4D8               	btfsc	status,2,c
  4360  000AD2  D013               	goto	l3599
  4361  000AD4                     l3593:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4365  000AD4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4366  000AD8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4367  000ADC  0E20               	movlw	32
  4368  000ADE  6EDF               	movwf	indf2,c
  4369                           
  4370                           ; BSR set to: 0
  4371  000AE0  0100               	movlb	0	; () banked
  4372  000AE2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4373  000AE4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;doprnt.c: 1431: while(--width);
  4377  000AE6  0100               	movlb	0	; () banked
  4378  000AE8  07BD               	decf	sprintf@width& (0+255),f,b
  4379  000AEA  A0D8               	btfss	status,0,c
  4380  000AEC  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  4381  000AEE  0100               	movlb	0	; () banked
  4382  000AF0  51BD               	movf	sprintf@width& (0+255),w,b
  4383  000AF2  0100               	movlb	0	; () banked
  4384  000AF4  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  4385  000AF6  A4D8               	btfss	status,2,c
  4386  000AF8  D7ED               	goto	l3593
  4387  000AFA                     l3599:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1438: if(flag & 0x03)
  4391  000AFA  0E03               	movlw	3
  4392  000AFC  0100               	movlb	0	; () banked
  4393  000AFE  15BB               	andwf	sprintf@flag& (0+255),w,b
  4394  000B00  0100               	movlb	0	; () banked
  4395  000B02  6FA6               	movwf	??_sprintf& (0+255),b
  4396  000B04  0E00               	movlw	0
  4397  000B06  0100               	movlb	0	; () banked
  4398  000B08  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  4399  000B0A  0100               	movlb	0	; () banked
  4400  000B0C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4401  000B0E  0100               	movlb	0	; () banked
  4402  000B10  51A6               	movf	??_sprintf& (0+255),w,b
  4403  000B12  0100               	movlb	0	; () banked
  4404  000B14  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4405  000B16  B4D8               	btfsc	status,2,c
  4406  000B18  D009               	goto	l3605
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4410  000B1A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4411  000B1E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4412  000B22  0E2D               	movlw	45
  4413  000B24  6EDF               	movwf	indf2,c
  4414  000B26                     l3603:
  4415                           
  4416                           ; BSR set to: 0
  4417  000B26  0100               	movlb	0	; () banked
  4418  000B28  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  4419  000B2A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  4420  000B2C                     l3605:
  4421                           
  4422                           ; BSR set to: 0
  4423  000B2C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  4424  000B30  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  4425  000B34  0100               	movlb	0	; () banked
  4426  000B36  4BA1               	infsnz	sprintf@f& (0+255),f,b
  4427  000B38  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  4428  000B3A                     	if	0	;tblptru may be non-zero
  4429  000B3A                     	endif
  4430  000B3A                     	if	0	;tblptru may be non-zero
  4431  000B3A                     	endif
  4432  000B3A  0008               	tblrd		*
  4433  000B3C  CFF5 F0C4          	movff	tablat,sprintf@c
  4434  000B40  0100               	movlb	0	; () banked
  4435  000B42  51C4               	movf	sprintf@c& (0+255),w,b
  4436  000B44  A4D8               	btfss	status,2,c
  4437  000B46  EF11  F000         	goto	l3313
  4438  000B4A                     l3607:
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;doprnt.c: 1538: *sp = 0;
  4442  000B4A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  4443  000B4E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  4444  000B52  0E00               	movlw	0
  4445  000B54  6EDF               	movwf	indf2,c
  4446  000B56  0012               	return	
  4447  000B58                     __end_of_sprintf:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon2	equ	0xFF1
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           postdec1	equ	0xFE5
  4459                           plusw1	equ	0xFE3
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           plusw2	equ	0xFDB
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _scale *****************
  4470 ;; Defined at:
  4471 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  scl             1    wreg     char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  scl             1   41[BANK0 ] char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  3   35[BANK0 ] char 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4485 ;;      Params:         0       3       0       0       0       0       0       0       0
  4486 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4488 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4489 ;;Total ram usage:        7 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    5
  4492 ;; This function calls:
  4493 ;;		___awdiv
  4494 ;;		___awmod
  4495 ;;		___ftmul
  4496 ;;		___wmul
  4497 ;; This function is called by:
  4498 ;;		_sprintf
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text3
  4503  001120                     __ptext3:
  4504                           	opt stack 0
  4505  001120                     _scale:
  4506                           	opt stack 24
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;incstack = 0
  4510                           ;scale@scl stored from wreg
  4511  001120  0100               	movlb	0	; () banked
  4512  001122  6F89               	movwf	scale@scl& (0+255),b
  4513                           
  4514                           ;doprnt.c: 428: if(scl < 0) {
  4515  001124  0100               	movlb	0	; () banked
  4516  001126  AF89               	btfss	scale@scl& (0+255),7,b
  4517  001128  D12A               	goto	l2875
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;doprnt.c: 429: scl = -scl;
  4521  00112A  0100               	movlb	0	; () banked
  4522  00112C  6D89               	negf	scale@scl& (0+255),b
  4523                           
  4524                           ;doprnt.c: 430: if(scl>=110)
  4525  00112E  0100               	movlb	0	; () banked
  4526  001130  5189               	movf	scale@scl& (0+255),w,b
  4527  001132  0A80               	xorlw	128
  4528  001134  0F12               	addlw	-238
  4529  001136  A0D8               	btfss	status,0,c
  4530  001138  D0AC               	goto	l2865
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4534  00113A  0E00               	movlw	0
  4535  00113C  0100               	movlb	0	; () banked
  4536  00113E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4537  001140  0E03               	movlw	3
  4538  001142  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4539  001144  0E00               	movlw	0
  4540  001146  0100               	movlb	0	; () banked
  4541  001148  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4542  00114A  0E0A               	movlw	10
  4543  00114C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4544  00114E  0E00               	movlw	0
  4545  001150  0100               	movlb	0	; () banked
  4546  001152  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4547  001154  0E64               	movlw	100
  4548  001156  6F62               	movwf	___awmod@divisor& (0+255),b
  4549  001158  0100               	movlb	0	; () banked
  4550  00115A  5189               	movf	scale@scl& (0+255),w,b
  4551  00115C  0100               	movlb	0	; () banked
  4552  00115E  6F60               	movwf	___awmod@dividend& (0+255),b
  4553  001160  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4554  001162  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4555  001164  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4556  001166  EC47  F015         	call	___awmod	;wreg free
  4557  00116A  C060  F066         	movff	?___awmod,___awdiv@dividend
  4558  00116E  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4559  001172  EC33  F014         	call	___awdiv	;wreg free
  4560  001176  0E09               	movlw	9
  4561  001178  0100               	movlb	0	; () banked
  4562  00117A  2566               	addwf	?___awdiv& (0+255),w,b
  4563  00117C  0100               	movlb	0	; () banked
  4564  00117E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4565  001180  0E00               	movlw	0
  4566  001182  0100               	movlb	0	; () banked
  4567  001184  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4568  001186  0100               	movlb	0	; () banked
  4569  001188  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4570  00118A  EC6F  F017         	call	___wmul	;wreg free
  4571  00118E  0E3F               	movlw	low __npowers_
  4572  001190  0100               	movlb	0	; () banked
  4573  001192  256E               	addwf	?___wmul& (0+255),w,b
  4574  001194  6EF6               	movwf	tblptrl,c
  4575  001196  0E7E               	movlw	high __npowers_
  4576  001198  0100               	movlb	0	; () banked
  4577  00119A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4578  00119C  6EF7               	movwf	tblptrh,c
  4579  00119E                     	if	0	;There are less than 3 active tblptr bytes
  4580  00119E                     	endif
  4581  00119E  0009               	tblrd		*+
  4582  0011A0  CFF5 F077          	movff	tablat,___ftmul@f2
  4583  0011A4  0009               	tblrd		*+
  4584  0011A6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4585  0011AA  000A               	tblrd		*-
  4586  0011AC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4587  0011B0  0E00               	movlw	0
  4588  0011B2  0100               	movlb	0	; () banked
  4589  0011B4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4590  0011B6  0E64               	movlw	100
  4591  0011B8  6F68               	movwf	___awdiv@divisor& (0+255),b
  4592  0011BA  0100               	movlb	0	; () banked
  4593  0011BC  5189               	movf	scale@scl& (0+255),w,b
  4594  0011BE  0100               	movlb	0	; () banked
  4595  0011C0  6F66               	movwf	___awdiv@dividend& (0+255),b
  4596  0011C2  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4597  0011C4  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4598  0011C6  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4599  0011C8  EC33  F014         	call	___awdiv	;wreg free
  4600  0011CC  0E12               	movlw	18
  4601  0011CE  0100               	movlb	0	; () banked
  4602  0011D0  2566               	addwf	?___awdiv& (0+255),w,b
  4603  0011D2  0100               	movlb	0	; () banked
  4604  0011D4  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4605  0011D6  0E00               	movlw	0
  4606  0011D8  0100               	movlb	0	; () banked
  4607  0011DA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4608  0011DC  0100               	movlb	0	; () banked
  4609  0011DE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4610  0011E0  0E00               	movlw	0
  4611  0011E2  0100               	movlb	0	; () banked
  4612  0011E4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4613  0011E6  0E03               	movlw	3
  4614  0011E8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4615  0011EA  EC6F  F017         	call	___wmul	;wreg free
  4616  0011EE  0E3F               	movlw	low __npowers_
  4617  0011F0  0100               	movlb	0	; () banked
  4618  0011F2  256E               	addwf	?___wmul& (0+255),w,b
  4619  0011F4  6EF6               	movwf	tblptrl,c
  4620  0011F6  0E7E               	movlw	high __npowers_
  4621  0011F8  0100               	movlb	0	; () banked
  4622  0011FA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4623  0011FC  6EF7               	movwf	tblptrh,c
  4624  0011FE                     	if	0	;There are less than 3 active tblptr bytes
  4625  0011FE                     	endif
  4626  0011FE  0009               	tblrd		*+
  4627  001200  CFF5 F074          	movff	tablat,___ftmul@f1
  4628  001204  0009               	tblrd		*+
  4629  001206  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4630  00120A  000A               	tblrd		*-
  4631  00120C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4632  001210  ECDA  F00F         	call	___ftmul	;wreg free
  4633  001214  C074  F086         	movff	?___ftmul,_scale$1158
  4634  001218  C075  F087         	movff	?___ftmul+1,_scale$1158+1
  4635  00121C  C076  F088         	movff	?___ftmul+2,_scale$1158+2
  4636                           
  4637                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4638  001220  C086  F074         	movff	_scale$1158,___ftmul@f1
  4639  001224  C087  F075         	movff	_scale$1158+1,___ftmul@f1+1
  4640  001228  C088  F076         	movff	_scale$1158+2,___ftmul@f1+2
  4641  00122C  0E00               	movlw	0
  4642  00122E  0100               	movlb	0	; () banked
  4643  001230  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4644  001232  0E03               	movlw	3
  4645  001234  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4646  001236  0E00               	movlw	0
  4647  001238  0100               	movlb	0	; () banked
  4648  00123A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4649  00123C  0E0A               	movlw	10
  4650  00123E  6F62               	movwf	___awmod@divisor& (0+255),b
  4651  001240  0100               	movlb	0	; () banked
  4652  001242  5189               	movf	scale@scl& (0+255),w,b
  4653  001244  0100               	movlb	0	; () banked
  4654  001246  6F60               	movwf	___awmod@dividend& (0+255),b
  4655  001248  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4656  00124A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4657  00124C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4658  00124E  EC47  F015         	call	___awmod	;wreg free
  4659  001252  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4660  001256  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4661  00125A  EC6F  F017         	call	___wmul	;wreg free
  4662  00125E  0E3F               	movlw	low __npowers_
  4663  001260  0100               	movlb	0	; () banked
  4664  001262  256E               	addwf	?___wmul& (0+255),w,b
  4665  001264  6EF6               	movwf	tblptrl,c
  4666  001266  0E7E               	movlw	high __npowers_
  4667  001268  0100               	movlb	0	; () banked
  4668  00126A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4669  00126C  6EF7               	movwf	tblptrh,c
  4670  00126E                     	if	0	;There are less than 3 active tblptr bytes
  4671  00126E                     	endif
  4672  00126E  0009               	tblrd		*+
  4673  001270  CFF5 F077          	movff	tablat,___ftmul@f2
  4674  001274  0009               	tblrd		*+
  4675  001276  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4676  00127A  000A               	tblrd		*-
  4677  00127C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4678  001280  ECDA  F00F         	call	___ftmul	;wreg free
  4679  001284  C074  F083         	movff	?___ftmul,?_scale
  4680  001288  C075  F084         	movff	?___ftmul+1,?_scale+1
  4681  00128C  C076  F085         	movff	?___ftmul+2,?_scale+2
  4682  001290  0012               	return	
  4683  001292                     l2865:
  4684                           
  4685                           ;doprnt.c: 432: else if(scl > 10)
  4686  001292  0100               	movlb	0	; () banked
  4687  001294  5189               	movf	scale@scl& (0+255),w,b
  4688  001296  0A80               	xorlw	128
  4689  001298  0F75               	addlw	-139
  4690  00129A  A0D8               	btfss	status,0,c
  4691  00129C  D05D               	goto	l2871
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4695  00129E  0E00               	movlw	0
  4696  0012A0  0100               	movlb	0	; () banked
  4697  0012A2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4698  0012A4  0E0A               	movlw	10
  4699  0012A6  6F68               	movwf	___awdiv@divisor& (0+255),b
  4700  0012A8  0100               	movlb	0	; () banked
  4701  0012AA  5189               	movf	scale@scl& (0+255),w,b
  4702  0012AC  0100               	movlb	0	; () banked
  4703  0012AE  6F66               	movwf	___awdiv@dividend& (0+255),b
  4704  0012B0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4705  0012B2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4706  0012B4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4707  0012B6  EC33  F014         	call	___awdiv	;wreg free
  4708  0012BA  0E09               	movlw	9
  4709  0012BC  0100               	movlb	0	; () banked
  4710  0012BE  2566               	addwf	?___awdiv& (0+255),w,b
  4711  0012C0  0100               	movlb	0	; () banked
  4712  0012C2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4713  0012C4  0E00               	movlw	0
  4714  0012C6  0100               	movlb	0	; () banked
  4715  0012C8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4716  0012CA  0100               	movlb	0	; () banked
  4717  0012CC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4718  0012CE  0E00               	movlw	0
  4719  0012D0  0100               	movlb	0	; () banked
  4720  0012D2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4721  0012D4  0E03               	movlw	3
  4722  0012D6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4723  0012D8  EC6F  F017         	call	___wmul	;wreg free
  4724  0012DC  0E3F               	movlw	low __npowers_
  4725  0012DE  0100               	movlb	0	; () banked
  4726  0012E0  256E               	addwf	?___wmul& (0+255),w,b
  4727  0012E2  6EF6               	movwf	tblptrl,c
  4728  0012E4  0E7E               	movlw	high __npowers_
  4729  0012E6  0100               	movlb	0	; () banked
  4730  0012E8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4731  0012EA  6EF7               	movwf	tblptrh,c
  4732  0012EC                     	if	0	;There are less than 3 active tblptr bytes
  4733  0012EC                     	endif
  4734  0012EC  0009               	tblrd		*+
  4735  0012EE  CFF5 F074          	movff	tablat,___ftmul@f1
  4736  0012F2  0009               	tblrd		*+
  4737  0012F4  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4738  0012F8  000A               	tblrd		*-
  4739  0012FA  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4740  0012FE  0E00               	movlw	0
  4741  001300  0100               	movlb	0	; () banked
  4742  001302  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4743  001304  0E03               	movlw	3
  4744  001306  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4745  001308  0E00               	movlw	0
  4746  00130A  0100               	movlb	0	; () banked
  4747  00130C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4748  00130E  0E0A               	movlw	10
  4749  001310  6F62               	movwf	___awmod@divisor& (0+255),b
  4750  001312  0100               	movlb	0	; () banked
  4751  001314  5189               	movf	scale@scl& (0+255),w,b
  4752  001316  0100               	movlb	0	; () banked
  4753  001318  6F60               	movwf	___awmod@dividend& (0+255),b
  4754  00131A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4755  00131C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4756  00131E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4757  001320  EC47  F015         	call	___awmod	;wreg free
  4758  001324  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4759  001328  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4760  00132C  EC6F  F017         	call	___wmul	;wreg free
  4761  001330  0E3F               	movlw	low __npowers_
  4762  001332  0100               	movlb	0	; () banked
  4763  001334  256E               	addwf	?___wmul& (0+255),w,b
  4764  001336  6EF6               	movwf	tblptrl,c
  4765  001338  0E7E               	movlw	high __npowers_
  4766  00133A  0100               	movlb	0	; () banked
  4767  00133C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4768  00133E  6EF7               	movwf	tblptrh,c
  4769  001340                     	if	0	;There are less than 3 active tblptr bytes
  4770  001340                     	endif
  4771  001340  0009               	tblrd		*+
  4772  001342  CFF5 F077          	movff	tablat,___ftmul@f2
  4773  001346  0009               	tblrd		*+
  4774  001348  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4775  00134C  000A               	tblrd		*-
  4776  00134E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4777  001352  ECDA  F00F         	call	___ftmul	;wreg free
  4778  001356  D796               	goto	L3
  4779  001358                     l2871:
  4780                           
  4781                           ;doprnt.c: 434: return _npowers_[scl];
  4782  001358  0100               	movlb	0	; () banked
  4783  00135A  5189               	movf	scale@scl& (0+255),w,b
  4784  00135C  0D03               	mullw	3
  4785  00135E  0E3F               	movlw	low __npowers_
  4786  001360  24F3               	addwf	prodl,w,c
  4787  001362  6EF6               	movwf	tblptrl,c
  4788  001364  0E7E               	movlw	high __npowers_
  4789  001366  20F4               	addwfc	prodh,w,c
  4790  001368  6EF7               	movwf	tblptrh,c
  4791  00136A                     	if	0	;There are less than 3 active tblptr bytes
  4792  00136A                     	endif
  4793  00136A  0009               	tblrd		*+
  4794  00136C  CFF5 F083          	movff	tablat,?_scale
  4795  001370  0009               	tblrd		*+
  4796  001372  CFF5 F084          	movff	tablat,?_scale+1
  4797  001376  000A               	tblrd		*-
  4798  001378  CFF5 F085          	movff	tablat,?_scale+2
  4799                           
  4800                           ; BSR set to: 0
  4801  00137C  0012               	return	
  4802  00137E                     l2875:
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;doprnt.c: 435: }
  4806                           ;doprnt.c: 436: if(scl>=110)
  4807  00137E  0100               	movlb	0	; () banked
  4808  001380  5189               	movf	scale@scl& (0+255),w,b
  4809  001382  0A80               	xorlw	128
  4810  001384  0F12               	addlw	-238
  4811  001386  A0D8               	btfss	status,0,c
  4812  001388  D0AC               	goto	l2883
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4816  00138A  0E00               	movlw	0
  4817  00138C  0100               	movlb	0	; () banked
  4818  00138E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4819  001390  0E03               	movlw	3
  4820  001392  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4821  001394  0E00               	movlw	0
  4822  001396  0100               	movlb	0	; () banked
  4823  001398  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4824  00139A  0E0A               	movlw	10
  4825  00139C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4826  00139E  0E00               	movlw	0
  4827  0013A0  0100               	movlb	0	; () banked
  4828  0013A2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4829  0013A4  0E64               	movlw	100
  4830  0013A6  6F62               	movwf	___awmod@divisor& (0+255),b
  4831  0013A8  0100               	movlb	0	; () banked
  4832  0013AA  5189               	movf	scale@scl& (0+255),w,b
  4833  0013AC  0100               	movlb	0	; () banked
  4834  0013AE  6F60               	movwf	___awmod@dividend& (0+255),b
  4835  0013B0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4836  0013B2  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4837  0013B4  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4838  0013B6  EC47  F015         	call	___awmod	;wreg free
  4839  0013BA  C060  F066         	movff	?___awmod,___awdiv@dividend
  4840  0013BE  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4841  0013C2  EC33  F014         	call	___awdiv	;wreg free
  4842  0013C6  0E09               	movlw	9
  4843  0013C8  0100               	movlb	0	; () banked
  4844  0013CA  2566               	addwf	?___awdiv& (0+255),w,b
  4845  0013CC  0100               	movlb	0	; () banked
  4846  0013CE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4847  0013D0  0E00               	movlw	0
  4848  0013D2  0100               	movlb	0	; () banked
  4849  0013D4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4850  0013D6  0100               	movlb	0	; () banked
  4851  0013D8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4852  0013DA  EC6F  F017         	call	___wmul	;wreg free
  4853  0013DE  0E66               	movlw	low __powers_
  4854  0013E0  0100               	movlb	0	; () banked
  4855  0013E2  256E               	addwf	?___wmul& (0+255),w,b
  4856  0013E4  6EF6               	movwf	tblptrl,c
  4857  0013E6  0E7E               	movlw	high __powers_
  4858  0013E8  0100               	movlb	0	; () banked
  4859  0013EA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4860  0013EC  6EF7               	movwf	tblptrh,c
  4861  0013EE                     	if	0	;There are less than 3 active tblptr bytes
  4862  0013EE                     	endif
  4863  0013EE  0009               	tblrd		*+
  4864  0013F0  CFF5 F077          	movff	tablat,___ftmul@f2
  4865  0013F4  0009               	tblrd		*+
  4866  0013F6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4867  0013FA  000A               	tblrd		*-
  4868  0013FC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4869  001400  0E00               	movlw	0
  4870  001402  0100               	movlb	0	; () banked
  4871  001404  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4872  001406  0E64               	movlw	100
  4873  001408  6F68               	movwf	___awdiv@divisor& (0+255),b
  4874  00140A  0100               	movlb	0	; () banked
  4875  00140C  5189               	movf	scale@scl& (0+255),w,b
  4876  00140E  0100               	movlb	0	; () banked
  4877  001410  6F66               	movwf	___awdiv@dividend& (0+255),b
  4878  001412  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4879  001414  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4880  001416  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4881  001418  EC33  F014         	call	___awdiv	;wreg free
  4882  00141C  0E12               	movlw	18
  4883  00141E  0100               	movlb	0	; () banked
  4884  001420  2566               	addwf	?___awdiv& (0+255),w,b
  4885  001422  0100               	movlb	0	; () banked
  4886  001424  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4887  001426  0E00               	movlw	0
  4888  001428  0100               	movlb	0	; () banked
  4889  00142A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4890  00142C  0100               	movlb	0	; () banked
  4891  00142E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4892  001430  0E00               	movlw	0
  4893  001432  0100               	movlb	0	; () banked
  4894  001434  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4895  001436  0E03               	movlw	3
  4896  001438  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4897  00143A  EC6F  F017         	call	___wmul	;wreg free
  4898  00143E  0E66               	movlw	low __powers_
  4899  001440  0100               	movlb	0	; () banked
  4900  001442  256E               	addwf	?___wmul& (0+255),w,b
  4901  001444  6EF6               	movwf	tblptrl,c
  4902  001446  0E7E               	movlw	high __powers_
  4903  001448  0100               	movlb	0	; () banked
  4904  00144A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4905  00144C  6EF7               	movwf	tblptrh,c
  4906  00144E                     	if	0	;There are less than 3 active tblptr bytes
  4907  00144E                     	endif
  4908  00144E  0009               	tblrd		*+
  4909  001450  CFF5 F074          	movff	tablat,___ftmul@f1
  4910  001454  0009               	tblrd		*+
  4911  001456  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4912  00145A  000A               	tblrd		*-
  4913  00145C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4914  001460  ECDA  F00F         	call	___ftmul	;wreg free
  4915  001464  C074  F086         	movff	?___ftmul,_scale$1158
  4916  001468  C075  F087         	movff	?___ftmul+1,_scale$1158+1
  4917  00146C  C076  F088         	movff	?___ftmul+2,_scale$1158+2
  4918                           
  4919                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4920  001470  C086  F074         	movff	_scale$1158,___ftmul@f1
  4921  001474  C087  F075         	movff	_scale$1158+1,___ftmul@f1+1
  4922  001478  C088  F076         	movff	_scale$1158+2,___ftmul@f1+2
  4923  00147C  0E00               	movlw	0
  4924  00147E  0100               	movlb	0	; () banked
  4925  001480  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4926  001482  0E03               	movlw	3
  4927  001484  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4928  001486  0E00               	movlw	0
  4929  001488  0100               	movlb	0	; () banked
  4930  00148A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4931  00148C  0E0A               	movlw	10
  4932  00148E  6F62               	movwf	___awmod@divisor& (0+255),b
  4933  001490  0100               	movlb	0	; () banked
  4934  001492  5189               	movf	scale@scl& (0+255),w,b
  4935  001494  0100               	movlb	0	; () banked
  4936  001496  6F60               	movwf	___awmod@dividend& (0+255),b
  4937  001498  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4938  00149A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4939  00149C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4940  00149E  EC47  F015         	call	___awmod	;wreg free
  4941  0014A2  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4942  0014A6  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4943  0014AA  EC6F  F017         	call	___wmul	;wreg free
  4944  0014AE  0E66               	movlw	low __powers_
  4945  0014B0  0100               	movlb	0	; () banked
  4946  0014B2  256E               	addwf	?___wmul& (0+255),w,b
  4947  0014B4  6EF6               	movwf	tblptrl,c
  4948  0014B6  0E7E               	movlw	high __powers_
  4949  0014B8  0100               	movlb	0	; () banked
  4950  0014BA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4951  0014BC  6EF7               	movwf	tblptrh,c
  4952  0014BE                     	if	0	;There are less than 3 active tblptr bytes
  4953  0014BE                     	endif
  4954  0014BE  0009               	tblrd		*+
  4955  0014C0  CFF5 F077          	movff	tablat,___ftmul@f2
  4956  0014C4  0009               	tblrd		*+
  4957  0014C6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4958  0014CA  000A               	tblrd		*-
  4959  0014CC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4960  0014D0  ECDA  F00F         	call	___ftmul	;wreg free
  4961  0014D4  C074  F083         	movff	?___ftmul,?_scale
  4962  0014D8  C075  F084         	movff	?___ftmul+1,?_scale+1
  4963  0014DC  C076  F085         	movff	?___ftmul+2,?_scale+2
  4964  0014E0  0012               	return	
  4965  0014E2                     l2883:
  4966                           
  4967                           ;doprnt.c: 438: else if(scl > 10)
  4968  0014E2  0100               	movlb	0	; () banked
  4969  0014E4  5189               	movf	scale@scl& (0+255),w,b
  4970  0014E6  0A80               	xorlw	128
  4971  0014E8  0F75               	addlw	-139
  4972  0014EA  A0D8               	btfss	status,0,c
  4973  0014EC  D05D               	goto	l2889
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4977  0014EE  0E00               	movlw	0
  4978  0014F0  0100               	movlb	0	; () banked
  4979  0014F2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4980  0014F4  0E0A               	movlw	10
  4981  0014F6  6F68               	movwf	___awdiv@divisor& (0+255),b
  4982  0014F8  0100               	movlb	0	; () banked
  4983  0014FA  5189               	movf	scale@scl& (0+255),w,b
  4984  0014FC  0100               	movlb	0	; () banked
  4985  0014FE  6F66               	movwf	___awdiv@dividend& (0+255),b
  4986  001500  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4987  001502  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4988  001504  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4989  001506  EC33  F014         	call	___awdiv	;wreg free
  4990  00150A  0E09               	movlw	9
  4991  00150C  0100               	movlb	0	; () banked
  4992  00150E  2566               	addwf	?___awdiv& (0+255),w,b
  4993  001510  0100               	movlb	0	; () banked
  4994  001512  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4995  001514  0E00               	movlw	0
  4996  001516  0100               	movlb	0	; () banked
  4997  001518  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4998  00151A  0100               	movlb	0	; () banked
  4999  00151C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5000  00151E  0E00               	movlw	0
  5001  001520  0100               	movlb	0	; () banked
  5002  001522  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5003  001524  0E03               	movlw	3
  5004  001526  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5005  001528  EC6F  F017         	call	___wmul	;wreg free
  5006  00152C  0E66               	movlw	low __powers_
  5007  00152E  0100               	movlb	0	; () banked
  5008  001530  256E               	addwf	?___wmul& (0+255),w,b
  5009  001532  6EF6               	movwf	tblptrl,c
  5010  001534  0E7E               	movlw	high __powers_
  5011  001536  0100               	movlb	0	; () banked
  5012  001538  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5013  00153A  6EF7               	movwf	tblptrh,c
  5014  00153C                     	if	0	;There are less than 3 active tblptr bytes
  5015  00153C                     	endif
  5016  00153C  0009               	tblrd		*+
  5017  00153E  CFF5 F074          	movff	tablat,___ftmul@f1
  5018  001542  0009               	tblrd		*+
  5019  001544  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5020  001548  000A               	tblrd		*-
  5021  00154A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5022  00154E  0E00               	movlw	0
  5023  001550  0100               	movlb	0	; () banked
  5024  001552  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5025  001554  0E03               	movlw	3
  5026  001556  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5027  001558  0E00               	movlw	0
  5028  00155A  0100               	movlb	0	; () banked
  5029  00155C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5030  00155E  0E0A               	movlw	10
  5031  001560  6F62               	movwf	___awmod@divisor& (0+255),b
  5032  001562  0100               	movlb	0	; () banked
  5033  001564  5189               	movf	scale@scl& (0+255),w,b
  5034  001566  0100               	movlb	0	; () banked
  5035  001568  6F60               	movwf	___awmod@dividend& (0+255),b
  5036  00156A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5037  00156C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  5038  00156E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  5039  001570  EC47  F015         	call	___awmod	;wreg free
  5040  001574  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5041  001578  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5042  00157C  EC6F  F017         	call	___wmul	;wreg free
  5043  001580  0E66               	movlw	low __powers_
  5044  001582  0100               	movlb	0	; () banked
  5045  001584  256E               	addwf	?___wmul& (0+255),w,b
  5046  001586  6EF6               	movwf	tblptrl,c
  5047  001588  0E7E               	movlw	high __powers_
  5048  00158A  0100               	movlb	0	; () banked
  5049  00158C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5050  00158E  6EF7               	movwf	tblptrh,c
  5051  001590                     	if	0	;There are less than 3 active tblptr bytes
  5052  001590                     	endif
  5053  001590  0009               	tblrd		*+
  5054  001592  CFF5 F077          	movff	tablat,___ftmul@f2
  5055  001596  0009               	tblrd		*+
  5056  001598  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5057  00159C  000A               	tblrd		*-
  5058  00159E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5059  0015A2  ECDA  F00F         	call	___ftmul	;wreg free
  5060  0015A6  D796               	goto	L4
  5061  0015A8                     l2889:
  5062                           
  5063                           ;doprnt.c: 440: return _powers_[scl];
  5064  0015A8  0100               	movlb	0	; () banked
  5065  0015AA  5189               	movf	scale@scl& (0+255),w,b
  5066  0015AC  0D03               	mullw	3
  5067  0015AE  0E66               	movlw	low __powers_
  5068  0015B0  24F3               	addwf	prodl,w,c
  5069  0015B2  6EF6               	movwf	tblptrl,c
  5070  0015B4  0E7E               	movlw	high __powers_
  5071  0015B6  20F4               	addwfc	prodh,w,c
  5072  0015B8  6EF7               	movwf	tblptrh,c
  5073  0015BA                     	if	0	;There are less than 3 active tblptr bytes
  5074  0015BA                     	endif
  5075  0015BA  0009               	tblrd		*+
  5076  0015BC  CFF5 F083          	movff	tablat,?_scale
  5077  0015C0  0009               	tblrd		*+
  5078  0015C2  CFF5 F084          	movff	tablat,?_scale+1
  5079  0015C6  000A               	tblrd		*-
  5080  0015C8  CFF5 F085          	movff	tablat,?_scale+2
  5081  0015CC  0012               	return	
  5082  0015CE                     __end_of_scale:
  5083                           	opt stack 0
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           intcon2	equ	0xFF1
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           postdec1	equ	0xFE5
  5094                           plusw1	equ	0xFE3
  5095                           fsr1l	equ	0xFE1
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           plusw2	equ	0xFDB
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _isdigit *****************
  5105 ;; Defined at:
  5106 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  c               1    wreg     unsigned char 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  c               1    2[BANK0 ] unsigned char 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0
  5121 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5122 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5123 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5124 ;;Total ram usage:        3 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    3
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_sprintf
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text4
  5135  002FAA                     __ptext4:
  5136                           	opt stack 0
  5137  002FAA                     _isdigit:
  5138                           	opt stack 26
  5139                           
  5140                           ;incstack = 0
  5141                           ;isdigit@c stored from wreg
  5142  002FAA  0100               	movlb	0	; () banked
  5143  002FAC  6F62               	movwf	isdigit@c& (0+255),b
  5144  002FAE  0E00               	movlw	0
  5145  002FB0  0100               	movlb	0	; () banked
  5146  002FB2  6F61               	movwf	_isdigit$826& (0+255),b
  5147                           
  5148                           ; BSR set to: 0
  5149  002FB4  0E3A               	movlw	58
  5150  002FB6  0100               	movlb	0	; () banked
  5151  002FB8  6162               	cpfslt	isdigit@c& (0+255),b
  5152  002FBA  D007               	goto	l2901
  5153                           
  5154                           ; BSR set to: 0
  5155  002FBC  0E2F               	movlw	47
  5156  002FBE  0100               	movlb	0	; () banked
  5157  002FC0  6562               	cpfsgt	isdigit@c& (0+255),b
  5158  002FC2  D003               	goto	l2901
  5159                           
  5160                           ; BSR set to: 0
  5161  002FC4  0E01               	movlw	1
  5162  002FC6  0100               	movlb	0	; () banked
  5163  002FC8  6F61               	movwf	_isdigit$826& (0+255),b
  5164  002FCA                     l2901:
  5165                           
  5166                           ; BSR set to: 0
  5167  002FCA  C061  F060         	movff	_isdigit$826,??_isdigit
  5168  002FCE  0100               	movlb	0	; () banked
  5169  002FD0  3160               	rrcf	??_isdigit& (0+255),w,b
  5170  002FD2  0012               	return	
  5171  002FD4                     __end_of_isdigit:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon2	equ	0xFF1
  5180                           postinc0	equ	0xFEE
  5181                           wreg	equ	0xFE8
  5182                           postdec1	equ	0xFE5
  5183                           plusw1	equ	0xFE3
  5184                           fsr1l	equ	0xFE1
  5185                           indf2	equ	0xFDF
  5186                           postinc2	equ	0xFDE
  5187                           postdec2	equ	0xFDD
  5188                           plusw2	equ	0xFDB
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _fround *****************
  5194 ;; Defined at:
  5195 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  prec            1    wreg     unsigned char 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  prec            1   44[BANK0 ] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  3   35[BANK0 ] unsigned char 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5209 ;;      Params:         0       3       0       0       0       0       0       0       0
  5210 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5212 ;;      Totals:         0      10       0       0       0       0       0       0       0
  5213 ;;Total ram usage:       10 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    5
  5216 ;; This function calls:
  5217 ;;		___awdiv
  5218 ;;		___awmod
  5219 ;;		___ftmul
  5220 ;;		___wmul
  5221 ;; This function is called by:
  5222 ;;		_sprintf
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text5
  5227  0015CE                     __ptext5:
  5228                           	opt stack 0
  5229  0015CE                     _fround:
  5230                           	opt stack 24
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;incstack = 0
  5234                           ;fround@prec stored from wreg
  5235  0015CE  0100               	movlb	0	; () banked
  5236  0015D0  6F8C               	movwf	fround@prec& (0+255),b
  5237                           
  5238                           ;doprnt.c: 413: if(prec>=110)
  5239  0015D2  0E6D               	movlw	109
  5240  0015D4  0100               	movlb	0	; () banked
  5241  0015D6  658C               	cpfsgt	fround@prec& (0+255),b
  5242  0015D8  D0BA               	goto	l2843
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5246  0015DA  0E00               	movlw	0
  5247  0015DC  0100               	movlb	0	; () banked
  5248  0015DE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5249  0015E0  0E03               	movlw	3
  5250  0015E2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5251  0015E4  0E00               	movlw	0
  5252  0015E6  0100               	movlb	0	; () banked
  5253  0015E8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5254  0015EA  0E0A               	movlw	10
  5255  0015EC  6F68               	movwf	___awdiv@divisor& (0+255),b
  5256  0015EE  0E00               	movlw	0
  5257  0015F0  0100               	movlb	0	; () banked
  5258  0015F2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5259  0015F4  0E64               	movlw	100
  5260  0015F6  6F62               	movwf	___awmod@divisor& (0+255),b
  5261  0015F8  C08C  F060         	movff	fround@prec,___awmod@dividend
  5262  0015FC  0100               	movlb	0	; () banked
  5263  0015FE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5264  001600  EC47  F015         	call	___awmod	;wreg free
  5265  001604  C060  F066         	movff	?___awmod,___awdiv@dividend
  5266  001608  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  5267  00160C  EC33  F014         	call	___awdiv	;wreg free
  5268  001610  0E09               	movlw	9
  5269  001612  0100               	movlb	0	; () banked
  5270  001614  2566               	addwf	?___awdiv& (0+255),w,b
  5271  001616  0100               	movlb	0	; () banked
  5272  001618  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5273  00161A  0E00               	movlw	0
  5274  00161C  0100               	movlb	0	; () banked
  5275  00161E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5276  001620  0100               	movlb	0	; () banked
  5277  001622  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5278  001624  EC6F  F017         	call	___wmul	;wreg free
  5279  001628  0E3F               	movlw	low __npowers_
  5280  00162A  0100               	movlb	0	; () banked
  5281  00162C  256E               	addwf	?___wmul& (0+255),w,b
  5282  00162E  6EF6               	movwf	tblptrl,c
  5283  001630  0E7E               	movlw	high __npowers_
  5284  001632  0100               	movlb	0	; () banked
  5285  001634  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5286  001636  6EF7               	movwf	tblptrh,c
  5287  001638                     	if	0	;There are less than 3 active tblptr bytes
  5288  001638                     	endif
  5289  001638  0009               	tblrd		*+
  5290  00163A  CFF5 F077          	movff	tablat,___ftmul@f2
  5291  00163E  0009               	tblrd		*+
  5292  001640  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5293  001644  000A               	tblrd		*-
  5294  001646  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5295  00164A  0E00               	movlw	0
  5296  00164C  0100               	movlb	0	; () banked
  5297  00164E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5298  001650  0E64               	movlw	100
  5299  001652  6F68               	movwf	___awdiv@divisor& (0+255),b
  5300  001654  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5301  001658  0100               	movlb	0	; () banked
  5302  00165A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5303  00165C  EC33  F014         	call	___awdiv	;wreg free
  5304  001660  0E12               	movlw	18
  5305  001662  0100               	movlb	0	; () banked
  5306  001664  2566               	addwf	?___awdiv& (0+255),w,b
  5307  001666  0100               	movlb	0	; () banked
  5308  001668  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5309  00166A  0E00               	movlw	0
  5310  00166C  0100               	movlb	0	; () banked
  5311  00166E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5312  001670  0100               	movlb	0	; () banked
  5313  001672  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5314  001674  0E00               	movlw	0
  5315  001676  0100               	movlb	0	; () banked
  5316  001678  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5317  00167A  0E03               	movlw	3
  5318  00167C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5319  00167E  EC6F  F017         	call	___wmul	;wreg free
  5320  001682  0E3F               	movlw	low __npowers_
  5321  001684  0100               	movlb	0	; () banked
  5322  001686  256E               	addwf	?___wmul& (0+255),w,b
  5323  001688  6EF6               	movwf	tblptrl,c
  5324  00168A  0E7E               	movlw	high __npowers_
  5325  00168C  0100               	movlb	0	; () banked
  5326  00168E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5327  001690  6EF7               	movwf	tblptrh,c
  5328  001692                     	if	0	;There are less than 3 active tblptr bytes
  5329  001692                     	endif
  5330  001692  0009               	tblrd		*+
  5331  001694  CFF5 F074          	movff	tablat,___ftmul@f1
  5332  001698  0009               	tblrd		*+
  5333  00169A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5334  00169E  000A               	tblrd		*-
  5335  0016A0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5336  0016A4  ECDA  F00F         	call	___ftmul	;wreg free
  5337  0016A8  C074  F089         	movff	?___ftmul,_fround$1156
  5338  0016AC  C075  F08A         	movff	?___ftmul+1,_fround$1156+1
  5339  0016B0  C076  F08B         	movff	?___ftmul+2,_fround$1156+2
  5340                           
  5341                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5342  0016B4  0E00               	movlw	0
  5343  0016B6  0100               	movlb	0	; () banked
  5344  0016B8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5345  0016BA  0E03               	movlw	3
  5346  0016BC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5347  0016BE  0E00               	movlw	0
  5348  0016C0  0100               	movlb	0	; () banked
  5349  0016C2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5350  0016C4  0E0A               	movlw	10
  5351  0016C6  6F62               	movwf	___awmod@divisor& (0+255),b
  5352  0016C8  C08C  F060         	movff	fround@prec,___awmod@dividend
  5353  0016CC  0100               	movlb	0	; () banked
  5354  0016CE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5355  0016D0  EC47  F015         	call	___awmod	;wreg free
  5356  0016D4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5357  0016D8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5358  0016DC  EC6F  F017         	call	___wmul	;wreg free
  5359  0016E0  0E3F               	movlw	low __npowers_
  5360  0016E2  0100               	movlb	0	; () banked
  5361  0016E4  256E               	addwf	?___wmul& (0+255),w,b
  5362  0016E6  6EF6               	movwf	tblptrl,c
  5363  0016E8  0E7E               	movlw	high __npowers_
  5364  0016EA  0100               	movlb	0	; () banked
  5365  0016EC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5366  0016EE  6EF7               	movwf	tblptrh,c
  5367  0016F0                     	if	0	;There are less than 3 active tblptr bytes
  5368  0016F0                     	endif
  5369  0016F0  0009               	tblrd		*+
  5370  0016F2  CFF5 F077          	movff	tablat,___ftmul@f2
  5371  0016F6  0009               	tblrd		*+
  5372  0016F8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5373  0016FC  000A               	tblrd		*-
  5374  0016FE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5375  001702  C089  F074         	movff	_fround$1156,___ftmul@f1
  5376  001706  C08A  F075         	movff	_fround$1156+1,___ftmul@f1+1
  5377  00170A  C08B  F076         	movff	_fround$1156+2,___ftmul@f1+2
  5378  00170E  ECDA  F00F         	call	___ftmul	;wreg free
  5379  001712  C074  F086         	movff	?___ftmul,_fround$1157
  5380  001716  C075  F087         	movff	?___ftmul+1,_fround$1157+1
  5381  00171A  C076  F088         	movff	?___ftmul+2,_fround$1157+2
  5382                           
  5383                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5384  00171E  C086  F074         	movff	_fround$1157,___ftmul@f1
  5385  001722  C087  F075         	movff	_fround$1157+1,___ftmul@f1+1
  5386  001726  C088  F076         	movff	_fround$1157+2,___ftmul@f1+2
  5387  00172A  0E00               	movlw	0
  5388  00172C  0100               	movlb	0	; () banked
  5389  00172E  6F77               	movwf	___ftmul@f2& (0+255),b
  5390  001730  0E00               	movlw	0
  5391  001732  0100               	movlb	0	; () banked
  5392  001734  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5393  001736  0E3F               	movlw	63
  5394  001738  0100               	movlb	0	; () banked
  5395  00173A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5396  00173C  ECDA  F00F         	call	___ftmul	;wreg free
  5397  001740  C074  F083         	movff	?___ftmul,?_fround
  5398  001744  C075  F084         	movff	?___ftmul+1,?_fround+1
  5399  001748  C076  F085         	movff	?___ftmul+2,?_fround+2
  5400  00174C  0012               	return	
  5401  00174E                     l2843:
  5402                           
  5403                           ;doprnt.c: 415: else if(prec > 10)
  5404  00174E  0E0A               	movlw	10
  5405  001750  0100               	movlb	0	; () banked
  5406  001752  658C               	cpfsgt	fround@prec& (0+255),b
  5407  001754  D06E               	goto	l2851
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5411  001756  0E00               	movlw	0
  5412  001758  0100               	movlb	0	; () banked
  5413  00175A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5414  00175C  0E03               	movlw	3
  5415  00175E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5416  001760  0E00               	movlw	0
  5417  001762  0100               	movlb	0	; () banked
  5418  001764  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5419  001766  0E0A               	movlw	10
  5420  001768  6F62               	movwf	___awmod@divisor& (0+255),b
  5421  00176A  C08C  F060         	movff	fround@prec,___awmod@dividend
  5422  00176E  0100               	movlb	0	; () banked
  5423  001770  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5424  001772  EC47  F015         	call	___awmod	;wreg free
  5425  001776  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5426  00177A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5427  00177E  EC6F  F017         	call	___wmul	;wreg free
  5428  001782  0E3F               	movlw	low __npowers_
  5429  001784  0100               	movlb	0	; () banked
  5430  001786  256E               	addwf	?___wmul& (0+255),w,b
  5431  001788  6EF6               	movwf	tblptrl,c
  5432  00178A  0E7E               	movlw	high __npowers_
  5433  00178C  0100               	movlb	0	; () banked
  5434  00178E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5435  001790  6EF7               	movwf	tblptrh,c
  5436  001792                     	if	0	;There are less than 3 active tblptr bytes
  5437  001792                     	endif
  5438  001792  0009               	tblrd		*+
  5439  001794  CFF5 F077          	movff	tablat,___ftmul@f2
  5440  001798  0009               	tblrd		*+
  5441  00179A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5442  00179E  000A               	tblrd		*-
  5443  0017A0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5444  0017A4  0E00               	movlw	0
  5445  0017A6  0100               	movlb	0	; () banked
  5446  0017A8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5447  0017AA  0E0A               	movlw	10
  5448  0017AC  6F68               	movwf	___awdiv@divisor& (0+255),b
  5449  0017AE  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5450  0017B2  0100               	movlb	0	; () banked
  5451  0017B4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5452  0017B6  EC33  F014         	call	___awdiv	;wreg free
  5453  0017BA  0E09               	movlw	9
  5454  0017BC  0100               	movlb	0	; () banked
  5455  0017BE  2566               	addwf	?___awdiv& (0+255),w,b
  5456  0017C0  0100               	movlb	0	; () banked
  5457  0017C2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5458  0017C4  0E00               	movlw	0
  5459  0017C6  0100               	movlb	0	; () banked
  5460  0017C8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5461  0017CA  0100               	movlb	0	; () banked
  5462  0017CC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5463  0017CE  0E00               	movlw	0
  5464  0017D0  0100               	movlb	0	; () banked
  5465  0017D2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5466  0017D4  0E03               	movlw	3
  5467  0017D6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5468  0017D8  EC6F  F017         	call	___wmul	;wreg free
  5469  0017DC  0E3F               	movlw	low __npowers_
  5470  0017DE  0100               	movlb	0	; () banked
  5471  0017E0  256E               	addwf	?___wmul& (0+255),w,b
  5472  0017E2  6EF6               	movwf	tblptrl,c
  5473  0017E4  0E7E               	movlw	high __npowers_
  5474  0017E6  0100               	movlb	0	; () banked
  5475  0017E8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5476  0017EA  6EF7               	movwf	tblptrh,c
  5477  0017EC                     	if	0	;There are less than 3 active tblptr bytes
  5478  0017EC                     	endif
  5479  0017EC  0009               	tblrd		*+
  5480  0017EE  CFF5 F074          	movff	tablat,___ftmul@f1
  5481  0017F2  0009               	tblrd		*+
  5482  0017F4  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5483  0017F8  000A               	tblrd		*-
  5484  0017FA  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5485  0017FE  ECDA  F00F         	call	___ftmul	;wreg free
  5486  001802  C074  F089         	movff	?___ftmul,_fround$1156
  5487  001806  C075  F08A         	movff	?___ftmul+1,_fround$1156+1
  5488  00180A  C076  F08B         	movff	?___ftmul+2,_fround$1156+2
  5489                           
  5490                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5491  00180E  C089  F074         	movff	_fround$1156,___ftmul@f1
  5492  001812  C08A  F075         	movff	_fround$1156+1,___ftmul@f1+1
  5493  001816  C08B  F076         	movff	_fround$1156+2,___ftmul@f1+2
  5494  00181A  0E00               	movlw	0
  5495  00181C  0100               	movlb	0	; () banked
  5496  00181E  6F77               	movwf	___ftmul@f2& (0+255),b
  5497  001820  0E00               	movlw	0
  5498  001822  0100               	movlb	0	; () banked
  5499  001824  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5500  001826  0E3F               	movlw	63
  5501  001828  0100               	movlb	0	; () banked
  5502  00182A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5503  00182C  ECDA  F00F         	call	___ftmul	;wreg free
  5504  001830  D787               	goto	L5
  5505  001832                     l2851:
  5506                           
  5507                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5508  001832  0100               	movlb	0	; () banked
  5509  001834  518C               	movf	fround@prec& (0+255),w,b
  5510  001836  0D03               	mullw	3
  5511  001838  0E3F               	movlw	low __npowers_
  5512  00183A  24F3               	addwf	prodl,w,c
  5513  00183C  6EF6               	movwf	tblptrl,c
  5514  00183E  0E7E               	movlw	high __npowers_
  5515  001840  20F4               	addwfc	prodh,w,c
  5516  001842  6EF7               	movwf	tblptrh,c
  5517  001844                     	if	0	;There are less than 3 active tblptr bytes
  5518  001844                     	endif
  5519  001844  0009               	tblrd		*+
  5520  001846  CFF5 F074          	movff	tablat,___ftmul@f1
  5521  00184A  0009               	tblrd		*+
  5522  00184C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5523  001850  000A               	tblrd		*-
  5524  001852  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5525  001856  0E00               	movlw	0
  5526  001858  0100               	movlb	0	; () banked
  5527  00185A  6F77               	movwf	___ftmul@f2& (0+255),b
  5528  00185C  0E00               	movlw	0
  5529  00185E  0100               	movlb	0	; () banked
  5530  001860  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5531  001862  0E3F               	movlw	63
  5532  001864  0100               	movlb	0	; () banked
  5533  001866  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5534  001868  ECDA  F00F         	call	___ftmul	;wreg free
  5535  00186C  C074  F083         	movff	?___ftmul,?_fround
  5536  001870  C075  F084         	movff	?___ftmul+1,?_fround+1
  5537  001874  C076  F085         	movff	?___ftmul+2,?_fround+2
  5538  001878  0012               	return	
  5539  00187A                     __end_of_fround:
  5540                           	opt stack 0
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon2	equ	0xFF1
  5548                           postinc0	equ	0xFEE
  5549                           wreg	equ	0xFE8
  5550                           postdec1	equ	0xFE5
  5551                           plusw1	equ	0xFE3
  5552                           fsr1l	equ	0xFE1
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           plusw2	equ	0xFDB
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function ___wmul *****************
  5562 ;; Defined at:
  5563 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  multiplier      2   14[BANK0 ] unsigned int 
  5566 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  product         2   18[BANK0 ] unsigned int 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2   14[BANK0 ] unsigned int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0, prodl, prodh
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5578 ;;      Params:         0       4       0       0       0       0       0       0       0
  5579 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5581 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    3
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_fround
  5589 ;;		_scale
  5590 ;;		_sprintf
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text6
  5595  002EDE                     __ptext6:
  5596                           	opt stack 0
  5597  002EDE                     ___wmul:
  5598                           	opt stack 25
  5599                           
  5600                           ;incstack = 0
  5601  002EDE  0100               	movlb	0	; () banked
  5602  002EE0  516E               	movf	___wmul@multiplier& (0+255),w,b
  5603  002EE2  0100               	movlb	0	; () banked
  5604  002EE4  0370               	mulwf	___wmul@multiplicand& (0+255),b
  5605  002EE6  CFF3 F072          	movff	prodl,___wmul@product
  5606  002EEA  CFF4 F073          	movff	prodh,___wmul@product+1
  5607  002EEE  0100               	movlb	0	; () banked
  5608  002EF0  516E               	movf	___wmul@multiplier& (0+255),w,b
  5609  002EF2  0100               	movlb	0	; () banked
  5610  002EF4  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5611  002EF6  50F3               	movf	prodl,w,c
  5612  002EF8  0100               	movlb	0	; () banked
  5613  002EFA  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  5614  002EFC  0100               	movlb	0	; () banked
  5615  002EFE  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5616  002F00  0100               	movlb	0	; () banked
  5617  002F02  0370               	mulwf	___wmul@multiplicand& (0+255),b
  5618  002F04  50F3               	movf	prodl,w,c
  5619  002F06  0100               	movlb	0	; () banked
  5620  002F08  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  5621                           
  5622                           ; BSR set to: 0
  5623  002F0A  C072  F06E         	movff	___wmul@product,?___wmul
  5624  002F0E  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  5625  002F12  0012               	return	
  5626  002F14                     __end_of___wmul:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           intcon2	equ	0xFF1
  5635                           postinc0	equ	0xFEE
  5636                           wreg	equ	0xFE8
  5637                           postdec1	equ	0xFE5
  5638                           plusw1	equ	0xFE3
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           plusw2	equ	0xFDB
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function ___ftmul *****************
  5649 ;; Defined at:
  5650 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  f1              3   20[BANK0 ] float 
  5653 ;;  f2              3   23[BANK0 ] float 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  5656 ;;  sign            1   34[BANK0 ] unsigned char 
  5657 ;;  cntr            1   33[BANK0 ] unsigned char 
  5658 ;;  exp             1   29[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  3   20[BANK0 ] float 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5668 ;;      Params:         0       6       0       0       0       0       0       0       0
  5669 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5670 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5671 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5672 ;;Total ram usage:       15 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    4
  5675 ;; This function calls:
  5676 ;;		___ftpack
  5677 ;; This function is called by:
  5678 ;;		_fround
  5679 ;;		_scale
  5680 ;;		_sprintf
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text7
  5685  001FB4                     __ptext7:
  5686                           	opt stack 0
  5687  001FB4                     ___ftmul:
  5688                           	opt stack 24
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;incstack = 0
  5692  001FB4  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  5693  001FB8  0100               	movlb	0	; () banked
  5694  001FBA  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5695  001FBC  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5696  001FBE  0100               	movlb	0	; () banked
  5697  001FC0  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5698  001FC2  0100               	movlb	0	; () banked
  5699  001FC4  377A               	rlcf	??___ftmul& (0+255),f,b
  5700  001FC6  E301               	bnc	u2631
  5701  001FC8  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5702  001FCA                     u2631:
  5703  001FCA  0100               	movlb	0	; () banked
  5704  001FCC  517A               	movf	??___ftmul& (0+255),w,b
  5705  001FCE  0100               	movlb	0	; () banked
  5706  001FD0  6F7D               	movwf	___ftmul@exp& (0+255),b
  5707  001FD2  0100               	movlb	0	; () banked
  5708  001FD4  517D               	movf	___ftmul@exp& (0+255),w,b
  5709  001FD6  A4D8               	btfss	status,2,c
  5710  001FD8  D00A               	goto	l2671
  5711                           
  5712                           ; BSR set to: 0
  5713  001FDA  0E00               	movlw	0
  5714  001FDC  0100               	movlb	0	; () banked
  5715  001FDE  6F74               	movwf	?___ftmul& (0+255),b
  5716  001FE0  0E00               	movlw	0
  5717  001FE2  0100               	movlb	0	; () banked
  5718  001FE4  6F75               	movwf	(?___ftmul+1)& (0+255),b
  5719  001FE6  0E00               	movlw	0
  5720  001FE8  0100               	movlb	0	; () banked
  5721  001FEA  6F76               	movwf	(?___ftmul+2)& (0+255),b
  5722                           
  5723                           ; BSR set to: 0
  5724  001FEC  0012               	return	
  5725  001FEE                     l2671:
  5726                           
  5727                           ; BSR set to: 0
  5728  001FEE  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  5729  001FF2  0100               	movlb	0	; () banked
  5730  001FF4  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5731  001FF6  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5732  001FF8  0100               	movlb	0	; () banked
  5733  001FFA  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5734  001FFC  0100               	movlb	0	; () banked
  5735  001FFE  377A               	rlcf	??___ftmul& (0+255),f,b
  5736  002000  E301               	bnc	u2651
  5737  002002  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5738  002004                     u2651:
  5739  002004  0100               	movlb	0	; () banked
  5740  002006  517A               	movf	??___ftmul& (0+255),w,b
  5741  002008  0100               	movlb	0	; () banked
  5742  00200A  6F82               	movwf	___ftmul@sign& (0+255),b
  5743  00200C  0100               	movlb	0	; () banked
  5744  00200E  5182               	movf	___ftmul@sign& (0+255),w,b
  5745  002010  A4D8               	btfss	status,2,c
  5746  002012  D00A               	goto	l2677
  5747                           
  5748                           ; BSR set to: 0
  5749  002014  0E00               	movlw	0
  5750  002016  0100               	movlb	0	; () banked
  5751  002018  6F74               	movwf	?___ftmul& (0+255),b
  5752  00201A  0E00               	movlw	0
  5753  00201C  0100               	movlb	0	; () banked
  5754  00201E  6F75               	movwf	(?___ftmul+1)& (0+255),b
  5755  002020  0E00               	movlw	0
  5756  002022  0100               	movlb	0	; () banked
  5757  002024  6F76               	movwf	(?___ftmul+2)& (0+255),b
  5758                           
  5759                           ; BSR set to: 0
  5760  002026  0012               	return	
  5761  002028                     l2677:
  5762                           
  5763                           ; BSR set to: 0
  5764  002028  0100               	movlb	0	; () banked
  5765  00202A  5182               	movf	___ftmul@sign& (0+255),w,b
  5766  00202C  0F7B               	addlw	123
  5767  00202E  0100               	movlb	0	; () banked
  5768  002030  277D               	addwf	___ftmul@exp& (0+255),f,b
  5769                           
  5770                           ; BSR set to: 0
  5771  002032  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  5772  002036  0100               	movlb	0	; () banked
  5773  002038  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5774  00203A  0100               	movlb	0	; () banked
  5775  00203C  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  5776  00203E  0E80               	movlw	128
  5777  002040  0100               	movlb	0	; () banked
  5778  002042  1782               	andwf	___ftmul@sign& (0+255),f,b
  5779                           
  5780                           ; BSR set to: 0
  5781  002044  0100               	movlb	0	; () banked
  5782  002046  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5783                           
  5784                           ; BSR set to: 0
  5785  002048  0100               	movlb	0	; () banked
  5786  00204A  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5787                           
  5788                           ; BSR set to: 0
  5789  00204C  0EFF               	movlw	255
  5790  00204E  0100               	movlb	0	; () banked
  5791  002050  1777               	andwf	___ftmul@f2& (0+255),f,b
  5792  002052  0EFF               	movlw	255
  5793  002054  0100               	movlb	0	; () banked
  5794  002056  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5795  002058  0E00               	movlw	0
  5796  00205A  0100               	movlb	0	; () banked
  5797  00205C  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5798                           
  5799                           ; BSR set to: 0
  5800  00205E  0E00               	movlw	0
  5801  002060  0100               	movlb	0	; () banked
  5802  002062  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  5803  002064  0E00               	movlw	0
  5804  002066  0100               	movlb	0	; () banked
  5805  002068  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5806  00206A  0E00               	movlw	0
  5807  00206C  0100               	movlb	0	; () banked
  5808  00206E  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5809                           
  5810                           ; BSR set to: 0
  5811  002070  0E07               	movlw	7
  5812  002072  0100               	movlb	0	; () banked
  5813  002074  6F81               	movwf	___ftmul@cntr& (0+255),b
  5814  002076                     l2691:
  5815                           
  5816                           ; BSR set to: 0
  5817  002076  0100               	movlb	0	; () banked
  5818  002078  A174               	btfss	___ftmul@f1& (0+255),0,b
  5819  00207A  D00C               	goto	l2695
  5820                           
  5821                           ; BSR set to: 0
  5822  00207C  0100               	movlb	0	; () banked
  5823  00207E  5177               	movf	___ftmul@f2& (0+255),w,b
  5824  002080  0100               	movlb	0	; () banked
  5825  002082  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5826  002084  0100               	movlb	0	; () banked
  5827  002086  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5828  002088  0100               	movlb	0	; () banked
  5829  00208A  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5830  00208C  0100               	movlb	0	; () banked
  5831  00208E  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5832  002090  0100               	movlb	0	; () banked
  5833  002092  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5834  002094                     l2695:
  5835                           
  5836                           ; BSR set to: 0
  5837  002094  0100               	movlb	0	; () banked
  5838  002096  90D8               	bcf	status,0,c
  5839  002098  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5840  00209A  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5841  00209C  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5842  00209E  0100               	movlb	0	; () banked
  5843  0020A0  90D8               	bcf	status,0,c
  5844  0020A2  3777               	rlcf	___ftmul@f2& (0+255),f,b
  5845  0020A4  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5846  0020A6  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5847                           
  5848                           ; BSR set to: 0
  5849  0020A8  0100               	movlb	0	; () banked
  5850  0020AA  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5851  0020AC  D7E4               	goto	l2691
  5852                           
  5853                           ; BSR set to: 0
  5854                           
  5855                           ; BSR set to: 0
  5856  0020AE  0E09               	movlw	9
  5857  0020B0  0100               	movlb	0	; () banked
  5858  0020B2  6F81               	movwf	___ftmul@cntr& (0+255),b
  5859  0020B4                     l2701:
  5860                           
  5861                           ; BSR set to: 0
  5862  0020B4  0100               	movlb	0	; () banked
  5863  0020B6  A174               	btfss	___ftmul@f1& (0+255),0,b
  5864  0020B8  D00C               	goto	l2705
  5865                           
  5866                           ; BSR set to: 0
  5867  0020BA  0100               	movlb	0	; () banked
  5868  0020BC  5177               	movf	___ftmul@f2& (0+255),w,b
  5869  0020BE  0100               	movlb	0	; () banked
  5870  0020C0  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5871  0020C2  0100               	movlb	0	; () banked
  5872  0020C4  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5873  0020C6  0100               	movlb	0	; () banked
  5874  0020C8  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5875  0020CA  0100               	movlb	0	; () banked
  5876  0020CC  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5877  0020CE  0100               	movlb	0	; () banked
  5878  0020D0  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5879  0020D2                     l2705:
  5880                           
  5881                           ; BSR set to: 0
  5882  0020D2  0100               	movlb	0	; () banked
  5883  0020D4  90D8               	bcf	status,0,c
  5884  0020D6  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5885  0020D8  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5886  0020DA  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5887  0020DC  0100               	movlb	0	; () banked
  5888  0020DE  90D8               	bcf	status,0,c
  5889  0020E0  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5890  0020E2  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5891  0020E4  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5892                           
  5893                           ; BSR set to: 0
  5894  0020E6  0100               	movlb	0	; () banked
  5895  0020E8  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5896  0020EA  D7E4               	goto	l2701
  5897                           
  5898                           ; BSR set to: 0
  5899                           
  5900                           ; BSR set to: 0
  5901  0020EC  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  5902  0020F0  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5903  0020F4  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5904  0020F8  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  5905  0020FC  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  5906  002100  EC5C  F012         	call	___ftpack	;wreg free
  5907  002104  C060  F074         	movff	?___ftpack,?___ftmul
  5908  002108  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  5909  00210C  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  5910  002110  0012               	return	
  5911  002112                     __end_of___ftmul:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon2	equ	0xFF1
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           plusw1	equ	0xFE3
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           postdec2	equ	0xFDD
  5928                           plusw2	equ	0xFDB
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function ___awmod *****************
  5934 ;; Defined at:
  5935 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  dividend        2    0[BANK0 ] int 
  5938 ;;  divisor         2    2[BANK0 ] int 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  sign            1    5[BANK0 ] unsigned char 
  5941 ;;  counter         1    4[BANK0 ] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2    0[BANK0 ] int 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5951 ;;      Params:         0       4       0       0       0       0       0       0       0
  5952 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5954 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5955 ;;Total ram usage:        6 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    3
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_fround
  5962 ;;		_scale
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text8
  5967  002A8E                     __ptext8:
  5968                           	opt stack 0
  5969  002A8E                     ___awmod:
  5970                           	opt stack 25
  5971                           
  5972                           ;incstack = 0
  5973  002A8E  0E00               	movlw	0
  5974  002A90  0100               	movlb	0	; () banked
  5975  002A92  6F65               	movwf	___awmod@sign& (0+255),b
  5976                           
  5977                           ; BSR set to: 0
  5978  002A94  0100               	movlb	0	; () banked
  5979  002A96  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5980  002A98  D008               	goto	l2765
  5981                           
  5982                           ; BSR set to: 0
  5983  002A9A  0100               	movlb	0	; () banked
  5984  002A9C  6D60               	negf	___awmod@dividend& (0+255),b
  5985  002A9E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5986  002AA0  B0D8               	btfsc	status,0,c
  5987  002AA2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5988                           
  5989                           ; BSR set to: 0
  5990  002AA4  0E01               	movlw	1
  5991  002AA6  0100               	movlb	0	; () banked
  5992  002AA8  6F65               	movwf	___awmod@sign& (0+255),b
  5993  002AAA                     l2765:
  5994                           
  5995                           ; BSR set to: 0
  5996  002AAA  0100               	movlb	0	; () banked
  5997  002AAC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5998  002AAE  D005               	goto	l2769
  5999                           
  6000                           ; BSR set to: 0
  6001  002AB0  0100               	movlb	0	; () banked
  6002  002AB2  6D62               	negf	___awmod@divisor& (0+255),b
  6003  002AB4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  6004  002AB6  B0D8               	btfsc	status,0,c
  6005  002AB8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  6006  002ABA                     l2769:
  6007                           
  6008                           ; BSR set to: 0
  6009  002ABA  0100               	movlb	0	; () banked
  6010  002ABC  5162               	movf	___awmod@divisor& (0+255),w,b
  6011  002ABE  0100               	movlb	0	; () banked
  6012  002AC0  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6013  002AC2  B4D8               	btfsc	status,2,c
  6014  002AC4  D026               	goto	l2785
  6015                           
  6016                           ; BSR set to: 0
  6017  002AC6  0E01               	movlw	1
  6018  002AC8  0100               	movlb	0	; () banked
  6019  002ACA  6F64               	movwf	___awmod@counter& (0+255),b
  6020  002ACC  D006               	goto	l2775
  6021  002ACE                     l2773:
  6022                           
  6023                           ; BSR set to: 0
  6024  002ACE  0100               	movlb	0	; () banked
  6025  002AD0  90D8               	bcf	status,0,c
  6026  002AD2  3762               	rlcf	___awmod@divisor& (0+255),f,b
  6027  002AD4  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6028  002AD6  0100               	movlb	0	; () banked
  6029  002AD8  2B64               	incf	___awmod@counter& (0+255),f,b
  6030  002ADA                     l2775:
  6031                           
  6032                           ; BSR set to: 0
  6033  002ADA  0100               	movlb	0	; () banked
  6034  002ADC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6035  002ADE  D7F7               	goto	l2773
  6036  002AE0                     l2777:
  6037                           
  6038                           ; BSR set to: 0
  6039  002AE0  0100               	movlb	0	; () banked
  6040  002AE2  5162               	movf	___awmod@divisor& (0+255),w,b
  6041  002AE4  0100               	movlb	0	; () banked
  6042  002AE6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  6043  002AE8  0100               	movlb	0	; () banked
  6044  002AEA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6045  002AEC  0100               	movlb	0	; () banked
  6046  002AEE  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6047  002AF0  A0D8               	btfss	status,0,c
  6048  002AF2  D008               	goto	l2781
  6049                           
  6050                           ; BSR set to: 0
  6051  002AF4  0100               	movlb	0	; () banked
  6052  002AF6  5162               	movf	___awmod@divisor& (0+255),w,b
  6053  002AF8  0100               	movlb	0	; () banked
  6054  002AFA  5F60               	subwf	___awmod@dividend& (0+255),f,b
  6055  002AFC  0100               	movlb	0	; () banked
  6056  002AFE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6057  002B00  0100               	movlb	0	; () banked
  6058  002B02  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6059  002B04                     l2781:
  6060                           
  6061                           ; BSR set to: 0
  6062  002B04  0100               	movlb	0	; () banked
  6063  002B06  90D8               	bcf	status,0,c
  6064  002B08  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6065  002B0A  3362               	rrcf	___awmod@divisor& (0+255),f,b
  6066                           
  6067                           ; BSR set to: 0
  6068  002B0C  0100               	movlb	0	; () banked
  6069  002B0E  2F64               	decfsz	___awmod@counter& (0+255),f,b
  6070  002B10  D7E7               	goto	l2777
  6071  002B12                     l2785:
  6072                           
  6073                           ; BSR set to: 0
  6074  002B12  0100               	movlb	0	; () banked
  6075  002B14  5165               	movf	___awmod@sign& (0+255),w,b
  6076  002B16  0100               	movlb	0	; () banked
  6077  002B18  B4D8               	btfsc	status,2,c
  6078  002B1A  D005               	goto	l2789
  6079                           
  6080                           ; BSR set to: 0
  6081  002B1C  0100               	movlb	0	; () banked
  6082  002B1E  6D60               	negf	___awmod@dividend& (0+255),b
  6083  002B20  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  6084  002B22  B0D8               	btfsc	status,0,c
  6085  002B24  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  6086  002B26                     l2789:
  6087                           
  6088                           ; BSR set to: 0
  6089  002B26  C060  F060         	movff	___awmod@dividend,?___awmod
  6090  002B2A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  6091  002B2E  0012               	return	
  6092  002B30                     __end_of___awmod:
  6093                           	opt stack 0
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon2	equ	0xFF1
  6101                           postinc0	equ	0xFEE
  6102                           wreg	equ	0xFE8
  6103                           postdec1	equ	0xFE5
  6104                           plusw1	equ	0xFE3
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           plusw2	equ	0xFDB
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           
  6114 ;; *************** function ___awdiv *****************
  6115 ;; Defined at:
  6116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  dividend        2    6[BANK0 ] int 
  6119 ;;  divisor         2    8[BANK0 ] int 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  quotient        2   12[BANK0 ] int 
  6122 ;;  sign            1   11[BANK0 ] unsigned char 
  6123 ;;  counter         1   10[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  2    6[BANK0 ] int 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6133 ;;      Params:         0       4       0       0       0       0       0       0       0
  6134 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6136 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6137 ;;Total ram usage:        8 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    3
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_fround
  6144 ;;		_scale
  6145 ;;		_sprintf
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text9
  6150  002866                     __ptext9:
  6151                           	opt stack 0
  6152  002866                     ___awdiv:
  6153                           	opt stack 25
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;incstack = 0
  6157  002866  0E00               	movlw	0
  6158  002868  0100               	movlb	0	; () banked
  6159  00286A  6F6B               	movwf	___awdiv@sign& (0+255),b
  6160                           
  6161                           ; BSR set to: 0
  6162  00286C  0100               	movlb	0	; () banked
  6163  00286E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6164  002870  D008               	goto	l2721
  6165                           
  6166                           ; BSR set to: 0
  6167  002872  0100               	movlb	0	; () banked
  6168  002874  6D68               	negf	___awdiv@divisor& (0+255),b
  6169  002876  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6170  002878  B0D8               	btfsc	status,0,c
  6171  00287A  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6172                           
  6173                           ; BSR set to: 0
  6174  00287C  0E01               	movlw	1
  6175  00287E  0100               	movlb	0	; () banked
  6176  002880  6F6B               	movwf	___awdiv@sign& (0+255),b
  6177  002882                     l2721:
  6178                           
  6179                           ; BSR set to: 0
  6180  002882  0100               	movlb	0	; () banked
  6181  002884  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6182  002886  D008               	goto	l2727
  6183                           
  6184                           ; BSR set to: 0
  6185  002888  0100               	movlb	0	; () banked
  6186  00288A  6D66               	negf	___awdiv@dividend& (0+255),b
  6187  00288C  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6188  00288E  B0D8               	btfsc	status,0,c
  6189  002890  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6190                           
  6191                           ; BSR set to: 0
  6192  002892  0E01               	movlw	1
  6193  002894  0100               	movlb	0	; () banked
  6194  002896  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  6195  002898                     l2727:
  6196                           
  6197                           ; BSR set to: 0
  6198  002898  0E00               	movlw	0
  6199  00289A  0100               	movlb	0	; () banked
  6200  00289C  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6201  00289E  0E00               	movlw	0
  6202  0028A0  6F6C               	movwf	___awdiv@quotient& (0+255),b
  6203                           
  6204                           ; BSR set to: 0
  6205  0028A2  0100               	movlb	0	; () banked
  6206  0028A4  5168               	movf	___awdiv@divisor& (0+255),w,b
  6207  0028A6  0100               	movlb	0	; () banked
  6208  0028A8  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6209  0028AA  B4D8               	btfsc	status,2,c
  6210  0028AC  D02C               	goto	l2749
  6211                           
  6212                           ; BSR set to: 0
  6213  0028AE  0E01               	movlw	1
  6214  0028B0  0100               	movlb	0	; () banked
  6215  0028B2  6F6A               	movwf	___awdiv@counter& (0+255),b
  6216  0028B4  D006               	goto	l2735
  6217  0028B6                     l2733:
  6218                           
  6219                           ; BSR set to: 0
  6220  0028B6  0100               	movlb	0	; () banked
  6221  0028B8  90D8               	bcf	status,0,c
  6222  0028BA  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  6223  0028BC  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6224  0028BE  0100               	movlb	0	; () banked
  6225  0028C0  2B6A               	incf	___awdiv@counter& (0+255),f,b
  6226  0028C2                     l2735:
  6227                           
  6228                           ; BSR set to: 0
  6229  0028C2  0100               	movlb	0	; () banked
  6230  0028C4  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6231  0028C6  D7F7               	goto	l2733
  6232  0028C8                     l2737:
  6233                           
  6234                           ; BSR set to: 0
  6235  0028C8  0100               	movlb	0	; () banked
  6236  0028CA  90D8               	bcf	status,0,c
  6237  0028CC  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  6238  0028CE  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6239                           
  6240                           ; BSR set to: 0
  6241  0028D0  0100               	movlb	0	; () banked
  6242  0028D2  5168               	movf	___awdiv@divisor& (0+255),w,b
  6243  0028D4  0100               	movlb	0	; () banked
  6244  0028D6  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  6245  0028D8  0100               	movlb	0	; () banked
  6246  0028DA  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6247  0028DC  0100               	movlb	0	; () banked
  6248  0028DE  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6249  0028E0  A0D8               	btfss	status,0,c
  6250  0028E2  D00A               	goto	l2745
  6251                           
  6252                           ; BSR set to: 0
  6253  0028E4  0100               	movlb	0	; () banked
  6254  0028E6  5168               	movf	___awdiv@divisor& (0+255),w,b
  6255  0028E8  0100               	movlb	0	; () banked
  6256  0028EA  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  6257  0028EC  0100               	movlb	0	; () banked
  6258  0028EE  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6259  0028F0  0100               	movlb	0	; () banked
  6260  0028F2  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6261                           
  6262                           ; BSR set to: 0
  6263  0028F4  0100               	movlb	0	; () banked
  6264  0028F6  816C               	bsf	___awdiv@quotient& (0+255),0,b
  6265  0028F8                     l2745:
  6266                           
  6267                           ; BSR set to: 0
  6268  0028F8  0100               	movlb	0	; () banked
  6269  0028FA  90D8               	bcf	status,0,c
  6270  0028FC  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6271  0028FE  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  6272                           
  6273                           ; BSR set to: 0
  6274  002900  0100               	movlb	0	; () banked
  6275  002902  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  6276  002904  D7E1               	goto	l2737
  6277  002906                     l2749:
  6278                           
  6279                           ; BSR set to: 0
  6280  002906  0100               	movlb	0	; () banked
  6281  002908  516B               	movf	___awdiv@sign& (0+255),w,b
  6282  00290A  0100               	movlb	0	; () banked
  6283  00290C  B4D8               	btfsc	status,2,c
  6284  00290E  D005               	goto	l2753
  6285                           
  6286                           ; BSR set to: 0
  6287  002910  0100               	movlb	0	; () banked
  6288  002912  6D6C               	negf	___awdiv@quotient& (0+255),b
  6289  002914  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6290  002916  B0D8               	btfsc	status,0,c
  6291  002918  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6292  00291A                     l2753:
  6293                           
  6294                           ; BSR set to: 0
  6295  00291A  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  6296  00291E  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  6297  002922  0012               	return	
  6298  002924                     __end_of___awdiv:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon2	equ	0xFF1
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           postdec1	equ	0xFE5
  6310                           plusw1	equ	0xFE3
  6311                           fsr1l	equ	0xFE1
  6312                           indf2	equ	0xFDF
  6313                           postinc2	equ	0xFDE
  6314                           postdec2	equ	0xFDD
  6315                           plusw2	equ	0xFDB
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function __tdiv_to_l_ *****************
  6321 ;; Defined at:
  6322 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  f1              3    0[BANK0 ] float 
  6325 ;;  f2              3    3[BANK0 ] float 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  quot            4    9[BANK0 ] unsigned long 
  6328 ;;  exp1            1   14[BANK0 ] unsigned char 
  6329 ;;  cntr            1   13[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  4    0[BANK0 ] unsigned long 
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6339 ;;      Params:         0       6       0       0       0       0       0       0       0
  6340 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6341 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6342 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6343 ;;Total ram usage:       15 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    3
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_sprintf
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text10
  6354  001C8E                     __ptext10:
  6355                           	opt stack 0
  6356  001C8E                     __tdiv_to_l_:
  6357                           	opt stack 26
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;incstack = 0
  6361  001C8E  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6362  001C92  0100               	movlb	0	; () banked
  6363  001C94  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6364  001C96  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6365  001C98  0100               	movlb	0	; () banked
  6366  001C9A  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6367  001C9C  0100               	movlb	0	; () banked
  6368  001C9E  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6369  001CA0  E301               	bnc	u2901
  6370  001CA2  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6371  001CA4                     u2901:
  6372  001CA4  0100               	movlb	0	; () banked
  6373  001CA6  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  6374  001CA8  0100               	movlb	0	; () banked
  6375  001CAA  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6376  001CAC  0100               	movlb	0	; () banked
  6377  001CAE  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6378  001CB0  A4D8               	btfss	status,2,c
  6379  001CB2  D00A               	goto	l2911
  6380                           
  6381                           ; BSR set to: 0
  6382  001CB4  0E00               	movlw	0
  6383  001CB6  0100               	movlb	0	; () banked
  6384  001CB8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6385  001CBA  0E00               	movlw	0
  6386  001CBC  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6387  001CBE  0E00               	movlw	0
  6388  001CC0  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6389  001CC2  0E00               	movlw	0
  6390  001CC4  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6391                           
  6392                           ; BSR set to: 0
  6393  001CC6  0012               	return	
  6394  001CC8                     l2911:
  6395                           
  6396                           ; BSR set to: 0
  6397  001CC8  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6398  001CCC  0100               	movlb	0	; () banked
  6399  001CCE  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6400  001CD0  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6401  001CD2  0100               	movlb	0	; () banked
  6402  001CD4  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6403  001CD6  0100               	movlb	0	; () banked
  6404  001CD8  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6405  001CDA  E301               	bnc	u2921
  6406  001CDC  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6407  001CDE                     u2921:
  6408  001CDE  0100               	movlb	0	; () banked
  6409  001CE0  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  6410  001CE2  0100               	movlb	0	; () banked
  6411  001CE4  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6412  001CE6  0100               	movlb	0	; () banked
  6413  001CE8  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6414  001CEA  A4D8               	btfss	status,2,c
  6415  001CEC  D00A               	goto	l2917
  6416                           
  6417                           ; BSR set to: 0
  6418  001CEE  0E00               	movlw	0
  6419  001CF0  0100               	movlb	0	; () banked
  6420  001CF2  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6421  001CF4  0E00               	movlw	0
  6422  001CF6  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6423  001CF8  0E00               	movlw	0
  6424  001CFA  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6425  001CFC  0E00               	movlw	0
  6426  001CFE  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6427                           
  6428                           ; BSR set to: 0
  6429  001D00  0012               	return	
  6430  001D02                     l2917:
  6431                           
  6432                           ; BSR set to: 0
  6433  001D02  0100               	movlb	0	; () banked
  6434  001D04  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6435                           
  6436                           ; BSR set to: 0
  6437  001D06  0EFF               	movlw	255
  6438  001D08  0100               	movlb	0	; () banked
  6439  001D0A  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6440  001D0C  0EFF               	movlw	255
  6441  001D0E  0100               	movlb	0	; () banked
  6442  001D10  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6443  001D12  0E00               	movlw	0
  6444  001D14  0100               	movlb	0	; () banked
  6445  001D16  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6446  001D18  0100               	movlb	0	; () banked
  6447  001D1A  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6448                           
  6449                           ; BSR set to: 0
  6450  001D1C  0EFF               	movlw	255
  6451  001D1E  0100               	movlb	0	; () banked
  6452  001D20  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6453  001D22  0EFF               	movlw	255
  6454  001D24  0100               	movlb	0	; () banked
  6455  001D26  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6456  001D28  0E00               	movlw	0
  6457  001D2A  0100               	movlb	0	; () banked
  6458  001D2C  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6459                           
  6460                           ; BSR set to: 0
  6461  001D2E  0E00               	movlw	0
  6462  001D30  0100               	movlb	0	; () banked
  6463  001D32  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  6464  001D34  0E00               	movlw	0
  6465  001D36  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6466  001D38  0E00               	movlw	0
  6467  001D3A  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6468  001D3C  0E00               	movlw	0
  6469  001D3E  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472  001D40  0E7F               	movlw	127
  6473  001D42  0100               	movlb	0	; () banked
  6474  001D44  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6475                           
  6476                           ; BSR set to: 0
  6477  001D46  0100               	movlb	0	; () banked
  6478  001D48  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6479  001D4A  0F98               	addlw	152
  6480  001D4C  0100               	movlb	0	; () banked
  6481  001D4E  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6482                           
  6483                           ; BSR set to: 0
  6484  001D50  0E18               	movlw	24
  6485  001D52  0100               	movlb	0	; () banked
  6486  001D54  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6487  001D56                     l639:
  6488                           
  6489                           ; BSR set to: 0
  6490  001D56  0100               	movlb	0	; () banked
  6491  001D58  90D8               	bcf	status,0,c
  6492  001D5A  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6493  001D5C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6494  001D5E  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6495  001D60  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6496                           
  6497                           ; BSR set to: 0
  6498  001D62  0100               	movlb	0	; () banked
  6499  001D64  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6500  001D66  0100               	movlb	0	; () banked
  6501  001D68  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6502  001D6A  0100               	movlb	0	; () banked
  6503  001D6C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6504  001D6E  0100               	movlb	0	; () banked
  6505  001D70  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6506  001D72  0100               	movlb	0	; () banked
  6507  001D74  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6508  001D76  0100               	movlb	0	; () banked
  6509  001D78  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6510  001D7A  A0D8               	btfss	status,0,c
  6511  001D7C  D00E               	goto	l640
  6512                           
  6513                           ; BSR set to: 0
  6514  001D7E  0100               	movlb	0	; () banked
  6515  001D80  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6516  001D82  0100               	movlb	0	; () banked
  6517  001D84  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6518  001D86  0100               	movlb	0	; () banked
  6519  001D88  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6520  001D8A  0100               	movlb	0	; () banked
  6521  001D8C  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6522  001D8E  0100               	movlb	0	; () banked
  6523  001D90  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6524  001D92  0100               	movlb	0	; () banked
  6525  001D94  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6526                           
  6527                           ; BSR set to: 0
  6528  001D96  0100               	movlb	0	; () banked
  6529  001D98  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6530  001D9A                     l640:
  6531                           
  6532                           ; BSR set to: 0
  6533  001D9A  0100               	movlb	0	; () banked
  6534  001D9C  90D8               	bcf	status,0,c
  6535  001D9E  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6536  001DA0  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6537  001DA2  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6538                           
  6539                           ; BSR set to: 0
  6540  001DA4  0100               	movlb	0	; () banked
  6541  001DA6  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6542  001DA8  D7D6               	goto	l639
  6543                           
  6544                           ; BSR set to: 0
  6545                           
  6546                           ; BSR set to: 0
  6547  001DAA  0100               	movlb	0	; () banked
  6548  001DAC  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6549  001DAE  D01A               	goto	l2951
  6550                           
  6551                           ; BSR set to: 0
  6552  001DB0  0100               	movlb	0	; () banked
  6553  001DB2  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6554  001DB4  0A80               	xorlw	128
  6555  001DB6  0F97               	addlw	151
  6556  001DB8  B0D8               	btfsc	status,0,c
  6557  001DBA  D00A               	goto	l2947
  6558                           
  6559                           ; BSR set to: 0
  6560  001DBC  0E00               	movlw	0
  6561  001DBE  0100               	movlb	0	; () banked
  6562  001DC0  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6563  001DC2  0E00               	movlw	0
  6564  001DC4  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6565  001DC6  0E00               	movlw	0
  6566  001DC8  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6567  001DCA  0E00               	movlw	0
  6568  001DCC  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6569                           
  6570                           ; BSR set to: 0
  6571  001DCE  0012               	return	
  6572  001DD0                     l2947:
  6573                           
  6574                           ; BSR set to: 0
  6575  001DD0  0100               	movlb	0	; () banked
  6576  001DD2  90D8               	bcf	status,0,c
  6577  001DD4  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6578  001DD6  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6579  001DD8  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6580  001DDA  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6581                           
  6582                           ; BSR set to: 0
  6583  001DDC  0100               	movlb	0	; () banked
  6584  001DDE  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6585  001DE0  D7F7               	goto	l2947
  6586                           
  6587                           ; BSR set to: 0
  6588  001DE2  D01B               	goto	l646
  6589  001DE4                     l2951:
  6590                           
  6591                           ; BSR set to: 0
  6592  001DE4  0E17               	movlw	23
  6593  001DE6  0100               	movlb	0	; () banked
  6594  001DE8  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6595  001DEA  D012               	goto	l2959
  6596                           
  6597                           ; BSR set to: 0
  6598  001DEC  0E00               	movlw	0
  6599  001DEE  0100               	movlb	0	; () banked
  6600  001DF0  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  6601  001DF2  0E00               	movlw	0
  6602  001DF4  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6603  001DF6  0E00               	movlw	0
  6604  001DF8  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6605  001DFA  0E00               	movlw	0
  6606  001DFC  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6607                           
  6608                           ; BSR set to: 0
  6609  001DFE  0012               	return	
  6610  001E00                     l2957:
  6611                           
  6612                           ; BSR set to: 0
  6613  001E00  0100               	movlb	0	; () banked
  6614  001E02  90D8               	bcf	status,0,c
  6615  001E04  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6616  001E06  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6617  001E08  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6618  001E0A  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6619  001E0C  0100               	movlb	0	; () banked
  6620  001E0E  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6621  001E10                     l2959:
  6622                           
  6623                           ; BSR set to: 0
  6624  001E10  0100               	movlb	0	; () banked
  6625  001E12  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6626  001E14  0100               	movlb	0	; () banked
  6627  001E16  A4D8               	btfss	status,2,c
  6628  001E18  D7F3               	goto	l2957
  6629  001E1A                     l646:
  6630                           
  6631                           ; BSR set to: 0
  6632  001E1A  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6633  001E1E  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6634  001E22  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6635  001E26  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6636                           
  6637                           ; BSR set to: 0
  6638  001E2A  0012               	return		;funcret
  6639  001E2C                     __end_of__tdiv_to_l_:
  6640                           	opt stack 0
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon2	equ	0xFF1
  6648                           postinc0	equ	0xFEE
  6649                           wreg	equ	0xFE8
  6650                           postdec1	equ	0xFE5
  6651                           plusw1	equ	0xFE3
  6652                           fsr1l	equ	0xFE1
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function __div_to_l_ *****************
  6662 ;; Defined at:
  6663 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  f1              3    0[BANK0 ] unsigned long 
  6666 ;;  f2              3    3[BANK0 ] unsigned long 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  quot            4    6[BANK0 ] unsigned long 
  6669 ;;  exp1            1   11[BANK0 ] unsigned char 
  6670 ;;  cntr            1   10[BANK0 ] unsigned char 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  4    0[BANK0 ] unsigned long 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2, status,0
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6680 ;;      Params:         0       6       0       0       0       0       0       0       0
  6681 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6683 ;;      Totals:         0      12       0       0       0       0       0       0       0
  6684 ;;Total ram usage:       12 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    3
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_sprintf
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           	psect	text11
  6695  001E2C                     __ptext11:
  6696                           	opt stack 0
  6697  001E2C                     __div_to_l_:
  6698                           	opt stack 26
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;incstack = 0
  6702  001E2C  0100               	movlb	0	; () banked
  6703  001E2E  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6704  001E30  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6705  001E32  0100               	movlb	0	; () banked
  6706  001E34  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  6707  001E36  0100               	movlb	0	; () banked
  6708  001E38  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6709  001E3A  A4D8               	btfss	status,2,c
  6710  001E3C  D00A               	goto	l2967
  6711                           
  6712                           ; BSR set to: 0
  6713  001E3E  0E00               	movlw	0
  6714  001E40  0100               	movlb	0	; () banked
  6715  001E42  6F60               	movwf	?__div_to_l_& (0+255),b
  6716  001E44  0E00               	movlw	0
  6717  001E46  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6718  001E48  0E00               	movlw	0
  6719  001E4A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6720  001E4C  0E00               	movlw	0
  6721  001E4E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6722                           
  6723                           ; BSR set to: 0
  6724  001E50  0012               	return	
  6725  001E52                     l2967:
  6726                           
  6727                           ; BSR set to: 0
  6728  001E52  0100               	movlb	0	; () banked
  6729  001E54  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6730  001E56  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6731  001E58  0100               	movlb	0	; () banked
  6732  001E5A  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6733  001E5C  0100               	movlb	0	; () banked
  6734  001E5E  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6735  001E60  A4D8               	btfss	status,2,c
  6736  001E62  D00A               	goto	l2973
  6737                           
  6738                           ; BSR set to: 0
  6739  001E64  0E00               	movlw	0
  6740  001E66  0100               	movlb	0	; () banked
  6741  001E68  6F60               	movwf	?__div_to_l_& (0+255),b
  6742  001E6A  0E00               	movlw	0
  6743  001E6C  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6744  001E6E  0E00               	movlw	0
  6745  001E70  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6746  001E72  0E00               	movlw	0
  6747  001E74  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6748                           
  6749                           ; BSR set to: 0
  6750  001E76  0012               	return	
  6751  001E78                     l2973:
  6752                           
  6753                           ; BSR set to: 0
  6754  001E78  0100               	movlb	0	; () banked
  6755  001E7A  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6756                           
  6757                           ; BSR set to: 0
  6758  001E7C  0EFF               	movlw	255
  6759  001E7E  0100               	movlb	0	; () banked
  6760  001E80  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  6761  001E82  0EFF               	movlw	255
  6762  001E84  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6763  001E86  0EFF               	movlw	255
  6764  001E88  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6765  001E8A  0E00               	movlw	0
  6766  001E8C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6767                           
  6768                           ; BSR set to: 0
  6769  001E8E  0100               	movlb	0	; () banked
  6770  001E90  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6771  001E92  0EFF               	movlw	255
  6772  001E94  0100               	movlb	0	; () banked
  6773  001E96  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  6774  001E98  0EFF               	movlw	255
  6775  001E9A  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6776  001E9C  0EFF               	movlw	255
  6777  001E9E  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6778  001EA0  0E00               	movlw	0
  6779  001EA2  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 0
  6782  001EA4  0E00               	movlw	0
  6783  001EA6  0100               	movlb	0	; () banked
  6784  001EA8  6F66               	movwf	__div_to_l_@quot& (0+255),b
  6785  001EAA  0E00               	movlw	0
  6786  001EAC  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6787  001EAE  0E00               	movlw	0
  6788  001EB0  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6789  001EB2  0E00               	movlw	0
  6790  001EB4  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6791                           
  6792                           ; BSR set to: 0
  6793  001EB6  0E7F               	movlw	127
  6794  001EB8  0100               	movlb	0	; () banked
  6795  001EBA  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6796                           
  6797                           ; BSR set to: 0
  6798  001EBC  0100               	movlb	0	; () banked
  6799  001EBE  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6800  001EC0  0FA0               	addlw	160
  6801  001EC2  0100               	movlb	0	; () banked
  6802  001EC4  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6803                           
  6804                           ; BSR set to: 0
  6805  001EC6  0E20               	movlw	32
  6806  001EC8  0100               	movlb	0	; () banked
  6807  001ECA  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6808  001ECC                     l2987:
  6809                           
  6810                           ; BSR set to: 0
  6811  001ECC  0100               	movlb	0	; () banked
  6812  001ECE  90D8               	bcf	status,0,c
  6813  001ED0  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6814  001ED2  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6815  001ED4  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6816  001ED6  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6817                           
  6818                           ; BSR set to: 0
  6819  001ED8  0100               	movlb	0	; () banked
  6820  001EDA  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6821  001EDC  0100               	movlb	0	; () banked
  6822  001EDE  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  6823  001EE0  0100               	movlb	0	; () banked
  6824  001EE2  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6825  001EE4  0100               	movlb	0	; () banked
  6826  001EE6  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6827  001EE8  0100               	movlb	0	; () banked
  6828  001EEA  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6829  001EEC  0100               	movlb	0	; () banked
  6830  001EEE  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6831  001EF0  0100               	movlb	0	; () banked
  6832  001EF2  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6833  001EF4  0100               	movlb	0	; () banked
  6834  001EF6  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6835  001EF8  A0D8               	btfss	status,0,c
  6836  001EFA  D012               	goto	l2995
  6837                           
  6838                           ; BSR set to: 0
  6839  001EFC  0100               	movlb	0	; () banked
  6840  001EFE  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6841  001F00  0100               	movlb	0	; () banked
  6842  001F02  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  6843  001F04  0100               	movlb	0	; () banked
  6844  001F06  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6845  001F08  0100               	movlb	0	; () banked
  6846  001F0A  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6847  001F0C  0100               	movlb	0	; () banked
  6848  001F0E  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6849  001F10  0100               	movlb	0	; () banked
  6850  001F12  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6851  001F14  0100               	movlb	0	; () banked
  6852  001F16  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6853  001F18  0100               	movlb	0	; () banked
  6854  001F1A  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6855                           
  6856                           ; BSR set to: 0
  6857  001F1C  0100               	movlb	0	; () banked
  6858  001F1E  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  6859  001F20                     l2995:
  6860                           
  6861                           ; BSR set to: 0
  6862  001F20  0100               	movlb	0	; () banked
  6863  001F22  90D8               	bcf	status,0,c
  6864  001F24  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  6865  001F26  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6866  001F28  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6867  001F2A  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6868                           
  6869                           ; BSR set to: 0
  6870  001F2C  0100               	movlb	0	; () banked
  6871  001F2E  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6872  001F30  D7CD               	goto	l2987
  6873                           
  6874                           ; BSR set to: 0
  6875                           
  6876                           ; BSR set to: 0
  6877  001F32  0100               	movlb	0	; () banked
  6878  001F34  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  6879  001F36  D01A               	goto	l3011
  6880                           
  6881                           ; BSR set to: 0
  6882  001F38  0100               	movlb	0	; () banked
  6883  001F3A  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6884  001F3C  0A80               	xorlw	128
  6885  001F3E  0F9F               	addlw	159
  6886  001F40  B0D8               	btfsc	status,0,c
  6887  001F42  D00A               	goto	l3007
  6888                           
  6889                           ; BSR set to: 0
  6890  001F44  0E00               	movlw	0
  6891  001F46  0100               	movlb	0	; () banked
  6892  001F48  6F60               	movwf	?__div_to_l_& (0+255),b
  6893  001F4A  0E00               	movlw	0
  6894  001F4C  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6895  001F4E  0E00               	movlw	0
  6896  001F50  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6897  001F52  0E00               	movlw	0
  6898  001F54  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901  001F56  0012               	return	
  6902  001F58                     l3007:
  6903                           
  6904                           ; BSR set to: 0
  6905  001F58  0100               	movlb	0	; () banked
  6906  001F5A  90D8               	bcf	status,0,c
  6907  001F5C  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6908  001F5E  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6909  001F60  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6910  001F62  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  6911                           
  6912                           ; BSR set to: 0
  6913  001F64  0100               	movlb	0	; () banked
  6914  001F66  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6915  001F68  D7F7               	goto	l3007
  6916                           
  6917                           ; BSR set to: 0
  6918  001F6A  D01B               	goto	l542
  6919  001F6C                     l3011:
  6920                           
  6921                           ; BSR set to: 0
  6922  001F6C  0E1F               	movlw	31
  6923  001F6E  0100               	movlb	0	; () banked
  6924  001F70  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6925  001F72  D012               	goto	l3019
  6926                           
  6927                           ; BSR set to: 0
  6928  001F74  0E00               	movlw	0
  6929  001F76  0100               	movlb	0	; () banked
  6930  001F78  6F60               	movwf	?__div_to_l_& (0+255),b
  6931  001F7A  0E00               	movlw	0
  6932  001F7C  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6933  001F7E  0E00               	movlw	0
  6934  001F80  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6935  001F82  0E00               	movlw	0
  6936  001F84  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6937                           
  6938                           ; BSR set to: 0
  6939  001F86  0012               	return	
  6940  001F88                     l3017:
  6941                           
  6942                           ; BSR set to: 0
  6943  001F88  0100               	movlb	0	; () banked
  6944  001F8A  90D8               	bcf	status,0,c
  6945  001F8C  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6946  001F8E  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6947  001F90  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6948  001F92  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6949  001F94  0100               	movlb	0	; () banked
  6950  001F96  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  6951  001F98                     l3019:
  6952                           
  6953                           ; BSR set to: 0
  6954  001F98  0100               	movlb	0	; () banked
  6955  001F9A  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6956  001F9C  0100               	movlb	0	; () banked
  6957  001F9E  A4D8               	btfss	status,2,c
  6958  001FA0  D7F3               	goto	l3017
  6959  001FA2                     l542:
  6960                           
  6961                           ; BSR set to: 0
  6962  001FA2  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  6963  001FA6  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6964  001FAA  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6965  001FAE  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6966                           
  6967                           ; BSR set to: 0
  6968  001FB2  0012               	return		;funcret
  6969  001FB4                     __end_of__div_to_l_:
  6970                           	opt stack 0
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           intcon2	equ	0xFF1
  6978                           postinc0	equ	0xFEE
  6979                           wreg	equ	0xFE8
  6980                           postdec1	equ	0xFE5
  6981                           plusw1	equ	0xFE3
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           plusw2	equ	0xFDB
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function ___lltoft *****************
  6992 ;; Defined at:
  6993 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  c               4    8[BANK0 ] unsigned long 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  exp             1   16[BANK0 ] unsigned char 
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  3    8[BANK0 ] float 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7007 ;;      Params:         0       4       0       0       0       0       0       0       0
  7008 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7009 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7010 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7011 ;;Total ram usage:        9 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    4
  7014 ;; This function calls:
  7015 ;;		___ftpack
  7016 ;; This function is called by:
  7017 ;;		_sprintf
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text12
  7022  002BCA                     __ptext12:
  7023                           	opt stack 0
  7024  002BCA                     ___lltoft:
  7025                           	opt stack 25
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;incstack = 0
  7029  002BCA  0E8E               	movlw	142
  7030  002BCC  0100               	movlb	0	; () banked
  7031  002BCE  6F70               	movwf	___lltoft@exp& (0+255),b
  7032  002BD0  D008               	goto	l3139
  7033  002BD2                     l3137:
  7034                           
  7035                           ; BSR set to: 0
  7036  002BD2  0100               	movlb	0	; () banked
  7037  002BD4  90D8               	bcf	status,0,c
  7038  002BD6  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7039  002BD8  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7040  002BDA  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7041  002BDC  3368               	rrcf	___lltoft@c& (0+255),f,b
  7042  002BDE  0100               	movlb	0	; () banked
  7043  002BE0  2B70               	incf	___lltoft@exp& (0+255),f,b
  7044  002BE2                     l3139:
  7045                           
  7046                           ; BSR set to: 0
  7047  002BE2  0E00               	movlw	0
  7048  002BE4  0100               	movlb	0	; () banked
  7049  002BE6  1568               	andwf	___lltoft@c& (0+255),w,b
  7050  002BE8  0100               	movlb	0	; () banked
  7051  002BEA  6F6C               	movwf	??___lltoft& (0+255),b
  7052  002BEC  0E00               	movlw	0
  7053  002BEE  0100               	movlb	0	; () banked
  7054  002BF0  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  7055  002BF2  0100               	movlb	0	; () banked
  7056  002BF4  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  7057  002BF6  0E00               	movlw	0
  7058  002BF8  0100               	movlb	0	; () banked
  7059  002BFA  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7060  002BFC  0100               	movlb	0	; () banked
  7061  002BFE  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  7062  002C00  0EFF               	movlw	255
  7063  002C02  0100               	movlb	0	; () banked
  7064  002C04  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7065  002C06  0100               	movlb	0	; () banked
  7066  002C08  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  7067  002C0A  0100               	movlb	0	; () banked
  7068  002C0C  516C               	movf	??___lltoft& (0+255),w,b
  7069  002C0E  0100               	movlb	0	; () banked
  7070  002C10  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7071  002C12  0100               	movlb	0	; () banked
  7072  002C14  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7073  002C16  0100               	movlb	0	; () banked
  7074  002C18  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7075  002C1A  A4D8               	btfss	status,2,c
  7076  002C1C  D7DA               	goto	l3137
  7077                           
  7078                           ; BSR set to: 0
  7079                           
  7080                           ; BSR set to: 0
  7081  002C1E  C068  F060         	movff	___lltoft@c,___ftpack@arg
  7082  002C22  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  7083  002C26  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  7084  002C2A  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  7085  002C2E  0E00               	movlw	0
  7086  002C30  0100               	movlb	0	; () banked
  7087  002C32  6F64               	movwf	___ftpack@sign& (0+255),b
  7088  002C34  EC5C  F012         	call	___ftpack	;wreg free
  7089  002C38  C060  F068         	movff	?___ftpack,?___lltoft
  7090  002C3C  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  7091  002C40  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  7092  002C44  0012               	return	
  7093  002C46                     __end_of___lltoft:
  7094                           	opt stack 0
  7095                           tblptru	equ	0xFF8
  7096                           tblptrh	equ	0xFF7
  7097                           tblptrl	equ	0xFF6
  7098                           tablat	equ	0xFF5
  7099                           prodh	equ	0xFF4
  7100                           prodl	equ	0xFF3
  7101                           intcon2	equ	0xFF1
  7102                           postinc0	equ	0xFEE
  7103                           wreg	equ	0xFE8
  7104                           postdec1	equ	0xFE5
  7105                           plusw1	equ	0xFE3
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           plusw2	equ	0xFDB
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function ___llmod *****************
  7116 ;; Defined at:
  7117 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  dividend        4    0[BANK0 ] unsigned long 
  7120 ;;  divisor         4    4[BANK0 ] unsigned long 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  counter         1    8[BANK0 ] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  4    0[BANK0 ] unsigned long 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7132 ;;      Params:         0       8       0       0       0       0       0       0       0
  7133 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7135 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7136 ;;Total ram usage:        9 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    3
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_sprintf
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text13
  7147  002B30                     __ptext13:
  7148                           	opt stack 0
  7149  002B30                     ___llmod:
  7150                           	opt stack 26
  7151                           
  7152                           ;incstack = 0
  7153  002B30  0100               	movlb	0	; () banked
  7154  002B32  5164               	movf	___llmod@divisor& (0+255),w,b
  7155  002B34  0100               	movlb	0	; () banked
  7156  002B36  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7157  002B38  0100               	movlb	0	; () banked
  7158  002B3A  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7159  002B3C  0100               	movlb	0	; () banked
  7160  002B3E  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7161  002B40  B4D8               	btfsc	status,2,c
  7162  002B42  D03A               	goto	l731
  7163                           
  7164                           ; BSR set to: 0
  7165  002B44  0E01               	movlw	1
  7166  002B46  0100               	movlb	0	; () banked
  7167  002B48  6F68               	movwf	___llmod@counter& (0+255),b
  7168  002B4A  D008               	goto	l3125
  7169  002B4C                     l3123:
  7170                           
  7171                           ; BSR set to: 0
  7172  002B4C  0100               	movlb	0	; () banked
  7173  002B4E  90D8               	bcf	status,0,c
  7174  002B50  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7175  002B52  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7176  002B54  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7177  002B56  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7178  002B58  0100               	movlb	0	; () banked
  7179  002B5A  2B68               	incf	___llmod@counter& (0+255),f,b
  7180  002B5C                     l3125:
  7181                           
  7182                           ; BSR set to: 0
  7183  002B5C  0100               	movlb	0	; () banked
  7184  002B5E  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7185  002B60  D7F5               	goto	l3123
  7186  002B62                     l3127:
  7187                           
  7188                           ; BSR set to: 0
  7189  002B62  0100               	movlb	0	; () banked
  7190  002B64  5164               	movf	___llmod@divisor& (0+255),w,b
  7191  002B66  0100               	movlb	0	; () banked
  7192  002B68  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7193  002B6A  0100               	movlb	0	; () banked
  7194  002B6C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7195  002B6E  0100               	movlb	0	; () banked
  7196  002B70  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7197  002B72  0100               	movlb	0	; () banked
  7198  002B74  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7199  002B76  0100               	movlb	0	; () banked
  7200  002B78  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7201  002B7A  0100               	movlb	0	; () banked
  7202  002B7C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7203  002B7E  0100               	movlb	0	; () banked
  7204  002B80  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7205  002B82  A0D8               	btfss	status,0,c
  7206  002B84  D010               	goto	l3131
  7207                           
  7208                           ; BSR set to: 0
  7209  002B86  0100               	movlb	0	; () banked
  7210  002B88  5164               	movf	___llmod@divisor& (0+255),w,b
  7211  002B8A  0100               	movlb	0	; () banked
  7212  002B8C  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7213  002B8E  0100               	movlb	0	; () banked
  7214  002B90  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7215  002B92  0100               	movlb	0	; () banked
  7216  002B94  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7217  002B96  0100               	movlb	0	; () banked
  7218  002B98  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7219  002B9A  0100               	movlb	0	; () banked
  7220  002B9C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7221  002B9E  0100               	movlb	0	; () banked
  7222  002BA0  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7223  002BA2  0100               	movlb	0	; () banked
  7224  002BA4  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7225  002BA6                     l3131:
  7226                           
  7227                           ; BSR set to: 0
  7228  002BA6  0100               	movlb	0	; () banked
  7229  002BA8  90D8               	bcf	status,0,c
  7230  002BAA  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7231  002BAC  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7232  002BAE  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7233  002BB0  3364               	rrcf	___llmod@divisor& (0+255),f,b
  7234                           
  7235                           ; BSR set to: 0
  7236  002BB2  0100               	movlb	0	; () banked
  7237  002BB4  2F68               	decfsz	___llmod@counter& (0+255),f,b
  7238  002BB6  D7D5               	goto	l3127
  7239  002BB8                     l731:
  7240                           
  7241                           ; BSR set to: 0
  7242  002BB8  C060  F060         	movff	___llmod@dividend,?___llmod
  7243  002BBC  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  7244  002BC0  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  7245  002BC4  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  7246                           
  7247                           ; BSR set to: 0
  7248  002BC8  0012               	return		;funcret
  7249  002BCA                     __end_of___llmod:
  7250                           	opt stack 0
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon2	equ	0xFF1
  7258                           postinc0	equ	0xFEE
  7259                           wreg	equ	0xFE8
  7260                           postdec1	equ	0xFE5
  7261                           plusw1	equ	0xFE3
  7262                           fsr1l	equ	0xFE1
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           postdec2	equ	0xFDD
  7266                           plusw2	equ	0xFDB
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function ___lldiv *****************
  7272 ;; Defined at:
  7273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  dividend        4    0[BANK0 ] unsigned long 
  7276 ;;  divisor         4    4[BANK0 ] unsigned long 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  quotient        4    8[BANK0 ] unsigned long 
  7279 ;;  counter         1   12[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  4    0[BANK0 ] unsigned long 
  7282 ;; Registers used:
  7283 ;;		wreg, status,2, status,0
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7289 ;;      Params:         0       8       0       0       0       0       0       0       0
  7290 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7292 ;;      Totals:         0      13       0       0       0       0       0       0       0
  7293 ;;Total ram usage:       13 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    3
  7296 ;; This function calls:
  7297 ;;		Nothing
  7298 ;; This function is called by:
  7299 ;;		_sprintf
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text14
  7304  002924                     __ptext14:
  7305                           	opt stack 0
  7306  002924                     ___lldiv:
  7307                           	opt stack 26
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;incstack = 0
  7311  002924  0E00               	movlw	0
  7312  002926  0100               	movlb	0	; () banked
  7313  002928  6F68               	movwf	___lldiv@quotient& (0+255),b
  7314  00292A  0E00               	movlw	0
  7315  00292C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  7316  00292E  0E00               	movlw	0
  7317  002930  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7318  002932  0E00               	movlw	0
  7319  002934  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7320                           
  7321                           ; BSR set to: 0
  7322  002936  0100               	movlb	0	; () banked
  7323  002938  5164               	movf	___lldiv@divisor& (0+255),w,b
  7324  00293A  0100               	movlb	0	; () banked
  7325  00293C  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7326  00293E  0100               	movlb	0	; () banked
  7327  002940  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7328  002942  0100               	movlb	0	; () banked
  7329  002944  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7330  002946  B4D8               	btfsc	status,2,c
  7331  002948  D042               	goto	l721
  7332                           
  7333                           ; BSR set to: 0
  7334  00294A  0E01               	movlw	1
  7335  00294C  0100               	movlb	0	; () banked
  7336  00294E  6F6C               	movwf	___lldiv@counter& (0+255),b
  7337  002950  D008               	goto	l3105
  7338  002952                     l3103:
  7339                           
  7340                           ; BSR set to: 0
  7341  002952  0100               	movlb	0	; () banked
  7342  002954  90D8               	bcf	status,0,c
  7343  002956  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  7344  002958  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7345  00295A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7346  00295C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7347  00295E  0100               	movlb	0	; () banked
  7348  002960  2B6C               	incf	___lldiv@counter& (0+255),f,b
  7349  002962                     l3105:
  7350                           
  7351                           ; BSR set to: 0
  7352  002962  0100               	movlb	0	; () banked
  7353  002964  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7354  002966  D7F5               	goto	l3103
  7355  002968                     l3107:
  7356                           
  7357                           ; BSR set to: 0
  7358  002968  0100               	movlb	0	; () banked
  7359  00296A  90D8               	bcf	status,0,c
  7360  00296C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  7361  00296E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7362  002970  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7363  002972  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7364                           
  7365                           ; BSR set to: 0
  7366  002974  0100               	movlb	0	; () banked
  7367  002976  5164               	movf	___lldiv@divisor& (0+255),w,b
  7368  002978  0100               	movlb	0	; () banked
  7369  00297A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  7370  00297C  0100               	movlb	0	; () banked
  7371  00297E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7372  002980  0100               	movlb	0	; () banked
  7373  002982  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7374  002984  0100               	movlb	0	; () banked
  7375  002986  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7376  002988  0100               	movlb	0	; () banked
  7377  00298A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7378  00298C  0100               	movlb	0	; () banked
  7379  00298E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7380  002990  0100               	movlb	0	; () banked
  7381  002992  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7382  002994  A0D8               	btfss	status,0,c
  7383  002996  D012               	goto	l3115
  7384                           
  7385                           ; BSR set to: 0
  7386  002998  0100               	movlb	0	; () banked
  7387  00299A  5164               	movf	___lldiv@divisor& (0+255),w,b
  7388  00299C  0100               	movlb	0	; () banked
  7389  00299E  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  7390  0029A0  0100               	movlb	0	; () banked
  7391  0029A2  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7392  0029A4  0100               	movlb	0	; () banked
  7393  0029A6  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7394  0029A8  0100               	movlb	0	; () banked
  7395  0029AA  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7396  0029AC  0100               	movlb	0	; () banked
  7397  0029AE  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7398  0029B0  0100               	movlb	0	; () banked
  7399  0029B2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7400  0029B4  0100               	movlb	0	; () banked
  7401  0029B6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7402                           
  7403                           ; BSR set to: 0
  7404  0029B8  0100               	movlb	0	; () banked
  7405  0029BA  8168               	bsf	___lldiv@quotient& (0+255),0,b
  7406  0029BC                     l3115:
  7407                           
  7408                           ; BSR set to: 0
  7409  0029BC  0100               	movlb	0	; () banked
  7410  0029BE  90D8               	bcf	status,0,c
  7411  0029C0  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7412  0029C2  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7413  0029C4  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7414  0029C6  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  7415                           
  7416                           ; BSR set to: 0
  7417  0029C8  0100               	movlb	0	; () banked
  7418  0029CA  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  7419  0029CC  D7CD               	goto	l3107
  7420  0029CE                     l721:
  7421                           
  7422                           ; BSR set to: 0
  7423  0029CE  C068  F060         	movff	___lldiv@quotient,?___lldiv
  7424  0029D2  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  7425  0029D6  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  7426  0029DA  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  7427                           
  7428                           ; BSR set to: 0
  7429  0029DE  0012               	return		;funcret
  7430  0029E0                     __end_of___lldiv:
  7431                           	opt stack 0
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon2	equ	0xFF1
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           postdec1	equ	0xFE5
  7442                           plusw1	equ	0xFE3
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           plusw2	equ	0xFDB
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function ___fttol *****************
  7453 ;; Defined at:
  7454 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  f1              3   42[BANK0 ] float 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  lval            4   52[BANK0 ] unsigned long 
  7459 ;;  exp1            1   56[BANK0 ] unsigned char 
  7460 ;;  sign1           1   51[BANK0 ] unsigned char 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  4   42[BANK0 ] long 
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7470 ;;      Params:         0       4       0       0       0       0       0       0       0
  7471 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7472 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7473 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7474 ;;Total ram usage:       15 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    3
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_sprintf
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text15
  7485  002112                     __ptext15:
  7486                           	opt stack 0
  7487  002112                     ___fttol:
  7488                           	opt stack 26
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;incstack = 0
  7492  002112  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  7493  002116  0100               	movlb	0	; () banked
  7494  002118  6B8F               	clrf	(??___fttol+1)& (0+255),b
  7495  00211A  6B90               	clrf	(??___fttol+2)& (0+255),b
  7496  00211C  0100               	movlb	0	; () banked
  7497  00211E  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7498  002120  0100               	movlb	0	; () banked
  7499  002122  378E               	rlcf	??___fttol& (0+255),f,b
  7500  002124  E301               	bnc	u3111
  7501  002126  818F               	bsf	(??___fttol+1)& (0+255),0,b
  7502  002128                     u3111:
  7503  002128  0100               	movlb	0	; () banked
  7504  00212A  518E               	movf	??___fttol& (0+255),w,b
  7505  00212C  0100               	movlb	0	; () banked
  7506  00212E  6F98               	movwf	___fttol@exp1& (0+255),b
  7507  002130  0100               	movlb	0	; () banked
  7508  002132  5198               	movf	___fttol@exp1& (0+255),w,b
  7509  002134  A4D8               	btfss	status,2,c
  7510  002136  D00A               	goto	l3057
  7511                           
  7512                           ; BSR set to: 0
  7513  002138  0E00               	movlw	0
  7514  00213A  0100               	movlb	0	; () banked
  7515  00213C  6F8A               	movwf	?___fttol& (0+255),b
  7516  00213E  0E00               	movlw	0
  7517  002140  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7518  002142  0E00               	movlw	0
  7519  002144  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7520  002146  0E00               	movlw	0
  7521  002148  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7522                           
  7523                           ; BSR set to: 0
  7524  00214A  0012               	return	
  7525  00214C                     l3057:
  7526                           
  7527                           ; BSR set to: 0
  7528  00214C  0E17               	movlw	23
  7529  00214E  0100               	movlb	0	; () banked
  7530  002150  6F8E               	movwf	??___fttol& (0+255),b
  7531  002152  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  7532  002156  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  7533  00215A  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  7534  00215E  0100               	movlb	0	; () banked
  7535  002160  298E               	incf	??___fttol& (0+255),w,b
  7536  002162  0100               	movlb	0	; () banked
  7537  002164  6F92               	movwf	(??___fttol+4)& (0+255),b
  7538  002166  D005               	goto	u3130
  7539  002168                     u3135:
  7540  002168  0100               	movlb	0	; () banked
  7541  00216A  90D8               	bcf	status,0,c
  7542  00216C  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  7543  00216E  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  7544  002170  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  7545  002172                     u3130:
  7546  002172  0100               	movlb	0	; () banked
  7547  002174  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  7548  002176  D7F8               	goto	u3135
  7549  002178  0100               	movlb	0	; () banked
  7550  00217A  518F               	movf	(??___fttol+1)& (0+255),w,b
  7551  00217C  0100               	movlb	0	; () banked
  7552  00217E  6F93               	movwf	___fttol@sign1& (0+255),b
  7553                           
  7554                           ; BSR set to: 0
  7555  002180  0100               	movlb	0	; () banked
  7556  002182  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7557                           
  7558                           ; BSR set to: 0
  7559  002184  0EFF               	movlw	255
  7560  002186  0100               	movlb	0	; () banked
  7561  002188  178A               	andwf	___fttol@f1& (0+255),f,b
  7562  00218A  0EFF               	movlw	255
  7563  00218C  0100               	movlb	0	; () banked
  7564  00218E  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7565  002190  0E00               	movlw	0
  7566  002192  0100               	movlb	0	; () banked
  7567  002194  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7568                           
  7569                           ; BSR set to: 0
  7570  002196  0100               	movlb	0	; () banked
  7571  002198  518A               	movf	___fttol@f1& (0+255),w,b
  7572  00219A  0100               	movlb	0	; () banked
  7573  00219C  6F94               	movwf	___fttol@lval& (0+255),b
  7574  00219E  0100               	movlb	0	; () banked
  7575  0021A0  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  7576  0021A2  0100               	movlb	0	; () banked
  7577  0021A4  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  7578  0021A6  0100               	movlb	0	; () banked
  7579  0021A8  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  7580  0021AA  0100               	movlb	0	; () banked
  7581  0021AC  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  7582  0021AE  0100               	movlb	0	; () banked
  7583  0021B0  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  7584                           
  7585                           ; BSR set to: 0
  7586  0021B2  0E8E               	movlw	142
  7587  0021B4  0100               	movlb	0	; () banked
  7588  0021B6  5F98               	subwf	___fttol@exp1& (0+255),f,b
  7589                           
  7590                           ; BSR set to: 0
  7591  0021B8  0100               	movlb	0	; () banked
  7592  0021BA  AF98               	btfss	___fttol@exp1& (0+255),7,b
  7593  0021BC  D01A               	goto	l3079
  7594                           
  7595                           ; BSR set to: 0
  7596  0021BE  0100               	movlb	0	; () banked
  7597  0021C0  5198               	movf	___fttol@exp1& (0+255),w,b
  7598  0021C2  0A80               	xorlw	128
  7599  0021C4  0F8F               	addlw	143
  7600  0021C6  B0D8               	btfsc	status,0,c
  7601  0021C8  D00A               	goto	l3075
  7602                           
  7603                           ; BSR set to: 0
  7604  0021CA  0E00               	movlw	0
  7605  0021CC  0100               	movlb	0	; () banked
  7606  0021CE  6F8A               	movwf	?___fttol& (0+255),b
  7607  0021D0  0E00               	movlw	0
  7608  0021D2  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7609  0021D4  0E00               	movlw	0
  7610  0021D6  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7611  0021D8  0E00               	movlw	0
  7612  0021DA  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7613                           
  7614                           ; BSR set to: 0
  7615  0021DC  0012               	return	
  7616  0021DE                     l3075:
  7617                           
  7618                           ; BSR set to: 0
  7619  0021DE  0100               	movlb	0	; () banked
  7620  0021E0  90D8               	bcf	status,0,c
  7621  0021E2  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7622  0021E4  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7623  0021E6  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7624  0021E8  3394               	rrcf	___fttol@lval& (0+255),f,b
  7625                           
  7626                           ; BSR set to: 0
  7627  0021EA  0100               	movlb	0	; () banked
  7628  0021EC  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  7629  0021EE  D7F7               	goto	l3075
  7630                           
  7631                           ; BSR set to: 0
  7632  0021F0  D01B               	goto	l3089
  7633  0021F2                     l3079:
  7634                           
  7635                           ; BSR set to: 0
  7636  0021F2  0E17               	movlw	23
  7637  0021F4  0100               	movlb	0	; () banked
  7638  0021F6  6598               	cpfsgt	___fttol@exp1& (0+255),b
  7639  0021F8  D012               	goto	l3087
  7640                           
  7641                           ; BSR set to: 0
  7642  0021FA  0E00               	movlw	0
  7643  0021FC  0100               	movlb	0	; () banked
  7644  0021FE  6F8A               	movwf	?___fttol& (0+255),b
  7645  002200  0E00               	movlw	0
  7646  002202  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7647  002204  0E00               	movlw	0
  7648  002206  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7649  002208  0E00               	movlw	0
  7650  00220A  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7651                           
  7652                           ; BSR set to: 0
  7653  00220C  0012               	return	
  7654  00220E                     l3085:
  7655                           
  7656                           ; BSR set to: 0
  7657  00220E  0100               	movlb	0	; () banked
  7658  002210  90D8               	bcf	status,0,c
  7659  002212  3794               	rlcf	___fttol@lval& (0+255),f,b
  7660  002214  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7661  002216  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7662  002218  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7663  00221A  0100               	movlb	0	; () banked
  7664  00221C  0798               	decf	___fttol@exp1& (0+255),f,b
  7665  00221E                     l3087:
  7666                           
  7667                           ; BSR set to: 0
  7668  00221E  0100               	movlb	0	; () banked
  7669  002220  5198               	movf	___fttol@exp1& (0+255),w,b
  7670  002222  0100               	movlb	0	; () banked
  7671  002224  A4D8               	btfss	status,2,c
  7672  002226  D7F3               	goto	l3085
  7673  002228                     l3089:
  7674                           
  7675                           ; BSR set to: 0
  7676  002228  0100               	movlb	0	; () banked
  7677  00222A  5193               	movf	___fttol@sign1& (0+255),w,b
  7678  00222C  0100               	movlb	0	; () banked
  7679  00222E  B4D8               	btfsc	status,2,c
  7680  002230  D009               	goto	l3093
  7681                           
  7682                           ; BSR set to: 0
  7683  002232  0100               	movlb	0	; () banked
  7684  002234  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  7685  002236  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  7686  002238  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  7687  00223A  6D94               	negf	___fttol@lval& (0+255),b
  7688  00223C  0E00               	movlw	0
  7689  00223E  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7690  002240  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7691  002242  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7692  002244                     l3093:
  7693                           
  7694                           ; BSR set to: 0
  7695  002244  C094  F08A         	movff	___fttol@lval,?___fttol
  7696  002248  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  7697  00224C  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  7698  002250  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  7699  002254  0012               	return	
  7700  002256                     __end_of___fttol:
  7701                           	opt stack 0
  7702                           tblptru	equ	0xFF8
  7703                           tblptrh	equ	0xFF7
  7704                           tblptrl	equ	0xFF6
  7705                           tablat	equ	0xFF5
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           intcon2	equ	0xFF1
  7709                           postinc0	equ	0xFEE
  7710                           wreg	equ	0xFE8
  7711                           postdec1	equ	0xFE5
  7712                           plusw1	equ	0xFE3
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           plusw2	equ	0xFDB
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function ___ftsub *****************
  7723 ;; Defined at:
  7724 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  f1              3   57[BANK0 ] float 
  7727 ;;  f2              3   60[BANK0 ] float 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  3   57[BANK0 ] float 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2, status,0, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7739 ;;      Params:         0       6       0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7742 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7743 ;;Total ram usage:        6 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    5
  7746 ;; This function calls:
  7747 ;;		___ftadd
  7748 ;; This function is called by:
  7749 ;;		_sprintf
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text16
  7754  002E10                     __ptext16:
  7755                           	opt stack 0
  7756  002E10                     ___ftsub:
  7757                           	opt stack 24
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;incstack = 0
  7761  002E10  0100               	movlb	0	; () banked
  7762  002E12  519C               	movf	___ftsub@f2& (0+255),w,b
  7763  002E14  0100               	movlb	0	; () banked
  7764  002E16  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7765  002E18  0100               	movlb	0	; () banked
  7766  002E1A  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7767  002E1C  B4D8               	btfsc	status,2,c
  7768  002E1E  D009               	goto	l3025
  7769                           
  7770                           ; BSR set to: 0
  7771  002E20  0E00               	movlw	0
  7772  002E22  0100               	movlb	0	; () banked
  7773  002E24  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  7774  002E26  0E00               	movlw	0
  7775  002E28  0100               	movlb	0	; () banked
  7776  002E2A  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7777  002E2C  0E80               	movlw	128
  7778  002E2E  0100               	movlb	0	; () banked
  7779  002E30  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7780  002E32                     l3025:
  7781                           
  7782                           ; BSR set to: 0
  7783  002E32  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  7784  002E36  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7785  002E3A  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7786  002E3E  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  7787  002E42  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  7788  002E46  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  7789  002E4A  EC3D  F00C         	call	___ftadd	;wreg free
  7790  002E4E  C08D  F099         	movff	?___ftadd,?___ftsub
  7791  002E52  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  7792  002E56  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  7793  002E5A  0012               	return	
  7794  002E5C                     __end_of___ftsub:
  7795                           	opt stack 0
  7796                           tblptru	equ	0xFF8
  7797                           tblptrh	equ	0xFF7
  7798                           tblptrl	equ	0xFF6
  7799                           tablat	equ	0xFF5
  7800                           prodh	equ	0xFF4
  7801                           prodl	equ	0xFF3
  7802                           intcon2	equ	0xFF1
  7803                           postinc0	equ	0xFEE
  7804                           wreg	equ	0xFE8
  7805                           postdec1	equ	0xFE5
  7806                           plusw1	equ	0xFE3
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           plusw2	equ	0xFDB
  7812                           fsr2h	equ	0xFDA
  7813                           fsr2l	equ	0xFD9
  7814                           status	equ	0xFD8
  7815                           
  7816 ;; *************** function ___ftadd *****************
  7817 ;; Defined at:
  7818 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  f1              3   45[BANK0 ] float 
  7821 ;;  f2              3   48[BANK0 ] float 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  exp1            1   56[BANK0 ] unsigned char 
  7824 ;;  exp2            1   55[BANK0 ] unsigned char 
  7825 ;;  sign            1   54[BANK0 ] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  3   45[BANK0 ] float 
  7828 ;; Registers used:
  7829 ;;		wreg, status,2, status,0, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7835 ;;      Params:         0       6       0       0       0       0       0       0       0
  7836 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7837 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7838 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7839 ;;Total ram usage:       12 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    4
  7842 ;; This function calls:
  7843 ;;		___ftpack
  7844 ;; This function is called by:
  7845 ;;		_sprintf
  7846 ;;		___ftsub
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text17
  7851  00187A                     __ptext17:
  7852                           	opt stack 0
  7853  00187A                     ___ftadd:
  7854                           	opt stack 24
  7855                           
  7856                           ;incstack = 0
  7857  00187A  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  7858  00187E  0100               	movlb	0	; () banked
  7859  001880  6B94               	clrf	(??___ftadd+1)& (0+255),b
  7860  001882  6B95               	clrf	(??___ftadd+2)& (0+255),b
  7861  001884  0100               	movlb	0	; () banked
  7862  001886  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7863  001888  0100               	movlb	0	; () banked
  7864  00188A  3793               	rlcf	??___ftadd& (0+255),f,b
  7865  00188C  E301               	bnc	u2421
  7866  00188E  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  7867  001890                     u2421:
  7868  001890  0100               	movlb	0	; () banked
  7869  001892  5193               	movf	??___ftadd& (0+255),w,b
  7870  001894  0100               	movlb	0	; () banked
  7871  001896  6F98               	movwf	___ftadd@exp1& (0+255),b
  7872  001898  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  7873  00189C  0100               	movlb	0	; () banked
  7874  00189E  6B94               	clrf	(??___ftadd+1)& (0+255),b
  7875  0018A0  6B95               	clrf	(??___ftadd+2)& (0+255),b
  7876  0018A2  0100               	movlb	0	; () banked
  7877  0018A4  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7878  0018A6  0100               	movlb	0	; () banked
  7879  0018A8  3793               	rlcf	??___ftadd& (0+255),f,b
  7880  0018AA  E301               	bnc	u2431
  7881  0018AC  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  7882  0018AE                     u2431:
  7883  0018AE  0100               	movlb	0	; () banked
  7884  0018B0  5193               	movf	??___ftadd& (0+255),w,b
  7885  0018B2  0100               	movlb	0	; () banked
  7886  0018B4  6F97               	movwf	___ftadd@exp2& (0+255),b
  7887                           
  7888                           ; BSR set to: 0
  7889  0018B6  0100               	movlb	0	; () banked
  7890  0018B8  5198               	movf	___ftadd@exp1& (0+255),w,b
  7891  0018BA  0100               	movlb	0	; () banked
  7892  0018BC  B4D8               	btfsc	status,2,c
  7893  0018BE  D011               	goto	l597
  7894                           
  7895                           ; BSR set to: 0
  7896  0018C0  0100               	movlb	0	; () banked
  7897  0018C2  5197               	movf	___ftadd@exp2& (0+255),w,b
  7898  0018C4  0100               	movlb	0	; () banked
  7899  0018C6  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  7900  0018C8  B0D8               	btfsc	status,0,c
  7901  0018CA  D012               	goto	l2603
  7902                           
  7903                           ; BSR set to: 0
  7904  0018CC  0100               	movlb	0	; () banked
  7905  0018CE  5198               	movf	___ftadd@exp1& (0+255),w,b
  7906  0018D0  0800               	sublw	0
  7907  0018D2  0100               	movlb	0	; () banked
  7908  0018D4  2597               	addwf	___ftadd@exp2& (0+255),w,b
  7909  0018D6  0100               	movlb	0	; () banked
  7910  0018D8  6F93               	movwf	??___ftadd& (0+255),b
  7911  0018DA  0E18               	movlw	24
  7912  0018DC  0100               	movlb	0	; () banked
  7913  0018DE  6593               	cpfsgt	??___ftadd& (0+255),b
  7914  0018E0  D007               	goto	l2603
  7915  0018E2                     l597:
  7916                           
  7917                           ; BSR set to: 0
  7918  0018E2  C090  F08D         	movff	___ftadd@f2,?___ftadd
  7919  0018E6  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  7920  0018EA  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  7921  0018EE  0012               	return	
  7922  0018F0                     l2603:
  7923                           
  7924                           ; BSR set to: 0
  7925  0018F0  0100               	movlb	0	; () banked
  7926  0018F2  5197               	movf	___ftadd@exp2& (0+255),w,b
  7927  0018F4  0100               	movlb	0	; () banked
  7928  0018F6  B4D8               	btfsc	status,2,c
  7929  0018F8  D011               	goto	l601
  7930                           
  7931                           ; BSR set to: 0
  7932  0018FA  0100               	movlb	0	; () banked
  7933  0018FC  5198               	movf	___ftadd@exp1& (0+255),w,b
  7934  0018FE  0100               	movlb	0	; () banked
  7935  001900  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  7936  001902  B0D8               	btfsc	status,0,c
  7937  001904  D012               	goto	l2609
  7938                           
  7939                           ; BSR set to: 0
  7940  001906  0100               	movlb	0	; () banked
  7941  001908  5197               	movf	___ftadd@exp2& (0+255),w,b
  7942  00190A  0800               	sublw	0
  7943  00190C  0100               	movlb	0	; () banked
  7944  00190E  2598               	addwf	___ftadd@exp1& (0+255),w,b
  7945  001910  0100               	movlb	0	; () banked
  7946  001912  6F93               	movwf	??___ftadd& (0+255),b
  7947  001914  0E18               	movlw	24
  7948  001916  0100               	movlb	0	; () banked
  7949  001918  6593               	cpfsgt	??___ftadd& (0+255),b
  7950  00191A  D007               	goto	l2609
  7951  00191C                     l601:
  7952                           
  7953                           ; BSR set to: 0
  7954  00191C  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  7955  001920  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  7956  001924  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  7957  001928  0012               	return	
  7958  00192A                     l2609:
  7959                           
  7960                           ; BSR set to: 0
  7961  00192A  0E06               	movlw	6
  7962  00192C  0100               	movlb	0	; () banked
  7963  00192E  6F96               	movwf	___ftadd@sign& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966  001930  0100               	movlb	0	; () banked
  7967  001932  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7968  001934  D002               	goto	l2615
  7969                           
  7970                           ; BSR set to: 0
  7971  001936  0100               	movlb	0	; () banked
  7972  001938  8F96               	bsf	___ftadd@sign& (0+255),7,b
  7973  00193A                     l2615:
  7974                           
  7975                           ; BSR set to: 0
  7976  00193A  0100               	movlb	0	; () banked
  7977  00193C  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7978  00193E  D002               	goto	l603
  7979                           
  7980                           ; BSR set to: 0
  7981  001940  0100               	movlb	0	; () banked
  7982  001942  8D96               	bsf	___ftadd@sign& (0+255),6,b
  7983  001944                     l603:
  7984                           
  7985                           ; BSR set to: 0
  7986  001944  0100               	movlb	0	; () banked
  7987  001946  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7988                           
  7989                           ; BSR set to: 0
  7990  001948  0EFF               	movlw	255
  7991  00194A  0100               	movlb	0	; () banked
  7992  00194C  178D               	andwf	___ftadd@f1& (0+255),f,b
  7993  00194E  0EFF               	movlw	255
  7994  001950  0100               	movlb	0	; () banked
  7995  001952  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7996  001954  0E00               	movlw	0
  7997  001956  0100               	movlb	0	; () banked
  7998  001958  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7999  00195A  0100               	movlb	0	; () banked
  8000  00195C  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8001                           
  8002                           ; BSR set to: 0
  8003  00195E  0EFF               	movlw	255
  8004  001960  0100               	movlb	0	; () banked
  8005  001962  1790               	andwf	___ftadd@f2& (0+255),f,b
  8006  001964  0EFF               	movlw	255
  8007  001966  0100               	movlb	0	; () banked
  8008  001968  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8009  00196A  0E00               	movlw	0
  8010  00196C  0100               	movlb	0	; () banked
  8011  00196E  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8012                           
  8013                           ; BSR set to: 0
  8014  001970  0100               	movlb	0	; () banked
  8015  001972  5197               	movf	___ftadd@exp2& (0+255),w,b
  8016  001974  0100               	movlb	0	; () banked
  8017  001976  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8018  001978  B0D8               	btfsc	status,0,c
  8019  00197A  D025               	goto	l2635
  8020  00197C                     l2625:
  8021                           
  8022                           ; BSR set to: 0
  8023  00197C  0100               	movlb	0	; () banked
  8024  00197E  90D8               	bcf	status,0,c
  8025  001980  3790               	rlcf	___ftadd@f2& (0+255),f,b
  8026  001982  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8027  001984  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8028  001986  0100               	movlb	0	; () banked
  8029  001988  0797               	decf	___ftadd@exp2& (0+255),f,b
  8030                           
  8031                           ; BSR set to: 0
  8032  00198A  0100               	movlb	0	; () banked
  8033  00198C  5198               	movf	___ftadd@exp1& (0+255),w,b
  8034  00198E  0100               	movlb	0	; () banked
  8035  001990  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8036  001992  B4D8               	btfsc	status,2,c
  8037  001994  D011               	goto	l2633
  8038                           
  8039                           ; BSR set to: 0
  8040  001996  0100               	movlb	0	; () banked
  8041  001998  0796               	decf	___ftadd@sign& (0+255),f,b
  8042  00199A  C096  F093         	movff	___ftadd@sign,??___ftadd
  8043  00199E  0E07               	movlw	7
  8044  0019A0  0100               	movlb	0	; () banked
  8045  0019A2  1793               	andwf	??___ftadd& (0+255),f,b
  8046  0019A4  B4D8               	btfsc	status,2,c
  8047  0019A6  D008               	goto	l2633
  8048  0019A8  D7E9               	goto	l2625
  8049  0019AA                     l2631:
  8050                           
  8051                           ; BSR set to: 0
  8052  0019AA  0100               	movlb	0	; () banked
  8053  0019AC  90D8               	bcf	status,0,c
  8054  0019AE  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8055  0019B0  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8056  0019B2  338D               	rrcf	___ftadd@f1& (0+255),f,b
  8057  0019B4  0100               	movlb	0	; () banked
  8058  0019B6  2B98               	incf	___ftadd@exp1& (0+255),f,b
  8059  0019B8                     l2633:
  8060                           
  8061                           ; BSR set to: 0
  8062  0019B8  0100               	movlb	0	; () banked
  8063  0019BA  5197               	movf	___ftadd@exp2& (0+255),w,b
  8064  0019BC  0100               	movlb	0	; () banked
  8065  0019BE  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8066  0019C0  B4D8               	btfsc	status,2,c
  8067  0019C2  D02B               	goto	l612
  8068  0019C4  D7F2               	goto	l2631
  8069  0019C6                     l2635:
  8070                           
  8071                           ; BSR set to: 0
  8072  0019C6  0100               	movlb	0	; () banked
  8073  0019C8  5198               	movf	___ftadd@exp1& (0+255),w,b
  8074  0019CA  0100               	movlb	0	; () banked
  8075  0019CC  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8076  0019CE  B0D8               	btfsc	status,0,c
  8077  0019D0  D024               	goto	l612
  8078  0019D2                     l2637:
  8079                           
  8080                           ; BSR set to: 0
  8081  0019D2  0100               	movlb	0	; () banked
  8082  0019D4  90D8               	bcf	status,0,c
  8083  0019D6  378D               	rlcf	___ftadd@f1& (0+255),f,b
  8084  0019D8  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8085  0019DA  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8086  0019DC  0100               	movlb	0	; () banked
  8087  0019DE  0798               	decf	___ftadd@exp1& (0+255),f,b
  8088                           
  8089                           ; BSR set to: 0
  8090  0019E0  0100               	movlb	0	; () banked
  8091  0019E2  5198               	movf	___ftadd@exp1& (0+255),w,b
  8092  0019E4  0100               	movlb	0	; () banked
  8093  0019E6  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8094  0019E8  B4D8               	btfsc	status,2,c
  8095  0019EA  D011               	goto	l2645
  8096                           
  8097                           ; BSR set to: 0
  8098  0019EC  0100               	movlb	0	; () banked
  8099  0019EE  0796               	decf	___ftadd@sign& (0+255),f,b
  8100  0019F0  C096  F093         	movff	___ftadd@sign,??___ftadd
  8101  0019F4  0E07               	movlw	7
  8102  0019F6  0100               	movlb	0	; () banked
  8103  0019F8  1793               	andwf	??___ftadd& (0+255),f,b
  8104  0019FA  B4D8               	btfsc	status,2,c
  8105  0019FC  D008               	goto	l2645
  8106  0019FE  D7E9               	goto	l2637
  8107  001A00                     l2643:
  8108                           
  8109                           ; BSR set to: 0
  8110  001A00  0100               	movlb	0	; () banked
  8111  001A02  90D8               	bcf	status,0,c
  8112  001A04  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8113  001A06  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8114  001A08  3390               	rrcf	___ftadd@f2& (0+255),f,b
  8115  001A0A  0100               	movlb	0	; () banked
  8116  001A0C  2B97               	incf	___ftadd@exp2& (0+255),f,b
  8117  001A0E                     l2645:
  8118                           
  8119                           ; BSR set to: 0
  8120  001A0E  0100               	movlb	0	; () banked
  8121  001A10  5197               	movf	___ftadd@exp2& (0+255),w,b
  8122  001A12  0100               	movlb	0	; () banked
  8123  001A14  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8124  001A16  A4D8               	btfss	status,2,c
  8125  001A18  D7F3               	goto	l2643
  8126  001A1A                     l612:
  8127                           
  8128                           ; BSR set to: 0
  8129  001A1A  0100               	movlb	0	; () banked
  8130  001A1C  AF96               	btfss	___ftadd@sign& (0+255),7,b
  8131  001A1E  D012               	goto	l621
  8132                           
  8133                           ; BSR set to: 0
  8134  001A20  0EFF               	movlw	255
  8135  001A22  0100               	movlb	0	; () banked
  8136  001A24  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  8137  001A26  0EFF               	movlw	255
  8138  001A28  0100               	movlb	0	; () banked
  8139  001A2A  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8140  001A2C  0EFF               	movlw	255
  8141  001A2E  0100               	movlb	0	; () banked
  8142  001A30  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8143  001A32  0E01               	movlw	1
  8144  001A34  0100               	movlb	0	; () banked
  8145  001A36  278D               	addwf	___ftadd@f1& (0+255),f,b
  8146  001A38  0E00               	movlw	0
  8147  001A3A  0100               	movlb	0	; () banked
  8148  001A3C  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8149  001A3E  0E00               	movlw	0
  8150  001A40  0100               	movlb	0	; () banked
  8151  001A42  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8152  001A44                     l621:
  8153                           
  8154                           ; BSR set to: 0
  8155  001A44  0100               	movlb	0	; () banked
  8156  001A46  AD96               	btfss	___ftadd@sign& (0+255),6,b
  8157  001A48  D012               	goto	l2651
  8158                           
  8159                           ; BSR set to: 0
  8160  001A4A  0EFF               	movlw	255
  8161  001A4C  0100               	movlb	0	; () banked
  8162  001A4E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8163  001A50  0EFF               	movlw	255
  8164  001A52  0100               	movlb	0	; () banked
  8165  001A54  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8166  001A56  0EFF               	movlw	255
  8167  001A58  0100               	movlb	0	; () banked
  8168  001A5A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8169  001A5C  0E01               	movlw	1
  8170  001A5E  0100               	movlb	0	; () banked
  8171  001A60  2790               	addwf	___ftadd@f2& (0+255),f,b
  8172  001A62  0E00               	movlw	0
  8173  001A64  0100               	movlb	0	; () banked
  8174  001A66  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8175  001A68  0E00               	movlw	0
  8176  001A6A  0100               	movlb	0	; () banked
  8177  001A6C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8178  001A6E                     l2651:
  8179                           
  8180                           ; BSR set to: 0
  8181  001A6E  0E00               	movlw	0
  8182  001A70  0100               	movlb	0	; () banked
  8183  001A72  6F96               	movwf	___ftadd@sign& (0+255),b
  8184                           
  8185                           ; BSR set to: 0
  8186  001A74  0100               	movlb	0	; () banked
  8187  001A76  518D               	movf	___ftadd@f1& (0+255),w,b
  8188  001A78  0100               	movlb	0	; () banked
  8189  001A7A  2790               	addwf	___ftadd@f2& (0+255),f,b
  8190  001A7C  0100               	movlb	0	; () banked
  8191  001A7E  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8192  001A80  0100               	movlb	0	; () banked
  8193  001A82  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8194  001A84  0100               	movlb	0	; () banked
  8195  001A86  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8196  001A88  0100               	movlb	0	; () banked
  8197  001A8A  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8198                           
  8199                           ; BSR set to: 0
  8200  001A8C  0100               	movlb	0	; () banked
  8201  001A8E  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8202  001A90  D015               	goto	l2661
  8203                           
  8204                           ; BSR set to: 0
  8205  001A92  0EFF               	movlw	255
  8206  001A94  0100               	movlb	0	; () banked
  8207  001A96  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8208  001A98  0EFF               	movlw	255
  8209  001A9A  0100               	movlb	0	; () banked
  8210  001A9C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8211  001A9E  0EFF               	movlw	255
  8212  001AA0  0100               	movlb	0	; () banked
  8213  001AA2  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8214  001AA4  0E01               	movlw	1
  8215  001AA6  0100               	movlb	0	; () banked
  8216  001AA8  2790               	addwf	___ftadd@f2& (0+255),f,b
  8217  001AAA  0E00               	movlw	0
  8218  001AAC  0100               	movlb	0	; () banked
  8219  001AAE  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8220  001AB0  0E00               	movlw	0
  8221  001AB2  0100               	movlb	0	; () banked
  8222  001AB4  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8223                           
  8224                           ; BSR set to: 0
  8225  001AB6  0E01               	movlw	1
  8226  001AB8  0100               	movlb	0	; () banked
  8227  001ABA  6F96               	movwf	___ftadd@sign& (0+255),b
  8228  001ABC                     l2661:
  8229                           
  8230                           ; BSR set to: 0
  8231  001ABC  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  8232  001AC0  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  8233  001AC4  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  8234  001AC8  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  8235  001ACC  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  8236  001AD0  EC5C  F012         	call	___ftpack	;wreg free
  8237  001AD4  C060  F08D         	movff	?___ftpack,?___ftadd
  8238  001AD8  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  8239  001ADC  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  8240  001AE0  0012               	return	
  8241  001AE2                     __end_of___ftadd:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon2	equ	0xFF1
  8250                           postinc0	equ	0xFEE
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           plusw1	equ	0xFE3
  8254                           fsr1l	equ	0xFE1
  8255                           indf2	equ	0xFDF
  8256                           postinc2	equ	0xFDE
  8257                           postdec2	equ	0xFDD
  8258                           plusw2	equ	0xFDB
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function ___ftpack *****************
  8264 ;; Defined at:
  8265 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  arg             3    0[BANK0 ] unsigned um
  8268 ;;  exp             1    3[BANK0 ] unsigned char 
  8269 ;;  sign            1    4[BANK0 ] unsigned char 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;		None
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  3    0[BANK0 ] float 
  8274 ;; Registers used:
  8275 ;;		wreg, status,2, status,0
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8281 ;;      Params:         0       5       0       0       0       0       0       0       0
  8282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8283 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8284 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8285 ;;Total ram usage:        8 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    3
  8288 ;; This function calls:
  8289 ;;		Nothing
  8290 ;; This function is called by:
  8291 ;;		___ftadd
  8292 ;;		___ftmul
  8293 ;;		___lltoft
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           	psect	text18
  8298  0024B8                     __ptext18:
  8299                           	opt stack 0
  8300  0024B8                     ___ftpack:
  8301                           	opt stack 24
  8302                           
  8303                           ;incstack = 0
  8304  0024B8  0100               	movlb	0	; () banked
  8305  0024BA  5163               	movf	___ftpack@exp& (0+255),w,b
  8306  0024BC  0100               	movlb	0	; () banked
  8307  0024BE  B4D8               	btfsc	status,2,c
  8308  0024C0  D008               	goto	l2541
  8309                           
  8310                           ; BSR set to: 0
  8311  0024C2  0100               	movlb	0	; () banked
  8312  0024C4  5160               	movf	___ftpack@arg& (0+255),w,b
  8313  0024C6  0100               	movlb	0	; () banked
  8314  0024C8  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8315  0024CA  0100               	movlb	0	; () banked
  8316  0024CC  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8317  0024CE  A4D8               	btfss	status,2,c
  8318  0024D0  D011               	goto	l2547
  8319  0024D2                     l2541:
  8320                           
  8321                           ; BSR set to: 0
  8322  0024D2  0E00               	movlw	0
  8323  0024D4  0100               	movlb	0	; () banked
  8324  0024D6  6F60               	movwf	?___ftpack& (0+255),b
  8325  0024D8  0E00               	movlw	0
  8326  0024DA  0100               	movlb	0	; () banked
  8327  0024DC  6F61               	movwf	(?___ftpack+1)& (0+255),b
  8328  0024DE  0E00               	movlw	0
  8329  0024E0  0100               	movlb	0	; () banked
  8330  0024E2  6F62               	movwf	(?___ftpack+2)& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333  0024E4  0012               	return	
  8334  0024E6                     l2545:
  8335                           
  8336                           ; BSR set to: 0
  8337  0024E6  0100               	movlb	0	; () banked
  8338  0024E8  2B63               	incf	___ftpack@exp& (0+255),f,b
  8339  0024EA  0100               	movlb	0	; () banked
  8340  0024EC  90D8               	bcf	status,0,c
  8341  0024EE  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8342  0024F0  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8343  0024F2  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8344  0024F4                     l2547:
  8345                           
  8346                           ; BSR set to: 0
  8347  0024F4  0E00               	movlw	0
  8348  0024F6  0100               	movlb	0	; () banked
  8349  0024F8  1560               	andwf	___ftpack@arg& (0+255),w,b
  8350  0024FA  0100               	movlb	0	; () banked
  8351  0024FC  6F65               	movwf	??___ftpack& (0+255),b
  8352  0024FE  0E00               	movlw	0
  8353  002500  0100               	movlb	0	; () banked
  8354  002502  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8355  002504  0100               	movlb	0	; () banked
  8356  002506  6F66               	movwf	(??___ftpack+1)& (0+255),b
  8357  002508  0EFE               	movlw	254
  8358  00250A  0100               	movlb	0	; () banked
  8359  00250C  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8360  00250E  0100               	movlb	0	; () banked
  8361  002510  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8362  002512  0100               	movlb	0	; () banked
  8363  002514  5165               	movf	??___ftpack& (0+255),w,b
  8364  002516  0100               	movlb	0	; () banked
  8365  002518  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8366  00251A  0100               	movlb	0	; () banked
  8367  00251C  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8368  00251E  B4D8               	btfsc	status,2,c
  8369  002520  D011               	goto	l2553
  8370  002522  D7E1               	goto	l2545
  8371  002524                     l2549:
  8372                           
  8373                           ; BSR set to: 0
  8374  002524  0100               	movlb	0	; () banked
  8375  002526  2B63               	incf	___ftpack@exp& (0+255),f,b
  8376                           
  8377                           ; BSR set to: 0
  8378  002528  0E01               	movlw	1
  8379  00252A  0100               	movlb	0	; () banked
  8380  00252C  2760               	addwf	___ftpack@arg& (0+255),f,b
  8381  00252E  0E00               	movlw	0
  8382  002530  0100               	movlb	0	; () banked
  8383  002532  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8384  002534  0E00               	movlw	0
  8385  002536  0100               	movlb	0	; () banked
  8386  002538  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8387  00253A  0100               	movlb	0	; () banked
  8388  00253C  90D8               	bcf	status,0,c
  8389  00253E  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8390  002540  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8391  002542  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8392  002544                     l2553:
  8393                           
  8394                           ; BSR set to: 0
  8395  002544  0E00               	movlw	0
  8396  002546  0100               	movlb	0	; () banked
  8397  002548  1560               	andwf	___ftpack@arg& (0+255),w,b
  8398  00254A  0100               	movlb	0	; () banked
  8399  00254C  6F65               	movwf	??___ftpack& (0+255),b
  8400  00254E  0E00               	movlw	0
  8401  002550  0100               	movlb	0	; () banked
  8402  002552  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8403  002554  0100               	movlb	0	; () banked
  8404  002556  6F66               	movwf	(??___ftpack+1)& (0+255),b
  8405  002558  0EFF               	movlw	255
  8406  00255A  0100               	movlb	0	; () banked
  8407  00255C  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8408  00255E  0100               	movlb	0	; () banked
  8409  002560  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8410  002562  0100               	movlb	0	; () banked
  8411  002564  5165               	movf	??___ftpack& (0+255),w,b
  8412  002566  0100               	movlb	0	; () banked
  8413  002568  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8414  00256A  0100               	movlb	0	; () banked
  8415  00256C  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8416  00256E  B4D8               	btfsc	status,2,c
  8417  002570  D008               	goto	l2557
  8418  002572  D7D8               	goto	l2549
  8419  002574                     l2555:
  8420                           
  8421                           ; BSR set to: 0
  8422  002574  0100               	movlb	0	; () banked
  8423  002576  0763               	decf	___ftpack@exp& (0+255),f,b
  8424  002578  0100               	movlb	0	; () banked
  8425  00257A  90D8               	bcf	status,0,c
  8426  00257C  3760               	rlcf	___ftpack@arg& (0+255),f,b
  8427  00257E  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8428  002580  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8429  002582                     l2557:
  8430                           
  8431                           ; BSR set to: 0
  8432  002582  0100               	movlb	0	; () banked
  8433  002584  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8434  002586  D004               	goto	l574
  8435                           
  8436                           ; BSR set to: 0
  8437  002588  0E02               	movlw	2
  8438  00258A  0100               	movlb	0	; () banked
  8439  00258C  6163               	cpfslt	___ftpack@exp& (0+255),b
  8440  00258E  D7F2               	goto	l2555
  8441  002590                     l574:
  8442                           
  8443                           ; BSR set to: 0
  8444  002590  0100               	movlb	0	; () banked
  8445  002592  B163               	btfsc	___ftpack@exp& (0+255),0,b
  8446  002594  D002               	goto	l2563
  8447                           
  8448                           ; BSR set to: 0
  8449  002596  0100               	movlb	0	; () banked
  8450  002598  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8451  00259A                     l2563:
  8452                           
  8453                           ; BSR set to: 0
  8454  00259A  0100               	movlb	0	; () banked
  8455  00259C  90D8               	bcf	status,0,c
  8456  00259E  3363               	rrcf	___ftpack@exp& (0+255),f,b
  8457  0025A0  0100               	movlb	0	; () banked
  8458  0025A2  5163               	movf	___ftpack@exp& (0+255),w,b
  8459  0025A4  0100               	movlb	0	; () banked
  8460  0025A6  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8461                           
  8462                           ; BSR set to: 0
  8463  0025A8  0100               	movlb	0	; () banked
  8464  0025AA  5164               	movf	___ftpack@sign& (0+255),w,b
  8465  0025AC  0100               	movlb	0	; () banked
  8466  0025AE  B4D8               	btfsc	status,2,c
  8467  0025B0  D002               	goto	l2569
  8468                           
  8469                           ; BSR set to: 0
  8470  0025B2  0100               	movlb	0	; () banked
  8471  0025B4  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8472  0025B6                     l2569:
  8473                           
  8474                           ; BSR set to: 0
  8475  0025B6  C060  F060         	movff	___ftpack@arg,?___ftpack
  8476  0025BA  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  8477  0025BE  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  8478  0025C2  0012               	return	
  8479  0025C4                     __end_of___ftpack:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon2	equ	0xFF1
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           plusw1	equ	0xFE3
  8492                           fsr1l	equ	0xFE1
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           plusw2	equ	0xFDB
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function ___ftneg *****************
  8502 ;; Defined at:
  8503 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  f1              3    0[BANK0 ] float 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  3    0[BANK0 ] float 
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8517 ;;      Params:         0       3       0       0       0       0       0       0       0
  8518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8520 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        3 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    3
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_sprintf
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text19
  8532  002F7A                     __ptext19:
  8533                           	opt stack 0
  8534  002F7A                     ___ftneg:
  8535                           	opt stack 26
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;incstack = 0
  8539  002F7A  0100               	movlb	0	; () banked
  8540  002F7C  5160               	movf	___ftneg@f1& (0+255),w,b
  8541  002F7E  0100               	movlb	0	; () banked
  8542  002F80  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8543  002F82  0100               	movlb	0	; () banked
  8544  002F84  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8545  002F86  B4D8               	btfsc	status,2,c
  8546  002F88  D009               	goto	l671
  8547                           
  8548                           ; BSR set to: 0
  8549  002F8A  0E00               	movlw	0
  8550  002F8C  0100               	movlb	0	; () banked
  8551  002F8E  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  8552  002F90  0E00               	movlw	0
  8553  002F92  0100               	movlb	0	; () banked
  8554  002F94  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8555  002F96  0E80               	movlw	128
  8556  002F98  0100               	movlb	0	; () banked
  8557  002F9A  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8558  002F9C                     l671:
  8559                           
  8560                           ; BSR set to: 0
  8561  002F9C  C060  F060         	movff	___ftneg@f1,?___ftneg
  8562  002FA0  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  8563  002FA4  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  8564                           
  8565                           ; BSR set to: 0
  8566  002FA8  0012               	return		;funcret
  8567  002FAA                     __end_of___ftneg:
  8568                           	opt stack 0
  8569                           tblptru	equ	0xFF8
  8570                           tblptrh	equ	0xFF7
  8571                           tblptrl	equ	0xFF6
  8572                           tablat	equ	0xFF5
  8573                           prodh	equ	0xFF4
  8574                           prodl	equ	0xFF3
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           postdec1	equ	0xFE5
  8579                           plusw1	equ	0xFE3
  8580                           fsr1l	equ	0xFE1
  8581                           indf2	equ	0xFDF
  8582                           postinc2	equ	0xFDE
  8583                           postdec2	equ	0xFDD
  8584                           plusw2	equ	0xFDB
  8585                           fsr2h	equ	0xFDA
  8586                           fsr2l	equ	0xFD9
  8587                           status	equ	0xFD8
  8588                           
  8589 ;; *************** function ___ftge *****************
  8590 ;; Defined at:
  8591 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  ff1             3    0[BANK0 ] float 
  8594 ;;  ff2             3    3[BANK0 ] float 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8606 ;;      Params:         0       6       0       0       0       0       0       0       0
  8607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8608 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8609 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8610 ;;Total ram usage:        9 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    3
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_main
  8617 ;;		_sprintf
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text20
  8622  00279E                     __ptext20:
  8623                           	opt stack 0
  8624  00279E                     ___ftge:
  8625                           	opt stack 26
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;incstack = 0
  8629  00279E  0100               	movlb	0	; () banked
  8630  0027A0  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8631  0027A2  D01D               	goto	l3033
  8632                           
  8633                           ; BSR set to: 0
  8634  0027A4  C060  F066         	movff	___ftge@ff1,??___ftge
  8635  0027A8  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  8636  0027AC  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  8637  0027B0  0100               	movlb	0	; () banked
  8638  0027B2  1F66               	comf	??___ftge& (0+255),f,b
  8639  0027B4  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8640  0027B6  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8641  0027B8  2B66               	incf	??___ftge& (0+255),f,b
  8642  0027BA  0E00               	movlw	0
  8643  0027BC  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8644  0027BE  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8645  0027C0  0E00               	movlw	0
  8646  0027C2  0100               	movlb	0	; () banked
  8647  0027C4  2566               	addwf	??___ftge& (0+255),w,b
  8648  0027C6  0100               	movlb	0	; () banked
  8649  0027C8  6F60               	movwf	___ftge@ff1& (0+255),b
  8650  0027CA  0E00               	movlw	0
  8651  0027CC  0100               	movlb	0	; () banked
  8652  0027CE  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8653  0027D0  0100               	movlb	0	; () banked
  8654  0027D2  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8655  0027D4  0E80               	movlw	128
  8656  0027D6  0100               	movlb	0	; () banked
  8657  0027D8  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8658  0027DA  0100               	movlb	0	; () banked
  8659  0027DC  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8660  0027DE                     l3033:
  8661                           
  8662                           ; BSR set to: 0
  8663  0027DE  0100               	movlb	0	; () banked
  8664  0027E0  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8665  0027E2  D01D               	goto	l3037
  8666                           
  8667                           ; BSR set to: 0
  8668  0027E4  C063  F066         	movff	___ftge@ff2,??___ftge
  8669  0027E8  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  8670  0027EC  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  8671  0027F0  0100               	movlb	0	; () banked
  8672  0027F2  1F66               	comf	??___ftge& (0+255),f,b
  8673  0027F4  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8674  0027F6  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8675  0027F8  2B66               	incf	??___ftge& (0+255),f,b
  8676  0027FA  0E00               	movlw	0
  8677  0027FC  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8678  0027FE  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8679  002800  0E00               	movlw	0
  8680  002802  0100               	movlb	0	; () banked
  8681  002804  2566               	addwf	??___ftge& (0+255),w,b
  8682  002806  0100               	movlb	0	; () banked
  8683  002808  6F63               	movwf	___ftge@ff2& (0+255),b
  8684  00280A  0E00               	movlw	0
  8685  00280C  0100               	movlb	0	; () banked
  8686  00280E  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8687  002810  0100               	movlb	0	; () banked
  8688  002812  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8689  002814  0E80               	movlw	128
  8690  002816  0100               	movlb	0	; () banked
  8691  002818  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8692  00281A  0100               	movlb	0	; () banked
  8693  00281C  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8694  00281E                     l3037:
  8695                           
  8696                           ; BSR set to: 0
  8697  00281E  0E00               	movlw	0
  8698  002820  0100               	movlb	0	; () banked
  8699  002822  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  8700  002824  0E00               	movlw	0
  8701  002826  0100               	movlb	0	; () banked
  8702  002828  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8703  00282A  0E80               	movlw	128
  8704  00282C  0100               	movlb	0	; () banked
  8705  00282E  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8706                           
  8707                           ; BSR set to: 0
  8708  002830  0E00               	movlw	0
  8709  002832  0100               	movlb	0	; () banked
  8710  002834  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  8711  002836  0E00               	movlw	0
  8712  002838  0100               	movlb	0	; () banked
  8713  00283A  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8714  00283C  0E80               	movlw	128
  8715  00283E  0100               	movlb	0	; () banked
  8716  002840  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8717  002842  0100               	movlb	0	; () banked
  8718  002844  5163               	movf	___ftge@ff2& (0+255),w,b
  8719  002846  0100               	movlb	0	; () banked
  8720  002848  5D60               	subwf	___ftge@ff1& (0+255),w,b
  8721  00284A  0100               	movlb	0	; () banked
  8722  00284C  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  8723  00284E  0100               	movlb	0	; () banked
  8724  002850  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8725  002852  0100               	movlb	0	; () banked
  8726  002854  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  8727  002856  0100               	movlb	0	; () banked
  8728  002858  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8729  00285A  B0D8               	btfsc	status,0,c
  8730  00285C  D002               	goto	l3043
  8731                           
  8732                           ; BSR set to: 0
  8733  00285E  90D8               	bcf	status,0,c
  8734  002860  0012               	return	
  8735  002862                     l3043:
  8736                           
  8737                           ; BSR set to: 0
  8738  002862  80D8               	bsf	status,0,c
  8739                           
  8740                           ; BSR set to: 0
  8741  002864  0012               	return	
  8742  002866                     __end_of___ftge:
  8743                           	opt stack 0
  8744                           tblptru	equ	0xFF8
  8745                           tblptrh	equ	0xFF7
  8746                           tblptrl	equ	0xFF6
  8747                           tablat	equ	0xFF5
  8748                           prodh	equ	0xFF4
  8749                           prodl	equ	0xFF3
  8750                           intcon2	equ	0xFF1
  8751                           postinc0	equ	0xFEE
  8752                           wreg	equ	0xFE8
  8753                           postdec1	equ	0xFE5
  8754                           plusw1	equ	0xFE3
  8755                           fsr1l	equ	0xFE1
  8756                           indf2	equ	0xFDF
  8757                           postinc2	equ	0xFDE
  8758                           postdec2	equ	0xFDD
  8759                           plusw2	equ	0xFDB
  8760                           fsr2h	equ	0xFDA
  8761                           fsr2l	equ	0xFD9
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function _memset *****************
  8765 ;; Defined at:
  8766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  p1              2    0[BANK0 ] PTR void 
  8769 ;;		 -> buffer(50), main@pass(7), 
  8770 ;;  c               2    2[BANK0 ] int 
  8771 ;;  n               2    4[BANK0 ] unsigned int 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  p               2    6[BANK0 ] PTR unsigned char 
  8774 ;;		 -> buffer(50), main@pass(7), 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  2    0[BANK0 ] PTR void 
  8777 ;; Registers used:
  8778 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8784 ;;      Params:         0       6       0       0       0       0       0       0       0
  8785 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8787 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8788 ;;Total ram usage:        8 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    3
  8791 ;; This function calls:
  8792 ;;		Nothing
  8793 ;; This function is called by:
  8794 ;;		_main
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text21
  8799  002F14                     __ptext21:
  8800                           	opt stack 0
  8801  002F14                     _memset:
  8802                           	opt stack 27
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;incstack = 0
  8806  002F14  C060  F066         	movff	memset@p1,memset@p
  8807  002F18  C061  F067         	movff	memset@p1+1,memset@p+1
  8808  002F1C  D009               	goto	l3617
  8809  002F1E                     l3613:
  8810  002F1E  C066  FFD9         	movff	memset@p,fsr2l
  8811  002F22  C067  FFDA         	movff	memset@p+1,fsr2h
  8812  002F26  C062  FFDF         	movff	memset@c,indf2
  8813  002F2A  0100               	movlb	0	; () banked
  8814  002F2C  4B66               	infsnz	memset@p& (0+255),f,b
  8815  002F2E  2B67               	incf	(memset@p+1)& (0+255),f,b
  8816  002F30                     l3617:
  8817  002F30  0100               	movlb	0	; () banked
  8818  002F32  0764               	decf	memset@n& (0+255),f,b
  8819  002F34  A0D8               	btfss	status,0,c
  8820  002F36  0765               	decf	(memset@n+1)& (0+255),f,b
  8821  002F38  0100               	movlb	0	; () banked
  8822  002F3A  2964               	incf	memset@n& (0+255),w,b
  8823  002F3C  E1F0               	bnz	l3613
  8824  002F3E  0100               	movlb	0	; () banked
  8825  002F40  2965               	incf	(memset@n+1)& (0+255),w,b
  8826  002F42  B4D8               	btfsc	status,2,c
  8827  002F44  0012               	return	
  8828  002F46  D7EB               	goto	l3613
  8829  002F48                     __end_of_memset:
  8830                           	opt stack 0
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon2	equ	0xFF1
  8838                           postinc0	equ	0xFEE
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           plusw1	equ	0xFE3
  8842                           fsr1l	equ	0xFE1
  8843                           indf2	equ	0xFDF
  8844                           postinc2	equ	0xFDE
  8845                           postdec2	equ	0xFDD
  8846                           plusw2	equ	0xFDB
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function _keyfind *****************
  8852 ;; Defined at:
  8853 ;;		line 396 in file "newmain.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;		None
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      unsigned char 
  8860 ;; Registers used:
  8861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8867 ;;      Params:         0       0       0       0       0       0       0       0       0
  8868 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8870 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8871 ;;Total ram usage:        0 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    4
  8874 ;; This function calls:
  8875 ;;		_MSdelay
  8876 ;; This function is called by:
  8877 ;;		_main
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	text22
  8882  002256                     __ptext22:
  8883                           	opt stack 0
  8884  002256                     _keyfind:
  8885                           	opt stack 26
  8886                           
  8887                           ;newmain.c: 398: TRISB = 0xf0;
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;incstack = 0
  8891  002256  0EF0               	movlw	240
  8892  002258  6E93               	movwf	3987,c	;volatile
  8893  00225A                     l175:
  8894                           
  8895                           ;newmain.c: 402: {
  8896                           ;newmain.c: 403: LATB = 0xfe;
  8897  00225A  0EFE               	movlw	254
  8898  00225C  6E8A               	movwf	3978,c	;volatile
  8899                           
  8900                           ;newmain.c: 404: col_loc = PORTB & 0xf0;
  8901  00225E  5081               	movf	3969,w,c	;volatile
  8902  002260  0BF0               	andlw	240
  8903  002262  0100               	movlb	0	; () banked
  8904  002264  6FF0               	movwf	_col_loc& (0+255),b
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;newmain.c: 405: temp_col=col_loc;
  8908  002266  C0F0  F0F2         	movff	_col_loc,_temp_col
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;newmain.c: 406: if(col_loc!=0xf0)
  8912  00226A  0EF0               	movlw	240
  8913  00226C  0100               	movlb	0	; () banked
  8914  00226E  19F0               	xorwf	_col_loc& (0+255),w,b
  8915  002270  B4D8               	btfsc	status,2,c
  8916  002272  D00E               	goto	l3231
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;newmain.c: 407: {
  8920                           ;newmain.c: 408: rowloc=0;
  8921  002274  0E00               	movlw	0
  8922  002276  0100               	movlb	0	; () banked
  8923  002278  6FF1               	movwf	_rowloc& (0+255),b
  8924                           
  8925                           ;newmain.c: 409: while(temp_col!=0xf0)
  8926  00227A  D004               	goto	l177
  8927  00227C                     l3229:
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;newmain.c: 410: {
  8931                           ;newmain.c: 411: temp_col = PORTB & 0xf0;
  8932  00227C  5081               	movf	3969,w,c	;volatile
  8933  00227E  0BF0               	andlw	240
  8934  002280  0100               	movlb	0	; () banked
  8935  002282  6FF2               	movwf	_temp_col& (0+255),b
  8936  002284                     l177:
  8937                           
  8938                           ; BSR set to: 0
  8939  002284  0EF0               	movlw	240
  8940  002286  0100               	movlb	0	; () banked
  8941  002288  19F2               	xorwf	_temp_col& (0+255),w,b
  8942  00228A  B4D8               	btfsc	status,2,c
  8943  00228C  D051               	goto	l3267
  8944  00228E  D7F6               	goto	l3229
  8945  002290                     l3231:
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;newmain.c: 414: }
  8949                           ;newmain.c: 416: LATB = 0xfd;
  8950  002290  0EFD               	movlw	253
  8951  002292  6E8A               	movwf	3978,c	;volatile
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;newmain.c: 417: col_loc = PORTB & 0xf0;
  8955  002294  5081               	movf	3969,w,c	;volatile
  8956  002296  0BF0               	andlw	240
  8957  002298  0100               	movlb	0	; () banked
  8958  00229A  6FF0               	movwf	_col_loc& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;newmain.c: 418: temp_col=col_loc;
  8962  00229C  C0F0  F0F2         	movff	_col_loc,_temp_col
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;newmain.c: 419: if(col_loc!=0xf0)
  8966  0022A0  0EF0               	movlw	240
  8967  0022A2  0100               	movlb	0	; () banked
  8968  0022A4  19F0               	xorwf	_col_loc& (0+255),w,b
  8969  0022A6  B4D8               	btfsc	status,2,c
  8970  0022A8  D00E               	goto	l3243
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;newmain.c: 420: {
  8974                           ;newmain.c: 421: rowloc=1;
  8975  0022AA  0E01               	movlw	1
  8976  0022AC  0100               	movlb	0	; () banked
  8977  0022AE  6FF1               	movwf	_rowloc& (0+255),b
  8978                           
  8979                           ;newmain.c: 422: while(temp_col!=0xf0)
  8980  0022B0  D004               	goto	l182
  8981  0022B2                     l3241:
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;newmain.c: 423: {
  8985                           ;newmain.c: 424: temp_col = PORTB & 0xf0;
  8986  0022B2  5081               	movf	3969,w,c	;volatile
  8987  0022B4  0BF0               	andlw	240
  8988  0022B6  0100               	movlb	0	; () banked
  8989  0022B8  6FF2               	movwf	_temp_col& (0+255),b
  8990  0022BA                     l182:
  8991                           
  8992                           ; BSR set to: 0
  8993  0022BA  0EF0               	movlw	240
  8994  0022BC  0100               	movlb	0	; () banked
  8995  0022BE  19F2               	xorwf	_temp_col& (0+255),w,b
  8996  0022C0  B4D8               	btfsc	status,2,c
  8997  0022C2  D036               	goto	l3267
  8998  0022C4  D7F6               	goto	l3241
  8999  0022C6                     l3243:
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;newmain.c: 427: }
  9003                           ;newmain.c: 429: LATB = 0xfb;
  9004  0022C6  0EFB               	movlw	251
  9005  0022C8  6E8A               	movwf	3978,c	;volatile
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;newmain.c: 430: col_loc = PORTB & 0xf0;
  9009  0022CA  5081               	movf	3969,w,c	;volatile
  9010  0022CC  0BF0               	andlw	240
  9011  0022CE  0100               	movlb	0	; () banked
  9012  0022D0  6FF0               	movwf	_col_loc& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;newmain.c: 431: temp_col=col_loc;
  9016  0022D2  C0F0  F0F2         	movff	_col_loc,_temp_col
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;newmain.c: 432: if(col_loc!=0xf0)
  9020  0022D6  0EF0               	movlw	240
  9021  0022D8  0100               	movlb	0	; () banked
  9022  0022DA  19F0               	xorwf	_col_loc& (0+255),w,b
  9023  0022DC  B4D8               	btfsc	status,2,c
  9024  0022DE  D00E               	goto	l3255
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;newmain.c: 433: {
  9028                           ;newmain.c: 434: rowloc=2;
  9029  0022E0  0E02               	movlw	2
  9030  0022E2  0100               	movlb	0	; () banked
  9031  0022E4  6FF1               	movwf	_rowloc& (0+255),b
  9032                           
  9033                           ;newmain.c: 435: while(temp_col!=0xf0)
  9034  0022E6  D004               	goto	l186
  9035  0022E8                     l3253:
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;newmain.c: 436: {
  9039                           ;newmain.c: 437: temp_col = PORTB & 0xf0;
  9040  0022E8  5081               	movf	3969,w,c	;volatile
  9041  0022EA  0BF0               	andlw	240
  9042  0022EC  0100               	movlb	0	; () banked
  9043  0022EE  6FF2               	movwf	_temp_col& (0+255),b
  9044  0022F0                     l186:
  9045                           
  9046                           ; BSR set to: 0
  9047  0022F0  0EF0               	movlw	240
  9048  0022F2  0100               	movlb	0	; () banked
  9049  0022F4  19F2               	xorwf	_temp_col& (0+255),w,b
  9050  0022F6  B4D8               	btfsc	status,2,c
  9051  0022F8  D01B               	goto	l3267
  9052  0022FA  D7F6               	goto	l3253
  9053  0022FC                     l3255:
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;newmain.c: 440: }
  9057                           ;newmain.c: 442: LATB = 0xf7;
  9058  0022FC  0EF7               	movlw	247
  9059  0022FE  6E8A               	movwf	3978,c	;volatile
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;newmain.c: 443: col_loc = PORTB & 0xf0;
  9063  002300  5081               	movf	3969,w,c	;volatile
  9064  002302  0BF0               	andlw	240
  9065  002304  0100               	movlb	0	; () banked
  9066  002306  6FF0               	movwf	_col_loc& (0+255),b
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;newmain.c: 444: temp_col=col_loc;
  9070  002308  C0F0  F0F2         	movff	_col_loc,_temp_col
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;newmain.c: 445: if(col_loc!=0xf0)
  9074  00230C  0EF0               	movlw	240
  9075  00230E  0100               	movlb	0	; () banked
  9076  002310  19F0               	xorwf	_col_loc& (0+255),w,b
  9077  002312  B4D8               	btfsc	status,2,c
  9078  002314  D7A2               	goto	l175
  9079                           
  9080                           ; BSR set to: 0
  9081                           ;newmain.c: 446: {
  9082                           ;newmain.c: 447: rowloc=3;
  9083  002316  0E03               	movlw	3
  9084  002318  0100               	movlb	0	; () banked
  9085  00231A  6FF1               	movwf	_rowloc& (0+255),b
  9086                           
  9087                           ;newmain.c: 448: while(temp_col!=0xf0)
  9088  00231C  D004               	goto	l190
  9089  00231E                     l3265:
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;newmain.c: 449: {
  9093                           ;newmain.c: 450: temp_col = PORTB & 0xf0;
  9094  00231E  5081               	movf	3969,w,c	;volatile
  9095  002320  0BF0               	andlw	240
  9096  002322  0100               	movlb	0	; () banked
  9097  002324  6FF2               	movwf	_temp_col& (0+255),b
  9098  002326                     l190:
  9099                           
  9100                           ; BSR set to: 0
  9101  002326  0EF0               	movlw	240
  9102  002328  0100               	movlb	0	; () banked
  9103  00232A  19F2               	xorwf	_temp_col& (0+255),w,b
  9104  00232C  A4D8               	btfss	status,2,c
  9105  00232E  D7F7               	goto	l3265
  9106  002330                     l3267:
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;newmain.c: 459: {
  9110                           ;newmain.c: 460: if(col_loc==0xe0)
  9111  002330  0EE0               	movlw	224
  9112  002332  0100               	movlb	0	; () banked
  9113  002334  19F0               	xorwf	_col_loc& (0+255),w,b
  9114  002336  A4D8               	btfss	status,2,c
  9115  002338  D00B               	goto	l3275
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;newmain.c: 461: {
  9119                           ;newmain.c: 462: return keypad[rowloc][0];
  9120  00233A  0100               	movlb	0	; () banked
  9121  00233C  51F1               	movf	_rowloc& (0+255),w,b
  9122  00233E  0D04               	mullw	4
  9123  002340                     L6:
  9124  002340  0E46               	movlw	low _keypad
  9125  002342  24F3               	addwf	prodl,w,c
  9126  002344  6ED9               	movwf	fsr2l,c
  9127  002346  0E00               	movlw	high _keypad
  9128  002348  20F4               	addwfc	prodh,w,c
  9129  00234A  6EDA               	movwf	fsr2h,c
  9130  00234C  50DF               	movf	indf2,w,c
  9131                           
  9132                           ; BSR set to: 0
  9133  00234E  0012               	return	
  9134  002350                     l3275:
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;newmain.c: 464: else
  9138                           ;newmain.c: 465: if(col_loc==0xd0)
  9139  002350  0ED0               	movlw	208
  9140  002352  0100               	movlb	0	; () banked
  9141  002354  19F0               	xorwf	_col_loc& (0+255),w,b
  9142  002356  A4D8               	btfss	status,2,c
  9143  002358  D005               	goto	l3283
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;newmain.c: 466: {
  9147                           ;newmain.c: 467: return keypad[rowloc][1];
  9148  00235A  0100               	movlb	0	; () banked
  9149  00235C  51F1               	movf	_rowloc& (0+255),w,b
  9150  00235E  0D04               	mullw	4
  9151  002360  0E01               	movlw	1
  9152  002362  D013               	goto	L8
  9153  002364                     l3283:
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;newmain.c: 469: else
  9157                           ;newmain.c: 470: if(col_loc==0xb0)
  9158  002364  0EB0               	movlw	176
  9159  002366  0100               	movlb	0	; () banked
  9160  002368  19F0               	xorwf	_col_loc& (0+255),w,b
  9161  00236A  A4D8               	btfss	status,2,c
  9162  00236C  D005               	goto	l3291
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;newmain.c: 471: {
  9166                           ;newmain.c: 472: return keypad[rowloc][2];
  9167  00236E  0100               	movlb	0	; () banked
  9168  002370  51F1               	movf	_rowloc& (0+255),w,b
  9169  002372  0D04               	mullw	4
  9170  002374  0E02               	movlw	2
  9171  002376  D009               	goto	L8
  9172  002378                     l3291:
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;newmain.c: 474: else
  9176                           ;newmain.c: 475: if(col_loc==0x70)
  9177  002378  0E70               	movlw	112
  9178  00237A  0100               	movlb	0	; () banked
  9179  00237C  19F0               	xorwf	_col_loc& (0+255),w,b
  9180  00237E  A4D8               	btfss	status,2,c
  9181  002380  D7D7               	goto	l3267
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;newmain.c: 476: {
  9185                           ;newmain.c: 477: return keypad[rowloc][3];
  9186  002382  0100               	movlb	0	; () banked
  9187  002384  51F1               	movf	_rowloc& (0+255),w,b
  9188  002386  0D04               	mullw	4
  9189  002388  0E03               	movlw	3
  9190  00238A                     L8:
  9191  00238A  26F3               	addwf	prodl,f,c
  9192  00238C  0E00               	movlw	0
  9193  00238E  22F4               	addwfc	prodh,f,c
  9194  002390  D7D7               	goto	L6
  9195  002392                     __end_of_keyfind:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon2	equ	0xFF1
  9204                           postinc0	equ	0xFEE
  9205                           wreg	equ	0xFE8
  9206                           postdec1	equ	0xFE5
  9207                           plusw1	equ	0xFE3
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           plusw2	equ	0xFDB
  9213                           fsr2h	equ	0xFDA
  9214                           fsr2l	equ	0xFD9
  9215                           status	equ	0xFD8
  9216                           
  9217 ;; *************** function _LCD_String *****************
  9218 ;; Defined at:
  9219 ;;		line 371 in file "newmain.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  msg             2    8[BANK0 ] PTR const unsigned char 
  9222 ;;		 -> STR_18(17), STR_17(17), STR_16(21), STR_15(17), 
  9223 ;;		 -> STR_14(21), STR_13(17), STR_12(24), STR_11(20), 
  9224 ;;		 -> STR_10(31), STR_9(30), STR_8(21), STR_7(22), 
  9225 ;;		 -> STR_6(28), STR_5(26), STR_4(25), buffer(50), 
  9226 ;;		 -> STR_2(26), STR_1(26), 
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;		None
  9229 ;; Return value:  Size  Location     Type
  9230 ;;                  1    wreg      void 
  9231 ;; Registers used:
  9232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9238 ;;      Params:         0       2       0       0       0       0       0       0       0
  9239 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9240 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9241 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9242 ;;Total ram usage:        2 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    5
  9245 ;; This function calls:
  9246 ;;		_LCD_Char
  9247 ;; This function is called by:
  9248 ;;		_main
  9249 ;; This function uses a non-reentrant model
  9250 ;;
  9251                           
  9252                           	psect	text23
  9253  002DBC                     __ptext23:
  9254                           	opt stack 0
  9255  002DBC                     _LCD_String:
  9256                           	opt stack 25
  9257                           
  9258                           ;newmain.c: 373: while((*msg)!=0)
  9259                           
  9260                           ;incstack = 0
  9261  002DBC  D015               	goto	l3217
  9262  002DBE                     l3213:
  9263                           
  9264                           ;newmain.c: 374: {
  9265                           ;newmain.c: 375: LCD_Char(*msg);
  9266  002DBE  C068  FFF6         	movff	LCD_String@msg,tblptrl
  9267  002DC2  C069  FFF7         	movff	LCD_String@msg+1,tblptrh
  9268  002DC6  6AF8               	clrf	tblptru,c
  9269  002DC8  0E07               	movlw	(high __ramtop+-1)
  9270  002DCA  64F7               	cpfsgt	tblptrh,c
  9271  002DCC  D003               	bra	u3347
  9272  002DCE  0008               	tblrd		*
  9273  002DD0  50F5               	movf	tablat,w,c
  9274  002DD2  D005               	bra	u3340
  9275  002DD4                     u3347:
  9276  002DD4  CFF6 FFE9          	movff	tblptrl,fsr0l
  9277  002DD8  CFF7 FFEA          	movff	tblptrh,fsr0h
  9278  002DDC  50EF               	movf	indf0,w,c
  9279  002DDE                     u3340:
  9280  002DDE  EC59  F016         	call	_LCD_Char
  9281                           
  9282                           ;newmain.c: 376: msg++;
  9283  002DE2  0100               	movlb	0	; () banked
  9284  002DE4  4B68               	infsnz	LCD_String@msg& (0+255),f,b
  9285  002DE6  2B69               	incf	(LCD_String@msg+1)& (0+255),f,b
  9286  002DE8                     l3217:
  9287  002DE8  C068  FFF6         	movff	LCD_String@msg,tblptrl
  9288  002DEC  C069  FFF7         	movff	LCD_String@msg+1,tblptrh
  9289  002DF0  6AF8               	clrf	tblptru,c
  9290  002DF2  0E07               	movlw	(high __ramtop+-1)
  9291  002DF4  64F7               	cpfsgt	tblptrh,c
  9292  002DF6  D003               	bra	u3357
  9293  002DF8  0008               	tblrd		*
  9294  002DFA  50F5               	movf	tablat,w,c
  9295  002DFC  D005               	bra	u3350
  9296  002DFE                     u3357:
  9297  002DFE  CFF6 FFE9          	movff	tblptrl,fsr0l
  9298  002E02  CFF7 FFEA          	movff	tblptrh,fsr0h
  9299  002E06  50EF               	movf	indf0,w,c
  9300  002E08                     u3350:
  9301  002E08  0900               	iorlw	0
  9302  002E0A  B4D8               	btfsc	status,2,c
  9303  002E0C  0012               	return	
  9304  002E0E  D7D7               	goto	l3213
  9305  002E10                     __end_of_LCD_String:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon2	equ	0xFF1
  9314                           indf0	equ	0xFEF
  9315                           postinc0	equ	0xFEE
  9316                           fsr0h	equ	0xFEA
  9317                           fsr0l	equ	0xFE9
  9318                           wreg	equ	0xFE8
  9319                           postdec1	equ	0xFE5
  9320                           plusw1	equ	0xFE3
  9321                           fsr1l	equ	0xFE1
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           plusw2	equ	0xFDB
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function _LCD_Char *****************
  9331 ;; Defined at:
  9332 ;;		line 355 in file "newmain.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;  dat             1    wreg     unsigned char 
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  dat             1    7[BANK0 ] unsigned char 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0
  9347 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9348 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9349 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9350 ;;Total ram usage:        2 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    4
  9353 ;; This function calls:
  9354 ;;		_MSdelay
  9355 ;; This function is called by:
  9356 ;;		_main
  9357 ;;		_LCD_String
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text24
  9362  002CB2                     __ptext24:
  9363                           	opt stack 0
  9364  002CB2                     _LCD_Char:
  9365                           	opt stack 25
  9366                           
  9367                           ;incstack = 0
  9368                           ;LCD_Char@dat stored from wreg
  9369  002CB2  0100               	movlb	0	; () banked
  9370  002CB4  6F67               	movwf	LCD_Char@dat& (0+255),b
  9371                           
  9372                           ;newmain.c: 357: LATD = (LATD & 0x0f) | (0xF0 & dat);
  9373  002CB6  C067  F066         	movff	LCD_Char@dat,??_LCD_Char
  9374  002CBA  0EF0               	movlw	240
  9375  002CBC  0100               	movlb	0	; () banked
  9376  002CBE  1766               	andwf	??_LCD_Char& (0+255),f,b
  9377  002CC0  508C               	movf	3980,w,c	;volatile
  9378  002CC2  0B0F               	andlw	15
  9379  002CC4  0100               	movlb	0	; () banked
  9380  002CC6  1166               	iorwf	??_LCD_Char& (0+255),w,b
  9381  002CC8  6E8C               	movwf	3980,c	;volatile
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;newmain.c: 358: LATD0 = 1;
  9385  002CCA  808C               	bsf	3980,0,c	;volatile
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;newmain.c: 359: LATD1 = 1;
  9389  002CCC  828C               	bsf	3980,1,c	;volatile
  9390                           
  9391                           ; BSR set to: 0
  9392                           ;newmain.c: 360: __nop();
  9393  002CCE  F000               	nop	
  9394                           
  9395                           ;newmain.c: 361: LATD1 = 0;
  9396  002CD0  928C               	bcf	3980,1,c	;volatile
  9397                           
  9398                           ;newmain.c: 362: MSdelay(1);
  9399  002CD2  0E00               	movlw	0
  9400  002CD4  0100               	movlb	0	; () banked
  9401  002CD6  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9402  002CD8  0E01               	movlw	1
  9403  002CDA  6F60               	movwf	MSdelay@val& (0+255),b
  9404  002CDC  EC2E  F017         	call	_MSdelay	;wreg free
  9405                           
  9406                           ;newmain.c: 363: LATD = (LATD & 0x0f) | (dat<<4);
  9407  002CE0  C067  F066         	movff	LCD_Char@dat,??_LCD_Char
  9408  002CE4  0100               	movlb	0	; () banked
  9409  002CE6  3B66               	swapf	??_LCD_Char& (0+255),f,b
  9410  002CE8  0EF0               	movlw	240
  9411  002CEA  1766               	andwf	??_LCD_Char& (0+255),f,b
  9412  002CEC  508C               	movf	3980,w,c	;volatile
  9413  002CEE  0B0F               	andlw	15
  9414  002CF0  0100               	movlb	0	; () banked
  9415  002CF2  1166               	iorwf	??_LCD_Char& (0+255),w,b
  9416  002CF4  6E8C               	movwf	3980,c	;volatile
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;newmain.c: 364: LATD1 = 1;
  9420  002CF6  828C               	bsf	3980,1,c	;volatile
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;newmain.c: 365: __nop();
  9424  002CF8  F000               	nop	
  9425                           
  9426                           ;newmain.c: 366: LATD1 = 0;
  9427  002CFA  928C               	bcf	3980,1,c	;volatile
  9428                           
  9429                           ;newmain.c: 367: MSdelay(3);
  9430  002CFC  0E00               	movlw	0
  9431  002CFE  0100               	movlb	0	; () banked
  9432  002D00  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9433  002D02  0E03               	movlw	3
  9434  002D04  6F60               	movwf	MSdelay@val& (0+255),b
  9435  002D06  EC2E  F017         	call	_MSdelay	;wreg free
  9436  002D0A  0012               	return		;funcret
  9437  002D0C                     __end_of_LCD_Char:
  9438                           	opt stack 0
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           intcon2	equ	0xFF1
  9446                           indf0	equ	0xFEF
  9447                           postinc0	equ	0xFEE
  9448                           fsr0h	equ	0xFEA
  9449                           fsr0l	equ	0xFE9
  9450                           wreg	equ	0xFE8
  9451                           postdec1	equ	0xFE5
  9452                           plusw1	equ	0xFE3
  9453                           fsr1l	equ	0xFE1
  9454                           indf2	equ	0xFDF
  9455                           postinc2	equ	0xFDE
  9456                           postdec2	equ	0xFDD
  9457                           plusw2	equ	0xFDB
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function _LCD_Init *****************
  9463 ;; Defined at:
  9464 ;;		line 327 in file "newmain.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9481 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9482 ;;Total ram usage:        0 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    5
  9485 ;; This function calls:
  9486 ;;		_LCD_Command
  9487 ;;		_MSdelay
  9488 ;; This function is called by:
  9489 ;;		_main
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text25
  9494  002F48                     __ptext25:
  9495                           	opt stack 0
  9496  002F48                     _LCD_Init:
  9497                           	opt stack 25
  9498                           
  9499                           ;newmain.c: 329: TRISD = 0;
  9500                           
  9501                           ;incstack = 0
  9502  002F48  0E00               	movlw	0
  9503  002F4A  6E95               	movwf	3989,c	;volatile
  9504                           
  9505                           ;newmain.c: 330: MSdelay(15);
  9506  002F4C  0E00               	movlw	0
  9507  002F4E  0100               	movlb	0	; () banked
  9508  002F50  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9509  002F52  0E0F               	movlw	15
  9510  002F54  6F60               	movwf	MSdelay@val& (0+255),b
  9511  002F56  EC2E  F017         	call	_MSdelay	;wreg free
  9512                           
  9513                           ;newmain.c: 331: LCD_Command(0x02);
  9514  002F5A  0E02               	movlw	2
  9515  002F5C  EC86  F016         	call	_LCD_Command
  9516                           
  9517                           ;newmain.c: 332: LCD_Command(0x28);
  9518  002F60  0E28               	movlw	40
  9519  002F62  EC86  F016         	call	_LCD_Command
  9520                           
  9521                           ;newmain.c: 333: LCD_Command(0x01);
  9522  002F66  0E01               	movlw	1
  9523  002F68  EC86  F016         	call	_LCD_Command
  9524                           
  9525                           ;newmain.c: 334: LCD_Command(0x0c);
  9526  002F6C  0E0C               	movlw	12
  9527  002F6E  EC86  F016         	call	_LCD_Command
  9528                           
  9529                           ;newmain.c: 335: LCD_Command(0x06);
  9530  002F72  0E06               	movlw	6
  9531  002F74  EC86  F016         	call	_LCD_Command
  9532  002F78  0012               	return		;funcret
  9533  002F7A                     __end_of_LCD_Init:
  9534                           	opt stack 0
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon2	equ	0xFF1
  9542                           indf0	equ	0xFEF
  9543                           postinc0	equ	0xFEE
  9544                           fsr0h	equ	0xFEA
  9545                           fsr0l	equ	0xFE9
  9546                           wreg	equ	0xFE8
  9547                           postdec1	equ	0xFE5
  9548                           plusw1	equ	0xFE3
  9549                           fsr1l	equ	0xFE1
  9550                           indf2	equ	0xFDF
  9551                           postinc2	equ	0xFDE
  9552                           postdec2	equ	0xFDD
  9553                           plusw2	equ	0xFDB
  9554                           fsr2h	equ	0xFDA
  9555                           fsr2l	equ	0xFD9
  9556                           status	equ	0xFD8
  9557                           
  9558 ;; *************** function _LCD_Clear *****************
  9559 ;; Defined at:
  9560 ;;		line 381 in file "newmain.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;		None
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;		None
  9565 ;; Return value:  Size  Location     Type
  9566 ;;                  1    wreg      void 
  9567 ;; Registers used:
  9568 ;;		wreg, status,2, status,0, cstack
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9574 ;;      Params:         0       0       0       0       0       0       0       0       0
  9575 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9577 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9578 ;;Total ram usage:        0 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    5
  9581 ;; This function calls:
  9582 ;;		_LCD_Command
  9583 ;; This function is called by:
  9584 ;;		_main
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text26
  9589  003006                     __ptext26:
  9590                           	opt stack 0
  9591  003006                     _LCD_Clear:
  9592                           	opt stack 25
  9593                           
  9594                           ;newmain.c: 383: LCD_Command(0x01);
  9595                           
  9596                           ;incstack = 0
  9597  003006  0E01               	movlw	1
  9598  003008  EC86  F016         	call	_LCD_Command
  9599  00300C  0012               	return		;funcret
  9600  00300E                     __end_of_LCD_Clear:
  9601                           	opt stack 0
  9602                           tblptru	equ	0xFF8
  9603                           tblptrh	equ	0xFF7
  9604                           tblptrl	equ	0xFF6
  9605                           tablat	equ	0xFF5
  9606                           prodh	equ	0xFF4
  9607                           prodl	equ	0xFF3
  9608                           intcon2	equ	0xFF1
  9609                           indf0	equ	0xFEF
  9610                           postinc0	equ	0xFEE
  9611                           fsr0h	equ	0xFEA
  9612                           fsr0l	equ	0xFE9
  9613                           wreg	equ	0xFE8
  9614                           postdec1	equ	0xFE5
  9615                           plusw1	equ	0xFE3
  9616                           fsr1l	equ	0xFE1
  9617                           indf2	equ	0xFDF
  9618                           postinc2	equ	0xFDE
  9619                           postdec2	equ	0xFDD
  9620                           plusw2	equ	0xFDB
  9621                           fsr2h	equ	0xFDA
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _LCD_Command *****************
  9626 ;; Defined at:
  9627 ;;		line 339 in file "newmain.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;  cmd             1    wreg     unsigned char 
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;  cmd             1    7[BANK0 ] unsigned char 
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, status,2, status,0, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0
  9642 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9643 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9644 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9645 ;;Total ram usage:        2 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    4
  9648 ;; This function calls:
  9649 ;;		_MSdelay
  9650 ;; This function is called by:
  9651 ;;		_main
  9652 ;;		_LCD_Init
  9653 ;;		_LCD_Clear
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text27
  9658  002D0C                     __ptext27:
  9659                           	opt stack 0
  9660  002D0C                     _LCD_Command:
  9661                           	opt stack 25
  9662                           
  9663                           ;incstack = 0
  9664                           ;LCD_Command@cmd stored from wreg
  9665  002D0C  0100               	movlb	0	; () banked
  9666  002D0E  6F67               	movwf	LCD_Command@cmd& (0+255),b
  9667                           
  9668                           ;newmain.c: 341: LATD = (LATD & 0x0f) |(0xF0 & cmd);
  9669  002D10  C067  F066         	movff	LCD_Command@cmd,??_LCD_Command
  9670  002D14  0EF0               	movlw	240
  9671  002D16  0100               	movlb	0	; () banked
  9672  002D18  1766               	andwf	??_LCD_Command& (0+255),f,b
  9673  002D1A  508C               	movf	3980,w,c	;volatile
  9674  002D1C  0B0F               	andlw	15
  9675  002D1E  0100               	movlb	0	; () banked
  9676  002D20  1166               	iorwf	??_LCD_Command& (0+255),w,b
  9677  002D22  6E8C               	movwf	3980,c	;volatile
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;newmain.c: 342: LATD0 = 0;
  9681  002D24  908C               	bcf	3980,0,c	;volatile
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;newmain.c: 343: LATD1 = 1;
  9685  002D26  828C               	bsf	3980,1,c	;volatile
  9686                           
  9687                           ; BSR set to: 0
  9688                           ;newmain.c: 344: __nop();
  9689  002D28  F000               	nop	
  9690                           
  9691                           ;newmain.c: 345: LATD1 = 0;
  9692  002D2A  928C               	bcf	3980,1,c	;volatile
  9693                           
  9694                           ;newmain.c: 346: MSdelay(1);
  9695  002D2C  0E00               	movlw	0
  9696  002D2E  0100               	movlb	0	; () banked
  9697  002D30  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9698  002D32  0E01               	movlw	1
  9699  002D34  6F60               	movwf	MSdelay@val& (0+255),b
  9700  002D36  EC2E  F017         	call	_MSdelay	;wreg free
  9701                           
  9702                           ;newmain.c: 347: LATD = (LATD & 0x0f) | (cmd<<4);
  9703  002D3A  C067  F066         	movff	LCD_Command@cmd,??_LCD_Command
  9704  002D3E  0100               	movlb	0	; () banked
  9705  002D40  3B66               	swapf	??_LCD_Command& (0+255),f,b
  9706  002D42  0EF0               	movlw	240
  9707  002D44  1766               	andwf	??_LCD_Command& (0+255),f,b
  9708  002D46  508C               	movf	3980,w,c	;volatile
  9709  002D48  0B0F               	andlw	15
  9710  002D4A  0100               	movlb	0	; () banked
  9711  002D4C  1166               	iorwf	??_LCD_Command& (0+255),w,b
  9712  002D4E  6E8C               	movwf	3980,c	;volatile
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;newmain.c: 348: LATD1 = 1;
  9716  002D50  828C               	bsf	3980,1,c	;volatile
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;newmain.c: 349: __nop();
  9720  002D52  F000               	nop	
  9721                           
  9722                           ;newmain.c: 350: LATD1 = 0;
  9723  002D54  928C               	bcf	3980,1,c	;volatile
  9724                           
  9725                           ;newmain.c: 351: MSdelay(3);
  9726  002D56  0E00               	movlw	0
  9727  002D58  0100               	movlb	0	; () banked
  9728  002D5A  6F61               	movwf	(MSdelay@val+1)& (0+255),b
  9729  002D5C  0E03               	movlw	3
  9730  002D5E  6F60               	movwf	MSdelay@val& (0+255),b
  9731  002D60  EC2E  F017         	call	_MSdelay	;wreg free
  9732  002D64  0012               	return		;funcret
  9733  002D66                     __end_of_LCD_Command:
  9734                           	opt stack 0
  9735                           tblptru	equ	0xFF8
  9736                           tblptrh	equ	0xFF7
  9737                           tblptrl	equ	0xFF6
  9738                           tablat	equ	0xFF5
  9739                           prodh	equ	0xFF4
  9740                           prodl	equ	0xFF3
  9741                           intcon2	equ	0xFF1
  9742                           indf0	equ	0xFEF
  9743                           postinc0	equ	0xFEE
  9744                           fsr0h	equ	0xFEA
  9745                           fsr0l	equ	0xFE9
  9746                           wreg	equ	0xFE8
  9747                           postdec1	equ	0xFE5
  9748                           plusw1	equ	0xFE3
  9749                           fsr1l	equ	0xFE1
  9750                           indf2	equ	0xFDF
  9751                           postinc2	equ	0xFDE
  9752                           postdec2	equ	0xFDD
  9753                           plusw2	equ	0xFDB
  9754                           fsr2h	equ	0xFDA
  9755                           fsr2l	equ	0xFD9
  9756                           status	equ	0xFD8
  9757                           
  9758 ;; *************** function _MSdelay *****************
  9759 ;; Defined at:
  9760 ;;		line 387 in file "newmain.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  val             2    0[BANK0 ] unsigned int 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  j               2    4[BANK0 ] unsigned int 
  9765 ;;  i               2    2[BANK0 ] unsigned int 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1    wreg      void 
  9768 ;; Registers used:
  9769 ;;		wreg, status,2, status,0
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9775 ;;      Params:         0       2       0       0       0       0       0       0       0
  9776 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9778 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9779 ;;Total ram usage:        6 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    3
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_main
  9786 ;;		_LCD_Init
  9787 ;;		_LCD_Command
  9788 ;;		_LCD_Char
  9789 ;;		_keyfind
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text28
  9794  002E5C                     __ptext28:
  9795                           	opt stack 0
  9796  002E5C                     _MSdelay:
  9797                           	opt stack 26
  9798                           
  9799                           ;newmain.c: 389: unsigned int i,j;
  9800                           ;newmain.c: 390: for(i=0;i<=val;i++)
  9801                           
  9802                           ;incstack = 0
  9803  002E5C  0E00               	movlw	0
  9804  002E5E  0100               	movlb	0	; () banked
  9805  002E60  6F63               	movwf	(MSdelay@i+1)& (0+255),b
  9806  002E62  0E00               	movlw	0
  9807  002E64  6F62               	movwf	MSdelay@i& (0+255),b
  9808  002E66  D014               	goto	l2587
  9809  002E68                     l2575:
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;newmain.c: 391: for(j=0;j<165;j++);
  9813  002E68  0E00               	movlw	0
  9814  002E6A  0100               	movlb	0	; () banked
  9815  002E6C  6F65               	movwf	(MSdelay@j+1)& (0+255),b
  9816  002E6E  0E00               	movlw	0
  9817  002E70  6F64               	movwf	MSdelay@j& (0+255),b
  9818  002E72                     l2577:
  9819                           
  9820                           ; BSR set to: 0
  9821  002E72  0100               	movlb	0	; () banked
  9822  002E74  5165               	movf	(MSdelay@j+1)& (0+255),w,b
  9823  002E76  E109               	bnz	l2585
  9824  002E78  0EA5               	movlw	165
  9825  002E7A  0100               	movlb	0	; () banked
  9826  002E7C  5D64               	subwf	MSdelay@j& (0+255),w,b
  9827  002E7E  B0D8               	btfsc	status,0,c
  9828  002E80  D004               	goto	l2585
  9829                           
  9830                           ; BSR set to: 0
  9831                           
  9832                           ; BSR set to: 0
  9833                           
  9834                           ; BSR set to: 0
  9835  002E82  0100               	movlb	0	; () banked
  9836  002E84  4B64               	infsnz	MSdelay@j& (0+255),f,b
  9837  002E86  2B65               	incf	(MSdelay@j+1)& (0+255),f,b
  9838  002E88  D7F4               	goto	l2577
  9839  002E8A                     l2585:
  9840                           
  9841                           ; BSR set to: 0
  9842  002E8A  0100               	movlb	0	; () banked
  9843  002E8C  4B62               	infsnz	MSdelay@i& (0+255),f,b
  9844  002E8E  2B63               	incf	(MSdelay@i+1)& (0+255),f,b
  9845  002E90                     l2587:
  9846                           
  9847                           ; BSR set to: 0
  9848  002E90  0100               	movlb	0	; () banked
  9849  002E92  5162               	movf	MSdelay@i& (0+255),w,b
  9850  002E94  0100               	movlb	0	; () banked
  9851  002E96  5D60               	subwf	MSdelay@val& (0+255),w,b
  9852  002E98  0100               	movlb	0	; () banked
  9853  002E9A  5163               	movf	(MSdelay@i+1)& (0+255),w,b
  9854  002E9C  0100               	movlb	0	; () banked
  9855  002E9E  5961               	subwfb	(MSdelay@val+1)& (0+255),w,b
  9856  002EA0  A0D8               	btfss	status,0,c
  9857  002EA2  0012               	return	
  9858  002EA4  D7E1               	goto	l2575
  9859  002EA6                     __end_of_MSdelay:
  9860                           	opt stack 0
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon2	equ	0xFF1
  9868                           indf0	equ	0xFEF
  9869                           postinc0	equ	0xFEE
  9870                           fsr0h	equ	0xFEA
  9871                           fsr0l	equ	0xFE9
  9872                           wreg	equ	0xFE8
  9873                           postdec1	equ	0xFE5
  9874                           plusw1	equ	0xFE3
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           plusw2	equ	0xFDB
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _ADC_Interrupt_Init *****************
  9885 ;; Defined at:
  9886 ;;		line 312 in file "newmain.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  1    wreg      void 
  9893 ;; Registers used:
  9894 ;;		wreg, status,2
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9903 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9904 ;;Total ram usage:        0 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    3
  9907 ;; This function calls:
  9908 ;;		Nothing
  9909 ;; This function is called by:
  9910 ;;		_main
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           	psect	text29
  9915  002FD4                     __ptext29:
  9916                           	opt stack 0
  9917  002FD4                     _ADC_Interrupt_Init:
  9918                           	opt stack 27
  9919                           
  9920                           ;newmain.c: 313: ADCON0 = 0;
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;incstack = 0
  9924  002FD4  0E00               	movlw	0
  9925  002FD6  6EC2               	movwf	4034,c	;volatile
  9926                           
  9927                           ;newmain.c: 314: ADCON1 = 0x0e;
  9928  002FD8  0E0E               	movlw	14
  9929  002FDA  6EC1               	movwf	4033,c	;volatile
  9930                           
  9931                           ;newmain.c: 315: ADCON2 = 0x92;
  9932  002FDC  0E92               	movlw	146
  9933  002FDE  6EC0               	movwf	4032,c	;volatile
  9934                           
  9935                           ;newmain.c: 316: ADRESH = 0;
  9936  002FE0  0E00               	movlw	0
  9937  002FE2  6EC4               	movwf	4036,c	;volatile
  9938                           
  9939                           ;newmain.c: 317: ADRESL = 0;
  9940  002FE4  0E00               	movlw	0
  9941  002FE6  6EC3               	movwf	4035,c	;volatile
  9942                           
  9943                           ;newmain.c: 318: PIR1bits.ADIF=0;
  9944  002FE8  9C9E               	bcf	3998,6,c	;volatile
  9945                           
  9946                           ;newmain.c: 319: PIE1bits.ADIE=1;
  9947  002FEA  8C9D               	bsf	3997,6,c	;volatile
  9948                           
  9949                           ;newmain.c: 321: INTCONbits.PEIE=1;
  9950  002FEC  8CF2               	bsf	intcon,6,c	;volatile
  9951                           
  9952                           ;newmain.c: 322: INTCONbits.GIE=1;
  9953  002FEE  8EF2               	bsf	intcon,7,c	;volatile
  9954                           
  9955                           ;newmain.c: 323: ADCON0bits.ADON = 1;
  9956  002FF0  80C2               	bsf	4034,0,c	;volatile
  9957                           
  9958                           ;newmain.c: 324: ADCON0bits.GO = 1;
  9959  002FF2  82C2               	bsf	4034,1,c	;volatile
  9960  002FF4  0012               	return		;funcret
  9961  002FF6                     __end_of_ADC_Interrupt_Init:
  9962                           	opt stack 0
  9963                           tblptru	equ	0xFF8
  9964                           tblptrh	equ	0xFF7
  9965                           tblptrl	equ	0xFF6
  9966                           tablat	equ	0xFF5
  9967                           prodh	equ	0xFF4
  9968                           prodl	equ	0xFF3
  9969                           intcon	equ	0xFF2
  9970                           intcon2	equ	0xFF1
  9971                           indf0	equ	0xFEF
  9972                           postinc0	equ	0xFEE
  9973                           fsr0h	equ	0xFEA
  9974                           fsr0l	equ	0xFE9
  9975                           wreg	equ	0xFE8
  9976                           postdec1	equ	0xFE5
  9977                           plusw1	equ	0xFE3
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           plusw2	equ	0xFDB
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function _ADC_ISR *****************
  9988 ;; Defined at:
  9989 ;;		line 113 in file "newmain.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;		None
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;		None
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, status,2, status,0, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10003 ;;      Params:         0       0       0       0       0       0       0       0       0
 10004 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10005 ;;      Temps:         16       0       0       0       0       0       0       0       0
 10006 ;;      Totals:        19       0       0       0       0       0       0       0       0
 10007 ;;Total ram usage:       19 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    2
 10010 ;; This function calls:
 10011 ;;		___awtoft
 10012 ;;		___ftdiv
 10013 ;;		i2___ftadd
 10014 ;;		i2___ftmul
 10015 ;; This function is called by:
 10016 ;;		Interrupt level 2
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           	psect	intcode
 10021  000008                     __pintcode:
 10022                           	opt stack 0
 10023  000008                     _ADC_ISR:
 10024                           	opt stack 24
 10025                           
 10026                           ;incstack = 0
 10027  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10028  00000A  EDC9  F011         	call	int_func,f	;refresh shadow registers
 10029                           tblptru	equ	0xFF8
 10030                           tblptrh	equ	0xFF7
 10031                           tblptrl	equ	0xFF6
 10032                           tablat	equ	0xFF5
 10033                           prodh	equ	0xFF4
 10034                           prodl	equ	0xFF3
 10035                           intcon	equ	0xFF2
 10036                           intcon2	equ	0xFF1
 10037                           indf0	equ	0xFEF
 10038                           postinc0	equ	0xFEE
 10039                           fsr0h	equ	0xFEA
 10040                           fsr0l	equ	0xFE9
 10041                           wreg	equ	0xFE8
 10042                           postdec1	equ	0xFE5
 10043                           plusw1	equ	0xFE3
 10044                           fsr1l	equ	0xFE1
 10045                           indf2	equ	0xFDF
 10046                           postinc2	equ	0xFDE
 10047                           postdec2	equ	0xFDD
 10048                           plusw2	equ	0xFDB
 10049                           fsr2h	equ	0xFDA
 10050                           fsr2l	equ	0xFD9
 10051                           status	equ	0xFD8
 10052                           
 10053                           	psect	intcode_body
 10054  002392                     __pintcode_body:
 10055                           	opt stack 24
 10056  002392                     int_func:
 10057                           	opt stack 24
 10058  002392  0006               	pop		; remove dummy address from shadow register refresh
 10059  002394  CFFA F035          	movff	pclath,??_ADC_ISR+2
 10060  002398  CFFB F036          	movff	pclatu,??_ADC_ISR+3
 10061  00239C  CFE9 F037          	movff	fsr0l,??_ADC_ISR+4
 10062  0023A0  CFEA F038          	movff	fsr0h,??_ADC_ISR+5
 10063  0023A4  CFE1 F039          	movff	fsr1l,??_ADC_ISR+6
 10064  0023A8  CFE2 F03A          	movff	fsr1h,??_ADC_ISR+7
 10065  0023AC  CFD9 F03B          	movff	fsr2l,??_ADC_ISR+8
 10066  0023B0  CFDA F03C          	movff	fsr2h,??_ADC_ISR+9
 10067  0023B4  CFF3 F03D          	movff	prodl,??_ADC_ISR+10
 10068  0023B8  CFF4 F03E          	movff	prodh,??_ADC_ISR+11
 10069  0023BC  CFF6 F03F          	movff	tblptrl,??_ADC_ISR+12
 10070  0023C0  CFF7 F040          	movff	tblptrh,??_ADC_ISR+13
 10071  0023C4  CFF8 F041          	movff	tblptru,??_ADC_ISR+14
 10072  0023C8  CFF5 F042          	movff	tablat,??_ADC_ISR+15
 10073                           
 10074                           ;newmain.c: 114: value_adc=(ADRESH*256) | (ADRESL);
 10075  0023CC  50C3               	movf	4035,w,c	;volatile
 10076  0023CE  CFC4 F033          	movff	4036,??_ADC_ISR	;volatile
 10077  0023D2  6A34               	clrf	(??_ADC_ISR+1)& (0+255),c
 10078  0023D4  C033  F034         	movff	??_ADC_ISR,??_ADC_ISR+1
 10079  0023D8  6A33               	clrf	??_ADC_ISR,c
 10080  0023DA  1033               	iorwf	??_ADC_ISR,w,c
 10081  0023DC  6E09               	movwf	___awtoft@c,c
 10082  0023DE  5034               	movf	??_ADC_ISR+1,w,c
 10083  0023E0  6E0A               	movwf	___awtoft@c+1,c
 10084  0023E2  EC53  F017         	call	___awtoft	;wreg free
 10085  0023E6  C009  F056         	movff	?___awtoft,_value_adc
 10086  0023EA  C00A  F057         	movff	?___awtoft+1,_value_adc+1
 10087  0023EE  C00B  F058         	movff	?___awtoft+2,_value_adc+2
 10088                           
 10089                           ;newmain.c: 115: tempurture = (5*(float)(value_adc)*1000.0/1024 - 500.0)/10.0;
 10090  0023F2  0E00               	movlw	0
 10091  0023F4  6E2A               	movwf	i2___ftadd@f2,c
 10092  0023F6  0EFA               	movlw	250
 10093  0023F8  6E2B               	movwf	i2___ftadd@f2+1,c
 10094  0023FA  0EC3               	movlw	195
 10095  0023FC  6E2C               	movwf	i2___ftadd@f2+2,c
 10096  0023FE  0E00               	movlw	0
 10097  002400  6E1B               	movwf	___ftdiv@f2,c
 10098  002402  0E80               	movlw	128
 10099  002404  6E1C               	movwf	___ftdiv@f2+1,c
 10100  002406  0E44               	movlw	68
 10101  002408  6E1D               	movwf	___ftdiv@f2+2,c
 10102  00240A  0E40               	movlw	64
 10103  00240C  6E0C               	movwf	i2___ftmul@f2,c
 10104  00240E  0E9C               	movlw	156
 10105  002410  6E0D               	movwf	i2___ftmul@f2+1,c
 10106  002412  0E45               	movlw	69
 10107  002414  6E0E               	movwf	i2___ftmul@f2+2,c
 10108  002416  C056  F009         	movff	_value_adc,i2___ftmul@f1
 10109  00241A  C057  F00A         	movff	_value_adc+1,i2___ftmul@f1+1
 10110  00241E  C058  F00B         	movff	_value_adc+2,i2___ftmul@f1+2
 10111  002422  ECE2  F012         	call	i2___ftmul	;wreg free
 10112  002426  C009  F018         	movff	?i2___ftmul,___ftdiv@f1
 10113  00242A  C00A  F019         	movff	?i2___ftmul+1,___ftdiv@f1+1
 10114  00242E  C00B  F01A         	movff	?i2___ftmul+2,___ftdiv@f1+2
 10115  002432  EC5C  F013         	call	___ftdiv	;wreg free
 10116  002436  C018  F027         	movff	?___ftdiv,i2___ftadd@f1
 10117  00243A  C019  F028         	movff	?___ftdiv+1,i2___ftadd@f1+1
 10118  00243E  C01A  F029         	movff	?___ftdiv+2,i2___ftadd@f1+2
 10119  002442  EC71  F00D         	call	i2___ftadd	;wreg free
 10120  002446  C027  F043         	movff	?i2___ftadd,_ADC_ISR$1155
 10121  00244A  C028  F044         	movff	?i2___ftadd+1,_ADC_ISR$1155+1
 10122  00244E  C029  F045         	movff	?i2___ftadd+2,_ADC_ISR$1155+2
 10123                           
 10124                           ;newmain.c: 115: tempurture = (5*(float)(value_adc)*1000.0/1024 - 500.0)/10.0;
 10125  002452  C043  F018         	movff	_ADC_ISR$1155,___ftdiv@f1
 10126  002456  C044  F019         	movff	_ADC_ISR$1155+1,___ftdiv@f1+1
 10127  00245A  C045  F01A         	movff	_ADC_ISR$1155+2,___ftdiv@f1+2
 10128  00245E  0E00               	movlw	0
 10129  002460  6E1B               	movwf	___ftdiv@f2,c
 10130  002462  0E20               	movlw	32
 10131  002464  6E1C               	movwf	___ftdiv@f2+1,c
 10132  002466  0E41               	movlw	65
 10133  002468  6E1D               	movwf	___ftdiv@f2+2,c
 10134  00246A  EC5C  F013         	call	___ftdiv	;wreg free
 10135  00246E  C018  F0ED         	movff	?___ftdiv,_tempurture
 10136  002472  C019  F0EE         	movff	?___ftdiv+1,_tempurture+1
 10137  002476  C01A  F0EF         	movff	?___ftdiv+2,_tempurture+2
 10138                           
 10139                           ;newmain.c: 116: ADIF=0;
 10140  00247A  9C9E               	bcf	3998,6,c	;volatile
 10141  00247C  C042  FFF5         	movff	??_ADC_ISR+15,tablat
 10142  002480  C041  FFF8         	movff	??_ADC_ISR+14,tblptru
 10143  002484  C040  FFF7         	movff	??_ADC_ISR+13,tblptrh
 10144  002488  C03F  FFF6         	movff	??_ADC_ISR+12,tblptrl
 10145  00248C  C03E  FFF4         	movff	??_ADC_ISR+11,prodh
 10146  002490  C03D  FFF3         	movff	??_ADC_ISR+10,prodl
 10147  002494  C03C  FFDA         	movff	??_ADC_ISR+9,fsr2h
 10148  002498  C03B  FFD9         	movff	??_ADC_ISR+8,fsr2l
 10149  00249C  C03A  FFE2         	movff	??_ADC_ISR+7,fsr1h
 10150  0024A0  C039  FFE1         	movff	??_ADC_ISR+6,fsr1l
 10151  0024A4  C038  FFEA         	movff	??_ADC_ISR+5,fsr0h
 10152  0024A8  C037  FFE9         	movff	??_ADC_ISR+4,fsr0l
 10153  0024AC  C036  FFFB         	movff	??_ADC_ISR+3,pclatu
 10154  0024B0  C035  FFFA         	movff	??_ADC_ISR+2,pclath
 10155  0024B4  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10156  0024B6  0011               	retfie		f
 10157  0024B8                     __end_of_ADC_ISR:
 10158                           	opt stack 0
 10159                           pclatu	equ	0xFFB
 10160                           pclath	equ	0xFFA
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon2	equ	0xFF1
 10169                           indf0	equ	0xFEF
 10170                           postinc0	equ	0xFEE
 10171                           fsr0h	equ	0xFEA
 10172                           fsr0l	equ	0xFE9
 10173                           wreg	equ	0xFE8
 10174                           postdec1	equ	0xFE5
 10175                           plusw1	equ	0xFE3
 10176                           fsr1h	equ	0xFE2
 10177                           fsr1l	equ	0xFE1
 10178                           indf2	equ	0xFDF
 10179                           postinc2	equ	0xFDE
 10180                           postdec2	equ	0xFDD
 10181                           plusw2	equ	0xFDB
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function i2___ftmul *****************
 10187 ;; Defined at:
 10188 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  f1              3    8[COMRAM] float 
 10191 ;;  f2              3   11[COMRAM] float 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  __ftmul         3   18[COMRAM] unsigned um
 10194 ;;  __ftmul         1   22[COMRAM] unsigned char 
 10195 ;;  __ftmul         1   21[COMRAM] unsigned char 
 10196 ;;  __ftmul         1   17[COMRAM] unsigned char 
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  3    8[COMRAM] float 
 10199 ;; Registers used:
 10200 ;;		wreg, status,2, status,0, cstack
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10206 ;;      Params:         6       0       0       0       0       0       0       0       0
 10207 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10208 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10209 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10210 ;;Total ram usage:       15 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:    1
 10213 ;; This function calls:
 10214 ;;		i2___ftpack
 10215 ;; This function is called by:
 10216 ;;		_ADC_ISR
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           	psect	text31
 10221  0025C4                     __ptext31:
 10222                           	opt stack 0
 10223  0025C4                     i2___ftmul:
 10224                           	opt stack 24
 10225                           
 10226                           ;incstack = 0
 10227  0025C4  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
 10228  0025C8  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 10229  0025CA  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 10230  0025CC  340A               	rlcf	i2___ftmul@f1+1,w,c
 10231  0025CE  360F               	rlcf	??i2___ftmul& (0+255),f,c
 10232  0025D0  E301               	bnc	u431_41
 10233  0025D2  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10234  0025D4                     u431_41:
 10235  0025D4  500F               	movf	??i2___ftmul,w,c
 10236  0025D6  6E12               	movwf	i2___ftmul@exp,c
 10237  0025D8  5012               	movf	i2___ftmul@exp,w,c
 10238  0025DA  A4D8               	btfss	status,2,c
 10239  0025DC  D007               	goto	i2l3753
 10240  0025DE  0E00               	movlw	0
 10241  0025E0  6E09               	movwf	?i2___ftmul,c
 10242  0025E2  0E00               	movlw	0
 10243  0025E4  6E0A               	movwf	?i2___ftmul+1,c
 10244  0025E6  0E00               	movlw	0
 10245  0025E8  6E0B               	movwf	?i2___ftmul+2,c
 10246  0025EA  0012               	return	
 10247  0025EC                     i2l3753:
 10248  0025EC  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
 10249  0025F0  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 10250  0025F2  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 10251  0025F4  340D               	rlcf	i2___ftmul@f2+1,w,c
 10252  0025F6  360F               	rlcf	??i2___ftmul& (0+255),f,c
 10253  0025F8  E301               	bnc	u433_41
 10254  0025FA  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10255  0025FC                     u433_41:
 10256  0025FC  500F               	movf	??i2___ftmul,w,c
 10257  0025FE  6E17               	movwf	i2___ftmul@sign,c
 10258  002600  5017               	movf	i2___ftmul@sign,w,c
 10259  002602  A4D8               	btfss	status,2,c
 10260  002604  D007               	goto	i2l3759
 10261  002606  0E00               	movlw	0
 10262  002608  6E09               	movwf	?i2___ftmul,c
 10263  00260A  0E00               	movlw	0
 10264  00260C  6E0A               	movwf	?i2___ftmul+1,c
 10265  00260E  0E00               	movlw	0
 10266  002610  6E0B               	movwf	?i2___ftmul+2,c
 10267  002612  0012               	return	
 10268  002614                     i2l3759:
 10269  002614  5017               	movf	i2___ftmul@sign,w,c
 10270  002616  0F7B               	addlw	123
 10271  002618  2612               	addwf	i2___ftmul@exp,f,c
 10272  00261A  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 10273  00261E  500E               	movf	i2___ftmul@f2+2,w,c
 10274  002620  1A17               	xorwf	i2___ftmul@sign,f,c
 10275  002622  0E80               	movlw	128
 10276  002624  1617               	andwf	i2___ftmul@sign,f,c
 10277  002626  8E0A               	bsf	i2___ftmul@f1+1,7,c
 10278  002628  8E0D               	bsf	i2___ftmul@f2+1,7,c
 10279  00262A  0EFF               	movlw	255
 10280  00262C  160C               	andwf	i2___ftmul@f2,f,c
 10281  00262E  0EFF               	movlw	255
 10282  002630  160D               	andwf	i2___ftmul@f2+1,f,c
 10283  002632  0E00               	movlw	0
 10284  002634  160E               	andwf	i2___ftmul@f2+2,f,c
 10285  002636  0E00               	movlw	0
 10286  002638  6E13               	movwf	i2___ftmul@f3_as_product,c
 10287  00263A  0E00               	movlw	0
 10288  00263C  6E14               	movwf	i2___ftmul@f3_as_product+1,c
 10289  00263E  0E00               	movlw	0
 10290  002640  6E15               	movwf	i2___ftmul@f3_as_product+2,c
 10291  002642  0E07               	movlw	7
 10292  002644  6E16               	movwf	i2___ftmul@cntr,c
 10293  002646                     i2l3773:
 10294  002646  A009               	btfss	i2___ftmul@f1,0,c
 10295  002648  D006               	goto	i2l3777
 10296  00264A  500C               	movf	i2___ftmul@f2,w,c
 10297  00264C  2613               	addwf	i2___ftmul@f3_as_product,f,c
 10298  00264E  500D               	movf	i2___ftmul@f2+1,w,c
 10299  002650  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10300  002652  500E               	movf	i2___ftmul@f2+2,w,c
 10301  002654  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10302  002656                     i2l3777:
 10303  002656  90D8               	bcf	status,0,c
 10304  002658  320B               	rrcf	i2___ftmul@f1+2,f,c
 10305  00265A  320A               	rrcf	i2___ftmul@f1+1,f,c
 10306  00265C  3209               	rrcf	i2___ftmul@f1,f,c
 10307  00265E  90D8               	bcf	status,0,c
 10308  002660  360C               	rlcf	i2___ftmul@f2,f,c
 10309  002662  360D               	rlcf	i2___ftmul@f2+1,f,c
 10310  002664  360E               	rlcf	i2___ftmul@f2+2,f,c
 10311  002666  2E16               	decfsz	i2___ftmul@cntr,f,c
 10312  002668  D7EE               	goto	i2l3773
 10313  00266A  0E09               	movlw	9
 10314  00266C  6E16               	movwf	i2___ftmul@cntr,c
 10315  00266E                     i2l3783:
 10316  00266E  A009               	btfss	i2___ftmul@f1,0,c
 10317  002670  D006               	goto	i2l3787
 10318  002672  500C               	movf	i2___ftmul@f2,w,c
 10319  002674  2613               	addwf	i2___ftmul@f3_as_product,f,c
 10320  002676  500D               	movf	i2___ftmul@f2+1,w,c
 10321  002678  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10322  00267A  500E               	movf	i2___ftmul@f2+2,w,c
 10323  00267C  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10324  00267E                     i2l3787:
 10325  00267E  90D8               	bcf	status,0,c
 10326  002680  320B               	rrcf	i2___ftmul@f1+2,f,c
 10327  002682  320A               	rrcf	i2___ftmul@f1+1,f,c
 10328  002684  3209               	rrcf	i2___ftmul@f1,f,c
 10329  002686  90D8               	bcf	status,0,c
 10330  002688  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
 10331  00268A  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
 10332  00268C  3213               	rrcf	i2___ftmul@f3_as_product,f,c
 10333  00268E  2E16               	decfsz	i2___ftmul@cntr,f,c
 10334  002690  D7EE               	goto	i2l3783
 10335  002692  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 10336  002696  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 10337  00269A  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 10338  00269E  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 10339  0026A2  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 10340  0026A6  ECF0  F014         	call	i2___ftpack	;wreg free
 10341  0026AA  C001  F009         	movff	?i2___ftpack,?i2___ftmul
 10342  0026AE  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
 10343  0026B2  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
 10344  0026B6  0012               	return	
 10345  0026B8                     __end_ofi2___ftmul:
 10346                           	opt stack 0
 10347                           pclatu	equ	0xFFB
 10348                           pclath	equ	0xFFA
 10349                           tblptru	equ	0xFF8
 10350                           tblptrh	equ	0xFF7
 10351                           tblptrl	equ	0xFF6
 10352                           tablat	equ	0xFF5
 10353                           prodh	equ	0xFF4
 10354                           prodl	equ	0xFF3
 10355                           intcon	equ	0xFF2
 10356                           intcon2	equ	0xFF1
 10357                           indf0	equ	0xFEF
 10358                           postinc0	equ	0xFEE
 10359                           fsr0h	equ	0xFEA
 10360                           fsr0l	equ	0xFE9
 10361                           wreg	equ	0xFE8
 10362                           postdec1	equ	0xFE5
 10363                           plusw1	equ	0xFE3
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           plusw2	equ	0xFDB
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function i2___ftadd *****************
 10375 ;; Defined at:
 10376 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  f1              3   38[COMRAM] float 
 10379 ;;  f2              3   41[COMRAM] float 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  __ftadd         1   49[COMRAM] unsigned char 
 10382 ;;  __ftadd         1   48[COMRAM] unsigned char 
 10383 ;;  __ftadd         1   47[COMRAM] unsigned char 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  3   38[COMRAM] float 
 10386 ;; Registers used:
 10387 ;;		wreg, status,2, status,0, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10393 ;;      Params:         6       0       0       0       0       0       0       0       0
 10394 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10395 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10396 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10397 ;;Total ram usage:       12 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    1
 10400 ;; This function calls:
 10401 ;;		i2___ftpack
 10402 ;; This function is called by:
 10403 ;;		_ADC_ISR
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           	psect	text32
 10408  001AE2                     __ptext32:
 10409                           	opt stack 0
 10410  001AE2                     i2___ftadd:
 10411                           	opt stack 24
 10412                           
 10413                           ;incstack = 0
 10414  001AE2  C029  F02D         	movff	i2___ftadd@f1+2,??i2___ftadd
 10415  001AE6  6A2E               	clrf	(??i2___ftadd+1)& (0+255),c
 10416  001AE8  6A2F               	clrf	(??i2___ftadd+2)& (0+255),c
 10417  001AEA  3428               	rlcf	i2___ftadd@f1+1,w,c
 10418  001AEC  362D               	rlcf	??i2___ftadd& (0+255),f,c
 10419  001AEE  E301               	bnc	u410_41
 10420  001AF0  802E               	bsf	(??i2___ftadd+1)& (0+255),0,c
 10421  001AF2                     u410_41:
 10422  001AF2  502D               	movf	??i2___ftadd,w,c
 10423  001AF4  6E32               	movwf	i2___ftadd@exp1,c
 10424  001AF6  C02C  F02D         	movff	i2___ftadd@f2+2,??i2___ftadd
 10425  001AFA  6A2E               	clrf	(??i2___ftadd+1)& (0+255),c
 10426  001AFC  6A2F               	clrf	(??i2___ftadd+2)& (0+255),c
 10427  001AFE  342B               	rlcf	i2___ftadd@f2+1,w,c
 10428  001B00  362D               	rlcf	??i2___ftadd& (0+255),f,c
 10429  001B02  E301               	bnc	u411_41
 10430  001B04  802E               	bsf	(??i2___ftadd+1)& (0+255),0,c
 10431  001B06                     u411_41:
 10432  001B06  502D               	movf	??i2___ftadd,w,c
 10433  001B08  6E31               	movwf	i2___ftadd@exp2,c
 10434  001B0A  5032               	movf	i2___ftadd@exp1,w,c
 10435  001B0C  B4D8               	btfsc	status,2,c
 10436  001B0E  D00B               	goto	i2l597
 10437  001B10  5031               	movf	i2___ftadd@exp2,w,c
 10438  001B12  5C32               	subwf	i2___ftadd@exp1,w,c
 10439  001B14  B0D8               	btfsc	status,0,c
 10440  001B16  D00E               	goto	i2l3685
 10441  001B18  5032               	movf	i2___ftadd@exp1,w,c
 10442  001B1A  0800               	sublw	0
 10443  001B1C  2431               	addwf	i2___ftadd@exp2,w,c
 10444  001B1E  6E2D               	movwf	??i2___ftadd& (0+255),c
 10445  001B20  0E18               	movlw	24
 10446  001B22  642D               	cpfsgt	??i2___ftadd,c
 10447  001B24  D007               	goto	i2l3685
 10448  001B26                     i2l597:
 10449  001B26  C02A  F027         	movff	i2___ftadd@f2,?i2___ftadd
 10450  001B2A  C02B  F028         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 10451  001B2E  C02C  F029         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 10452  001B32  0012               	return	
 10453  001B34                     i2l3685:
 10454  001B34  5031               	movf	i2___ftadd@exp2,w,c
 10455  001B36  B4D8               	btfsc	status,2,c
 10456  001B38  D00B               	goto	i2l601
 10457  001B3A  5032               	movf	i2___ftadd@exp1,w,c
 10458  001B3C  5C31               	subwf	i2___ftadd@exp2,w,c
 10459  001B3E  B0D8               	btfsc	status,0,c
 10460  001B40  D00E               	goto	i2l3691
 10461  001B42  5031               	movf	i2___ftadd@exp2,w,c
 10462  001B44  0800               	sublw	0
 10463  001B46  2432               	addwf	i2___ftadd@exp1,w,c
 10464  001B48  6E2D               	movwf	??i2___ftadd& (0+255),c
 10465  001B4A  0E18               	movlw	24
 10466  001B4C  642D               	cpfsgt	??i2___ftadd,c
 10467  001B4E  D007               	goto	i2l3691
 10468  001B50                     i2l601:
 10469  001B50  C027  F027         	movff	i2___ftadd@f1,?i2___ftadd
 10470  001B54  C028  F028         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 10471  001B58  C029  F029         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 10472  001B5C  0012               	return	
 10473  001B5E                     i2l3691:
 10474  001B5E  0E06               	movlw	6
 10475  001B60  6E30               	movwf	i2___ftadd@sign,c
 10476  001B62  BE29               	btfsc	i2___ftadd@f1+2,7,c
 10477  001B64  8E30               	bsf	i2___ftadd@sign,7,c
 10478  001B66  BE2C               	btfsc	i2___ftadd@f2+2,7,c
 10479  001B68  8C30               	bsf	i2___ftadd@sign,6,c
 10480  001B6A  8E28               	bsf	i2___ftadd@f1+1,7,c
 10481  001B6C  0EFF               	movlw	255
 10482  001B6E  1627               	andwf	i2___ftadd@f1,f,c
 10483  001B70  0EFF               	movlw	255
 10484  001B72  1628               	andwf	i2___ftadd@f1+1,f,c
 10485  001B74  0E00               	movlw	0
 10486  001B76  1629               	andwf	i2___ftadd@f1+2,f,c
 10487  001B78  8E2B               	bsf	i2___ftadd@f2+1,7,c
 10488  001B7A  0EFF               	movlw	255
 10489  001B7C  162A               	andwf	i2___ftadd@f2,f,c
 10490  001B7E  0EFF               	movlw	255
 10491  001B80  162B               	andwf	i2___ftadd@f2+1,f,c
 10492  001B82  0E00               	movlw	0
 10493  001B84  162C               	andwf	i2___ftadd@f2+2,f,c
 10494  001B86  5031               	movf	i2___ftadd@exp2,w,c
 10495  001B88  5C32               	subwf	i2___ftadd@exp1,w,c
 10496  001B8A  B0D8               	btfsc	status,0,c
 10497  001B8C  D01B               	goto	i2l3717
 10498  001B8E                     i2l3707:
 10499  001B8E  90D8               	bcf	status,0,c
 10500  001B90  362A               	rlcf	i2___ftadd@f2,f,c
 10501  001B92  362B               	rlcf	i2___ftadd@f2+1,f,c
 10502  001B94  362C               	rlcf	i2___ftadd@f2+2,f,c
 10503  001B96  0631               	decf	i2___ftadd@exp2,f,c
 10504  001B98  5032               	movf	i2___ftadd@exp1,w,c
 10505  001B9A  1831               	xorwf	i2___ftadd@exp2,w,c
 10506  001B9C  B4D8               	btfsc	status,2,c
 10507  001B9E  D00D               	goto	i2l3715
 10508  001BA0  0630               	decf	i2___ftadd@sign,f,c
 10509  001BA2  C030  F02D         	movff	i2___ftadd@sign,??i2___ftadd
 10510  001BA6  0E07               	movlw	7
 10511  001BA8  162D               	andwf	??i2___ftadd,f,c
 10512  001BAA  B4D8               	btfsc	status,2,c
 10513  001BAC  D006               	goto	i2l3715
 10514  001BAE  D7EF               	goto	i2l3707
 10515  001BB0                     i2l3713:
 10516  001BB0  90D8               	bcf	status,0,c
 10517  001BB2  3229               	rrcf	i2___ftadd@f1+2,f,c
 10518  001BB4  3228               	rrcf	i2___ftadd@f1+1,f,c
 10519  001BB6  3227               	rrcf	i2___ftadd@f1,f,c
 10520  001BB8  2A32               	incf	i2___ftadd@exp1,f,c
 10521  001BBA                     i2l3715:
 10522  001BBA  5031               	movf	i2___ftadd@exp2,w,c
 10523  001BBC  1832               	xorwf	i2___ftadd@exp1,w,c
 10524  001BBE  B4D8               	btfsc	status,2,c
 10525  001BC0  D01F               	goto	i2l612
 10526  001BC2  D7F6               	goto	i2l3713
 10527  001BC4                     i2l3717:
 10528  001BC4  5032               	movf	i2___ftadd@exp1,w,c
 10529  001BC6  5C31               	subwf	i2___ftadd@exp2,w,c
 10530  001BC8  B0D8               	btfsc	status,0,c
 10531  001BCA  D01A               	goto	i2l612
 10532  001BCC                     i2l3719:
 10533  001BCC  90D8               	bcf	status,0,c
 10534  001BCE  3627               	rlcf	i2___ftadd@f1,f,c
 10535  001BD0  3628               	rlcf	i2___ftadd@f1+1,f,c
 10536  001BD2  3629               	rlcf	i2___ftadd@f1+2,f,c
 10537  001BD4  0632               	decf	i2___ftadd@exp1,f,c
 10538  001BD6  5032               	movf	i2___ftadd@exp1,w,c
 10539  001BD8  1831               	xorwf	i2___ftadd@exp2,w,c
 10540  001BDA  B4D8               	btfsc	status,2,c
 10541  001BDC  D00D               	goto	i2l3727
 10542  001BDE  0630               	decf	i2___ftadd@sign,f,c
 10543  001BE0  C030  F02D         	movff	i2___ftadd@sign,??i2___ftadd
 10544  001BE4  0E07               	movlw	7
 10545  001BE6  162D               	andwf	??i2___ftadd,f,c
 10546  001BE8  B4D8               	btfsc	status,2,c
 10547  001BEA  D006               	goto	i2l3727
 10548  001BEC  D7EF               	goto	i2l3719
 10549  001BEE                     i2l3725:
 10550  001BEE  90D8               	bcf	status,0,c
 10551  001BF0  322C               	rrcf	i2___ftadd@f2+2,f,c
 10552  001BF2  322B               	rrcf	i2___ftadd@f2+1,f,c
 10553  001BF4  322A               	rrcf	i2___ftadd@f2,f,c
 10554  001BF6  2A31               	incf	i2___ftadd@exp2,f,c
 10555  001BF8                     i2l3727:
 10556  001BF8  5031               	movf	i2___ftadd@exp2,w,c
 10557  001BFA  1832               	xorwf	i2___ftadd@exp1,w,c
 10558  001BFC  A4D8               	btfss	status,2,c
 10559  001BFE  D7F7               	goto	i2l3725
 10560  001C00                     i2l612:
 10561  001C00  AE30               	btfss	i2___ftadd@sign,7,c
 10562  001C02  D00C               	goto	i2l621
 10563  001C04  0EFF               	movlw	255
 10564  001C06  1A27               	xorwf	i2___ftadd@f1,f,c
 10565  001C08  0EFF               	movlw	255
 10566  001C0A  1A28               	xorwf	i2___ftadd@f1+1,f,c
 10567  001C0C  0EFF               	movlw	255
 10568  001C0E  1A29               	xorwf	i2___ftadd@f1+2,f,c
 10569  001C10  0E01               	movlw	1
 10570  001C12  2627               	addwf	i2___ftadd@f1,f,c
 10571  001C14  0E00               	movlw	0
 10572  001C16  2228               	addwfc	i2___ftadd@f1+1,f,c
 10573  001C18  0E00               	movlw	0
 10574  001C1A  2229               	addwfc	i2___ftadd@f1+2,f,c
 10575  001C1C                     i2l621:
 10576  001C1C  AC30               	btfss	i2___ftadd@sign,6,c
 10577  001C1E  D00C               	goto	i2l3733
 10578  001C20  0EFF               	movlw	255
 10579  001C22  1A2A               	xorwf	i2___ftadd@f2,f,c
 10580  001C24  0EFF               	movlw	255
 10581  001C26  1A2B               	xorwf	i2___ftadd@f2+1,f,c
 10582  001C28  0EFF               	movlw	255
 10583  001C2A  1A2C               	xorwf	i2___ftadd@f2+2,f,c
 10584  001C2C  0E01               	movlw	1
 10585  001C2E  262A               	addwf	i2___ftadd@f2,f,c
 10586  001C30  0E00               	movlw	0
 10587  001C32  222B               	addwfc	i2___ftadd@f2+1,f,c
 10588  001C34  0E00               	movlw	0
 10589  001C36  222C               	addwfc	i2___ftadd@f2+2,f,c
 10590  001C38                     i2l3733:
 10591  001C38  0E00               	movlw	0
 10592  001C3A  6E30               	movwf	i2___ftadd@sign,c
 10593  001C3C  5027               	movf	i2___ftadd@f1,w,c
 10594  001C3E  262A               	addwf	i2___ftadd@f2,f,c
 10595  001C40  5028               	movf	i2___ftadd@f1+1,w,c
 10596  001C42  222B               	addwfc	i2___ftadd@f2+1,f,c
 10597  001C44  5029               	movf	i2___ftadd@f1+2,w,c
 10598  001C46  222C               	addwfc	i2___ftadd@f2+2,f,c
 10599  001C48  AE2C               	btfss	i2___ftadd@f2+2,7,c
 10600  001C4A  D00E               	goto	i2l3743
 10601  001C4C  0EFF               	movlw	255
 10602  001C4E  1A2A               	xorwf	i2___ftadd@f2,f,c
 10603  001C50  0EFF               	movlw	255
 10604  001C52  1A2B               	xorwf	i2___ftadd@f2+1,f,c
 10605  001C54  0EFF               	movlw	255
 10606  001C56  1A2C               	xorwf	i2___ftadd@f2+2,f,c
 10607  001C58  0E01               	movlw	1
 10608  001C5A  262A               	addwf	i2___ftadd@f2,f,c
 10609  001C5C  0E00               	movlw	0
 10610  001C5E  222B               	addwfc	i2___ftadd@f2+1,f,c
 10611  001C60  0E00               	movlw	0
 10612  001C62  222C               	addwfc	i2___ftadd@f2+2,f,c
 10613  001C64  0E01               	movlw	1
 10614  001C66  6E30               	movwf	i2___ftadd@sign,c
 10615  001C68                     i2l3743:
 10616  001C68  C02A  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 10617  001C6C  C02B  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 10618  001C70  C02C  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 10619  001C74  C032  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 10620  001C78  C030  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 10621  001C7C  ECF0  F014         	call	i2___ftpack	;wreg free
 10622  001C80  C001  F027         	movff	?i2___ftpack,?i2___ftadd
 10623  001C84  C002  F028         	movff	?i2___ftpack+1,?i2___ftadd+1
 10624  001C88  C003  F029         	movff	?i2___ftpack+2,?i2___ftadd+2
 10625  001C8C  0012               	return	
 10626  001C8E                     __end_ofi2___ftadd:
 10627                           	opt stack 0
 10628                           pclatu	equ	0xFFB
 10629                           pclath	equ	0xFFA
 10630                           tblptru	equ	0xFF8
 10631                           tblptrh	equ	0xFF7
 10632                           tblptrl	equ	0xFF6
 10633                           tablat	equ	0xFF5
 10634                           prodh	equ	0xFF4
 10635                           prodl	equ	0xFF3
 10636                           intcon	equ	0xFF2
 10637                           intcon2	equ	0xFF1
 10638                           indf0	equ	0xFEF
 10639                           postinc0	equ	0xFEE
 10640                           fsr0h	equ	0xFEA
 10641                           fsr0l	equ	0xFE9
 10642                           wreg	equ	0xFE8
 10643                           postdec1	equ	0xFE5
 10644                           plusw1	equ	0xFE3
 10645                           fsr1h	equ	0xFE2
 10646                           fsr1l	equ	0xFE1
 10647                           indf2	equ	0xFDF
 10648                           postinc2	equ	0xFDE
 10649                           postdec2	equ	0xFDD
 10650                           plusw2	equ	0xFDB
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8
 10654                           
 10655 ;; *************** function ___ftdiv *****************
 10656 ;; Defined at:
 10657 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;  f1              3   23[COMRAM] float 
 10660 ;;  f2              3   26[COMRAM] float 
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;  f3              3   33[COMRAM] float 
 10663 ;;  sign            1   37[COMRAM] unsigned char 
 10664 ;;  exp             1   36[COMRAM] unsigned char 
 10665 ;;  cntr            1   32[COMRAM] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  3   23[COMRAM] float 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2, status,0, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10675 ;;      Params:         6       0       0       0       0       0       0       0       0
 10676 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10677 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10678 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10679 ;;Total ram usage:       15 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    1
 10682 ;; This function calls:
 10683 ;;		i2___ftpack
 10684 ;; This function is called by:
 10685 ;;		_ADC_ISR
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text33
 10690  0026B8                     __ptext33:
 10691                           	opt stack 0
 10692  0026B8                     ___ftdiv:
 10693                           	opt stack 24
 10694                           
 10695                           ;incstack = 0
 10696  0026B8  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
 10697  0026BC  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
 10698  0026BE  6A20               	clrf	(??___ftdiv+2)& (0+255),c
 10699  0026C0  3419               	rlcf	___ftdiv@f1+1,w,c
 10700  0026C2  361E               	rlcf	??___ftdiv& (0+255),f,c
 10701  0026C4  E301               	bnc	u404_41
 10702  0026C6  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
 10703  0026C8                     u404_41:
 10704  0026C8  501E               	movf	??___ftdiv,w,c
 10705  0026CA  6E25               	movwf	___ftdiv@exp,c
 10706  0026CC  5025               	movf	___ftdiv@exp,w,c
 10707  0026CE  A4D8               	btfss	status,2,c
 10708  0026D0  D007               	goto	i2l3625
 10709  0026D2  0E00               	movlw	0
 10710  0026D4  6E18               	movwf	?___ftdiv,c
 10711  0026D6  0E00               	movlw	0
 10712  0026D8  6E19               	movwf	?___ftdiv+1,c
 10713  0026DA  0E00               	movlw	0
 10714  0026DC  6E1A               	movwf	?___ftdiv+2,c
 10715  0026DE  0012               	return	
 10716  0026E0                     i2l3625:
 10717  0026E0  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
 10718  0026E4  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
 10719  0026E6  6A20               	clrf	(??___ftdiv+2)& (0+255),c
 10720  0026E8  341C               	rlcf	___ftdiv@f2+1,w,c
 10721  0026EA  361E               	rlcf	??___ftdiv& (0+255),f,c
 10722  0026EC  E301               	bnc	u406_41
 10723  0026EE  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
 10724  0026F0                     u406_41:
 10725  0026F0  501E               	movf	??___ftdiv,w,c
 10726  0026F2  6E26               	movwf	___ftdiv@sign,c
 10727  0026F4  5026               	movf	___ftdiv@sign,w,c
 10728  0026F6  A4D8               	btfss	status,2,c
 10729  0026F8  D007               	goto	i2l3631
 10730  0026FA  0E00               	movlw	0
 10731  0026FC  6E18               	movwf	?___ftdiv,c
 10732  0026FE  0E00               	movlw	0
 10733  002700  6E19               	movwf	?___ftdiv+1,c
 10734  002702  0E00               	movlw	0
 10735  002704  6E1A               	movwf	?___ftdiv+2,c
 10736  002706  0012               	return	
 10737  002708                     i2l3631:
 10738  002708  0E00               	movlw	0
 10739  00270A  6E22               	movwf	___ftdiv@f3,c
 10740  00270C  0E00               	movlw	0
 10741  00270E  6E23               	movwf	___ftdiv@f3+1,c
 10742  002710  0E00               	movlw	0
 10743  002712  6E24               	movwf	___ftdiv@f3+2,c
 10744  002714  5026               	movf	___ftdiv@sign,w,c
 10745  002716  0F89               	addlw	137
 10746  002718  5E25               	subwf	___ftdiv@exp,f,c
 10747  00271A  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
 10748  00271E  501D               	movf	___ftdiv@f2+2,w,c
 10749  002720  1A26               	xorwf	___ftdiv@sign,f,c
 10750  002722  0E80               	movlw	128
 10751  002724  1626               	andwf	___ftdiv@sign,f,c
 10752  002726  8E19               	bsf	___ftdiv@f1+1,7,c
 10753  002728  0EFF               	movlw	255
 10754  00272A  1618               	andwf	___ftdiv@f1,f,c
 10755  00272C  0EFF               	movlw	255
 10756  00272E  1619               	andwf	___ftdiv@f1+1,f,c
 10757  002730  0E00               	movlw	0
 10758  002732  161A               	andwf	___ftdiv@f1+2,f,c
 10759  002734  8E1C               	bsf	___ftdiv@f2+1,7,c
 10760  002736  0EFF               	movlw	255
 10761  002738  161B               	andwf	___ftdiv@f2,f,c
 10762  00273A  0EFF               	movlw	255
 10763  00273C  161C               	andwf	___ftdiv@f2+1,f,c
 10764  00273E  0E00               	movlw	0
 10765  002740  161D               	andwf	___ftdiv@f2+2,f,c
 10766  002742  0E18               	movlw	24
 10767  002744  6E21               	movwf	___ftdiv@cntr,c
 10768  002746                     i2l3651:
 10769  002746  90D8               	bcf	status,0,c
 10770  002748  3622               	rlcf	___ftdiv@f3,f,c
 10771  00274A  3623               	rlcf	___ftdiv@f3+1,f,c
 10772  00274C  3624               	rlcf	___ftdiv@f3+2,f,c
 10773  00274E  501B               	movf	___ftdiv@f2,w,c
 10774  002750  5C18               	subwf	___ftdiv@f1,w,c
 10775  002752  501C               	movf	___ftdiv@f2+1,w,c
 10776  002754  5819               	subwfb	___ftdiv@f1+1,w,c
 10777  002756  501D               	movf	___ftdiv@f2+2,w,c
 10778  002758  581A               	subwfb	___ftdiv@f1+2,w,c
 10779  00275A  A0D8               	btfss	status,0,c
 10780  00275C  D007               	goto	i2l632
 10781  00275E  501B               	movf	___ftdiv@f2,w,c
 10782  002760  5E18               	subwf	___ftdiv@f1,f,c
 10783  002762  501C               	movf	___ftdiv@f2+1,w,c
 10784  002764  5A19               	subwfb	___ftdiv@f1+1,f,c
 10785  002766  501D               	movf	___ftdiv@f2+2,w,c
 10786  002768  5A1A               	subwfb	___ftdiv@f1+2,f,c
 10787  00276A  8022               	bsf	___ftdiv@f3,0,c
 10788  00276C                     i2l632:
 10789  00276C  90D8               	bcf	status,0,c
 10790  00276E  3618               	rlcf	___ftdiv@f1,f,c
 10791  002770  3619               	rlcf	___ftdiv@f1+1,f,c
 10792  002772  361A               	rlcf	___ftdiv@f1+2,f,c
 10793  002774  2E21               	decfsz	___ftdiv@cntr,f,c
 10794  002776  D7E7               	goto	i2l3651
 10795  002778  C022  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 10796  00277C  C023  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 10797  002780  C024  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 10798  002784  C025  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 10799  002788  C026  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 10800  00278C  ECF0  F014         	call	i2___ftpack	;wreg free
 10801  002790  C001  F018         	movff	?i2___ftpack,?___ftdiv
 10802  002794  C002  F019         	movff	?i2___ftpack+1,?___ftdiv+1
 10803  002798  C003  F01A         	movff	?i2___ftpack+2,?___ftdiv+2
 10804  00279C  0012               	return	
 10805  00279E                     __end_of___ftdiv:
 10806                           	opt stack 0
 10807                           pclatu	equ	0xFFB
 10808                           pclath	equ	0xFFA
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           indf0	equ	0xFEF
 10818                           postinc0	equ	0xFEE
 10819                           fsr0h	equ	0xFEA
 10820                           fsr0l	equ	0xFE9
 10821                           wreg	equ	0xFE8
 10822                           postdec1	equ	0xFE5
 10823                           plusw1	equ	0xFE3
 10824                           fsr1h	equ	0xFE2
 10825                           fsr1l	equ	0xFE1
 10826                           indf2	equ	0xFDF
 10827                           postinc2	equ	0xFDE
 10828                           postdec2	equ	0xFDD
 10829                           plusw2	equ	0xFDB
 10830                           fsr2h	equ	0xFDA
 10831                           fsr2l	equ	0xFD9
 10832                           status	equ	0xFD8
 10833                           
 10834 ;; *************** function ___awtoft *****************
 10835 ;; Defined at:
 10836 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  c               2    8[COMRAM] int 
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;  sign            1   11[COMRAM] unsigned char 
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  3    8[COMRAM] float 
 10843 ;; Registers used:
 10844 ;;		wreg, status,2, status,0, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10850 ;;      Params:         3       0       0       0       0       0       0       0       0
 10851 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10853 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10854 ;;Total ram usage:        4 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:    1
 10857 ;; This function calls:
 10858 ;;		i2___ftpack
 10859 ;; This function is called by:
 10860 ;;		_ADC_ISR
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text34
 10865  002EA6                     __ptext34:
 10866                           	opt stack 0
 10867  002EA6                     ___awtoft:
 10868                           	opt stack 24
 10869                           
 10870                           ;incstack = 0
 10871  002EA6  0E00               	movlw	0
 10872  002EA8  6E0C               	movwf	___awtoft@sign,c
 10873  002EAA  AE0A               	btfss	___awtoft@c+1,7,c
 10874  002EAC  D006               	goto	i2l3673
 10875  002EAE  6C09               	negf	___awtoft@c,c
 10876  002EB0  1E0A               	comf	___awtoft@c+1,f,c
 10877  002EB2  B0D8               	btfsc	status,0,c
 10878  002EB4  2A0A               	incf	___awtoft@c+1,f,c
 10879  002EB6  0E01               	movlw	1
 10880  002EB8  6E0C               	movwf	___awtoft@sign,c
 10881  002EBA                     i2l3673:
 10882  002EBA  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 10883  002EBE  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 10884  002EC2  6A03               	clrf	i2___ftpack@arg+2,c
 10885  002EC4  0E8E               	movlw	142
 10886  002EC6  6E04               	movwf	i2___ftpack@exp,c
 10887  002EC8  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 10888  002ECC  ECF0  F014         	call	i2___ftpack	;wreg free
 10889  002ED0  C001  F009         	movff	?i2___ftpack,?___awtoft
 10890  002ED4  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 10891  002ED8  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 10892  002EDC  0012               	return	
 10893  002EDE                     __end_of___awtoft:
 10894                           	opt stack 0
 10895                           pclatu	equ	0xFFB
 10896                           pclath	equ	0xFFA
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           intcon	equ	0xFF2
 10904                           intcon2	equ	0xFF1
 10905                           indf0	equ	0xFEF
 10906                           postinc0	equ	0xFEE
 10907                           fsr0h	equ	0xFEA
 10908                           fsr0l	equ	0xFE9
 10909                           wreg	equ	0xFE8
 10910                           postdec1	equ	0xFE5
 10911                           plusw1	equ	0xFE3
 10912                           fsr1h	equ	0xFE2
 10913                           fsr1l	equ	0xFE1
 10914                           indf2	equ	0xFDF
 10915                           postinc2	equ	0xFDE
 10916                           postdec2	equ	0xFDD
 10917                           plusw2	equ	0xFDB
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function i2___ftpack *****************
 10923 ;; Defined at:
 10924 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  arg             3    0[COMRAM] unsigned um
 10927 ;;  exp             1    3[COMRAM] unsigned char 
 10928 ;;  sign            1    4[COMRAM] unsigned char 
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;		None
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  3    0[COMRAM] float 
 10933 ;; Registers used:
 10934 ;;		wreg, status,2, status,0
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10940 ;;      Params:         5       0       0       0       0       0       0       0       0
 10941 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10942 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10943 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10944 ;;Total ram usage:        8 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; This function calls:
 10947 ;;		Nothing
 10948 ;; This function is called by:
 10949 ;;		___awtoft
 10950 ;;		___ftdiv
 10951 ;;		i2___ftadd
 10952 ;;		i2___ftmul
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           	psect	text35
 10957  0029E0                     __ptext35:
 10958                           	opt stack 0
 10959  0029E0                     i2___ftpack:
 10960                           	opt stack 24
 10961                           
 10962                           ;incstack = 0
 10963  0029E0  5004               	movf	i2___ftpack@exp,w,c
 10964  0029E2  B4D8               	btfsc	status,2,c
 10965  0029E4  D005               	goto	i2l3149
 10966  0029E6  5001               	movf	i2___ftpack@arg,w,c
 10967  0029E8  1002               	iorwf	i2___ftpack@arg+1,w,c
 10968  0029EA  1003               	iorwf	i2___ftpack@arg+2,w,c
 10969  0029EC  A4D8               	btfss	status,2,c
 10970  0029EE  D00C               	goto	i2l3155
 10971  0029F0                     i2l3149:
 10972  0029F0  0E00               	movlw	0
 10973  0029F2  6E01               	movwf	?i2___ftpack,c
 10974  0029F4  0E00               	movlw	0
 10975  0029F6  6E02               	movwf	?i2___ftpack+1,c
 10976  0029F8  0E00               	movlw	0
 10977  0029FA  6E03               	movwf	?i2___ftpack+2,c
 10978  0029FC  0012               	return	
 10979  0029FE                     i2l3153:
 10980  0029FE  2A04               	incf	i2___ftpack@exp,f,c
 10981  002A00  90D8               	bcf	status,0,c
 10982  002A02  3203               	rrcf	i2___ftpack@arg+2,f,c
 10983  002A04  3202               	rrcf	i2___ftpack@arg+1,f,c
 10984  002A06  3201               	rrcf	i2___ftpack@arg,f,c
 10985  002A08                     i2l3155:
 10986  002A08  0E00               	movlw	0
 10987  002A0A  1401               	andwf	i2___ftpack@arg,w,c
 10988  002A0C  6E06               	movwf	??i2___ftpack& (0+255),c
 10989  002A0E  0E00               	movlw	0
 10990  002A10  1402               	andwf	i2___ftpack@arg+1,w,c
 10991  002A12  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 10992  002A14  0EFE               	movlw	254
 10993  002A16  1403               	andwf	i2___ftpack@arg+2,w,c
 10994  002A18  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 10995  002A1A  5006               	movf	??i2___ftpack,w,c
 10996  002A1C  1007               	iorwf	??i2___ftpack+1,w,c
 10997  002A1E  1008               	iorwf	??i2___ftpack+2,w,c
 10998  002A20  B4D8               	btfsc	status,2,c
 10999  002A22  D00C               	goto	i2l3161
 11000  002A24  D7EC               	goto	i2l3153
 11001  002A26                     i2l3157:
 11002  002A26  2A04               	incf	i2___ftpack@exp,f,c
 11003  002A28  0E01               	movlw	1
 11004  002A2A  2601               	addwf	i2___ftpack@arg,f,c
 11005  002A2C  0E00               	movlw	0
 11006  002A2E  2202               	addwfc	i2___ftpack@arg+1,f,c
 11007  002A30  0E00               	movlw	0
 11008  002A32  2203               	addwfc	i2___ftpack@arg+2,f,c
 11009  002A34  90D8               	bcf	status,0,c
 11010  002A36  3203               	rrcf	i2___ftpack@arg+2,f,c
 11011  002A38  3202               	rrcf	i2___ftpack@arg+1,f,c
 11012  002A3A  3201               	rrcf	i2___ftpack@arg,f,c
 11013  002A3C                     i2l3161:
 11014  002A3C  0E00               	movlw	0
 11015  002A3E  1401               	andwf	i2___ftpack@arg,w,c
 11016  002A40  6E06               	movwf	??i2___ftpack& (0+255),c
 11017  002A42  0E00               	movlw	0
 11018  002A44  1402               	andwf	i2___ftpack@arg+1,w,c
 11019  002A46  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 11020  002A48  0EFF               	movlw	255
 11021  002A4A  1403               	andwf	i2___ftpack@arg+2,w,c
 11022  002A4C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 11023  002A4E  5006               	movf	??i2___ftpack,w,c
 11024  002A50  1007               	iorwf	??i2___ftpack+1,w,c
 11025  002A52  1008               	iorwf	??i2___ftpack+2,w,c
 11026  002A54  B4D8               	btfsc	status,2,c
 11027  002A56  D006               	goto	i2l3165
 11028  002A58  D7E6               	goto	i2l3157
 11029  002A5A                     i2l3163:
 11030  002A5A  0604               	decf	i2___ftpack@exp,f,c
 11031  002A5C  90D8               	bcf	status,0,c
 11032  002A5E  3601               	rlcf	i2___ftpack@arg,f,c
 11033  002A60  3602               	rlcf	i2___ftpack@arg+1,f,c
 11034  002A62  3603               	rlcf	i2___ftpack@arg+2,f,c
 11035  002A64                     i2l3165:
 11036  002A64  BE02               	btfsc	i2___ftpack@arg+1,7,c
 11037  002A66  D003               	goto	i2l574
 11038  002A68  0E02               	movlw	2
 11039  002A6A  6004               	cpfslt	i2___ftpack@exp,c
 11040  002A6C  D7F6               	goto	i2l3163
 11041  002A6E                     i2l574:
 11042  002A6E  A004               	btfss	i2___ftpack@exp,0,c
 11043  002A70  9E02               	bcf	i2___ftpack@arg+1,7,c
 11044  002A72  90D8               	bcf	status,0,c
 11045  002A74  3204               	rrcf	i2___ftpack@exp,f,c
 11046  002A76  5004               	movf	i2___ftpack@exp,w,c
 11047  002A78  1203               	iorwf	i2___ftpack@arg+2,f,c
 11048  002A7A  5005               	movf	i2___ftpack@sign,w,c
 11049  002A7C  A4D8               	btfss	status,2,c
 11050  002A7E  8E03               	bsf	i2___ftpack@arg+2,7,c
 11051  002A80  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 11052  002A84  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 11053  002A88  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 11054  002A8C  0012               	return	
 11055  002A8E                     __end_ofi2___ftpack:
 11056                           	opt stack 0
 11057                           pclatu	equ	0xFFB
 11058                           pclath	equ	0xFFA
 11059                           tblptru	equ	0xFF8
 11060                           tblptrh	equ	0xFF7
 11061                           tblptrl	equ	0xFF6
 11062                           tablat	equ	0xFF5
 11063                           prodh	equ	0xFF4
 11064                           prodl	equ	0xFF3
 11065                           intcon	equ	0xFF2
 11066                           intcon2	equ	0xFF1
 11067                           indf0	equ	0xFEF
 11068                           postinc0	equ	0xFEE
 11069                           fsr0h	equ	0xFEA
 11070                           fsr0l	equ	0xFE9
 11071                           wreg	equ	0xFE8
 11072                           postdec1	equ	0xFE5
 11073                           plusw1	equ	0xFE3
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           pclatu	equ	0xFFB
 11084                           pclath	equ	0xFFA
 11085                           tblptru	equ	0xFF8
 11086                           tblptrh	equ	0xFF7
 11087                           tblptrl	equ	0xFF6
 11088                           tablat	equ	0xFF5
 11089                           prodh	equ	0xFF4
 11090                           prodl	equ	0xFF3
 11091                           intcon	equ	0xFF2
 11092                           intcon2	equ	0xFF1
 11093                           indf0	equ	0xFEF
 11094                           postinc0	equ	0xFEE
 11095                           fsr0h	equ	0xFEA
 11096                           fsr0l	equ	0xFE9
 11097                           wreg	equ	0xFE8
 11098                           postdec1	equ	0xFE5
 11099                           plusw1	equ	0xFE3
 11100                           fsr1h	equ	0xFE2
 11101                           fsr1l	equ	0xFE1
 11102                           indf2	equ	0xFDF
 11103                           postinc2	equ	0xFDE
 11104                           postdec2	equ	0xFDD
 11105                           plusw2	equ	0xFDB
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110                           	psect	rparam
 11111  0000                     pclatu	equ	0xFFB
 11112                           pclath	equ	0xFFA
 11113                           tblptru	equ	0xFF8
 11114                           tblptrh	equ	0xFF7
 11115                           tblptrl	equ	0xFF6
 11116                           tablat	equ	0xFF5
 11117                           prodh	equ	0xFF4
 11118                           prodl	equ	0xFF3
 11119                           intcon	equ	0xFF2
 11120                           intcon2	equ	0xFF1
 11121                           indf0	equ	0xFEF
 11122                           postinc0	equ	0xFEE
 11123                           fsr0h	equ	0xFEA
 11124                           fsr0l	equ	0xFE9
 11125                           wreg	equ	0xFE8
 11126                           postdec1	equ	0xFE5
 11127                           plusw1	equ	0xFE3
 11128                           fsr1h	equ	0xFE2
 11129                           fsr1l	equ	0xFE1
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           plusw2	equ	0xFDB
 11134                           fsr2h	equ	0xFDA
 11135                           fsr2l	equ	0xFD9
 11136                           status	equ	0xFD8
 11137                           
 11138                           	psect	temp
 11139  000059                     btemp:
 11140                           	opt stack 0
 11141  000059                     	ds	1
 11142  0000                     int$flags	set	btemp
 11143                           pclatu	equ	0xFFB
 11144                           pclath	equ	0xFFA
 11145                           tblptru	equ	0xFF8
 11146                           tblptrh	equ	0xFF7
 11147                           tblptrl	equ	0xFF6
 11148                           tablat	equ	0xFF5
 11149                           prodh	equ	0xFF4
 11150                           prodl	equ	0xFF3
 11151                           intcon	equ	0xFF2
 11152                           intcon2	equ	0xFF1
 11153                           indf0	equ	0xFEF
 11154                           postinc0	equ	0xFEE
 11155                           fsr0h	equ	0xFEA
 11156                           fsr0l	equ	0xFE9
 11157                           wreg	equ	0xFE8
 11158                           postdec1	equ	0xFE5
 11159                           plusw1	equ	0xFE3
 11160                           fsr1h	equ	0xFE2
 11161                           fsr1l	equ	0xFE1
 11162                           indf2	equ	0xFDF
 11163                           postinc2	equ	0xFDE
 11164                           postdec2	equ	0xFDD
 11165                           plusw2	equ	0xFDB
 11166                           fsr2h	equ	0xFDA
 11167                           fsr2l	equ	0xFD9
 11168                           status	equ	0xFD8


Data Sizes:
    Strings     369
    Constant    118
    Data        23
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      88
    BANK0           160    127     154
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> main@pass_cmp(BANK0[7]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 7
		 -> main@pass_verify(BANK0[7]), main@pass(BANK0[7]), 

    memset@p1	PTR void  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 

    memset@p	PTR unsigned char  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> buffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[24]), STR_11(CODE[20]), 
		 -> STR_10(CODE[31]), STR_9(CODE[30]), STR_8(CODE[21]), STR_7(CODE[22]), 
		 -> STR_6(CODE[28]), STR_5(CODE[26]), STR_4(CODE[25]), buffer(BANK1[50]), 
		 -> STR_2(CODE[26]), STR_1(CODE[26]), 

    sp__memset	PTR void  size(2) Largest target is 50
		 -> buffer(BANK1[50]), main@pass(BANK0[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ADC_ISR in COMRAM

    _ADC_ISR->i2___ftadd
    i2___ftmul->i2___ftpack
    i2___ftadd->___ftdiv
    ___ftdiv->i2___ftmul
    ___awtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _keyfind->_MSdelay
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _ADC_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ADC_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ADC_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ADC_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ADC_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ADC_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ADC_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ADC_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   56642
                                            101 BANK0     26    26      0
                 _ADC_Interrupt_Init
                           _LCD_Char
                          _LCD_Clear
                        _LCD_Command
                           _LCD_Init
                         _LCD_String
                            _MSdelay
                             ___ftge
                            _keyfind
                             _memset
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     475
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   43434
                                             63 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10229
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10031
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4249
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2086
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3524
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3227
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     480
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _keyfind                                              0     0      0    1180
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    2421
                                              8 BANK0      2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             2     2      0    1224
                                              6 BANK0      2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    2404
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0    1224
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0    1224
                                              6 BANK0      2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2    1180
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Interrupt_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                             19    19      0    4258
                                             50 COMRAM    19    19      0
                           ___awtoft
                            ___ftdiv
                          i2___ftadd
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (6) i2___ftmul                                           15     9      6     921
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) i2___ftadd                                           12     6      6    1435
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    1181
                                             23 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3     698
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___ftpack                                           8     3      5     543
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Interrupt_Init
   _LCD_Char
     _MSdelay
   _LCD_Clear
     _LCD_Command
       _MSdelay
   _LCD_Command
     _MSdelay
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _MSdelay
   ___ftge
   _keyfind
     _MSdelay
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcmp

 _ADC_ISR (ROOT)
   ___awtoft
     i2___ftpack
   ___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
     i2___ftpack (ARG)
   i2___ftadd
     ___ftdiv (ARG)
       i2___ftmul (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___ftpack (ARG)
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
   i2___ftmul
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      32       7       19.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7F      9A       5       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      58       1       93.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     124      20        0.0%
DATA                 0      0     124       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Jul 30 17:01:00 2021

               ?_LCD_Command 0001                 ___awdiv@sign 006B                  __CFG_BOR$ON 000000  
        ___wmul@multiplicand 0070                  __CFG_BORV$3 000000                  ?_LCD_String 0068  
                 i2___ftpack 29E0                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                 ___ftadd@exp1 0098  
               ___ftadd@exp2 0097                  __CFG_LVP$ON 000000                 ___ftadd@sign 0096  
                __CFG_WDT$ON 000000                          l113 0D14                          l302 078E  
                        l190 2326                          l182 22BA                          l175 225A  
                        l177 2284                          l601 191C                          l186 22F0  
                        l603 1944                          l612 1A1A                          l621 1A44  
                        l542 1FA2                          l640 1D9A                          l721 29CE  
                        l731 2BB8                          l574 2590                          l646 1E1A  
                        l671 2F9C                          l639 1D56                          l597 18E2  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000              __end_of_ADC_ISR 24B8  
               ___awmod@sign 0065                          prod 000FF3                          wreg 000FE8  
                LCD_Char@dat 0067                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
                       l3011 1F6C                         l3103 2952                         l3007 1F58  
                       l3033 27DE                         l3025 2E32                         l3105 2962  
                       l3017 1F88                         l3043 2862                         l3115 29BC  
                       l3107 2968                         l3131 2BA6                         l3123 2B4C  
                       l3019 1F98                         l4011 0F98                         l3213 2DBE  
                       l3037 281E                         l3125 2B5C                         l3301 2D68  
                       l4021 0FFA                         l3231 2290                         l3127 2B62  
                       l3303 2D74                         l3217 2DE8                         l3241 22B2  
                       l3057 214C                         l3137 2BD2                         l3401 0348  
                       l3321 0052                         l3313 0022                         l4009 0F82  
                       l3243 22C6                         l2603 18F0                         l3075 21DE  
                       l3139 2BE2                         l3411 03D2                         l3331 008C  
                       l3307 2DAC                         l4035 1062                         l4043 10A0  
                       l3253 22E8                         l3229 227C                         l2541 24D2  
                       l3093 2244                         l3085 220E                         l2701 20B4  
                       l3421 044A                         l3405 0376                         l3325 005C  
                       l3255 22FC                         l2631 19AA                         l2615 193A  
                       l3087 221E                         l3079 21F2                         l3503 075C  
                       l3431 04A8                         l3407 038C                         l3351 0186  
                       l3319 003C                         l3265 231E                         l2553 2544  
                       l2545 24E6                         l2633 19B8                         l2625 197C  
                       l2609 192A                         l3089 2228                         l2721 2882  
                       l2705 20D2                         l3521 0814                         l3505 0770  
                       l3417 041C                         l3409 03BC                         l3361 01C6  
                       l3345 012A                         l3291 2378                         l3283 2364  
                       l3275 2350                         l3267 2330                         l2563 259A  
                       l2555 2574                         l2547 24F4                         l2651 1A6E  
                       l2643 1A00                         l2635 19C6                         l3603 0B26  
                       l3531 08FC                         l3435 050E                         l3355 0196  
                       l3339 0102                         l3613 2F1E                         l2557 2582  
                       l2549 2524                         l2661 1ABC                         l2645 1A0E  
                       l2637 19D2                         l2733 28B6                         l2901 2FCA  
                       l3533 090A                         l3517 07C2                         l3509 0792  
                       l3453 05AA                         l3437 0514                         l3541 0932  
                       l3349 0170                         l3605 0B2C                         l2575 2E68  
                       l2911 1CC8                         l2735 28C2                         l2727 2898  
                       l2671 1FEE                         l3551 0980                         l3471 0626  
                       l3367 01E0                         l3607 0B4A                         l3359 019C  
                       l2585 2E8A                         l2577 2E72                         l3617 2F30  
                       l2569 25B6                         l2753 291A                         l2745 28F8  
                       l2737 28C8                         l3561 09E4                         l3481 066A  
                       l3473 063C                         l3465 060C                         l3457 05D2  
                       l3449 055A                         l3393 02D8                         l3377 0226  
                       l2587 2E90                         l2691 2076                         l2851 1832  
                       l2843 174E                         l3555 09B0                         l3547 0958  
                       l3539 0924                         l2917 1D02                         l2749 2906  
                       l2781 2B04                         l2773 2ACE                         l2765 2AAA  
                       l2677 2028                         l3573 0A5E                         l3485 0696  
                       l2951 1DE4                         l2775 2ADA                         l2695 2094  
                       l2871 1358                         l3583 0AA0                         l3591 0AC8  
                       l3575 0A68                         l3567 0A1C                         l3487 069E  
                       l3495 0734                         l3479 0656                         l3911 0DA6  
                       l3831 0BCA                         l2777 2AE0                         l2785 2B12  
                       l2769 2ABA                         l2865 1292                         l3593 0AD4  
                       l3569 0A26                         l3497 0742                         l3841 0BF2  
                       l2947 1DD0                         l2883 14E2                         l2875 137E  
                       l3931 0DEC                         l3851 0C24                         l2973 1E78  
                       l2957 1E00                         l2789 2B26                         l3941 0E06  
                       l3853 0C3A                         l3917 0DCA                         l2967 1E52  
                       l2959 1E10                         l3599 0AFA                         l2889 15A8  
                       l3953 0E34                         l2995 1F20                         l2987 1ECC  
                       l3963 0E66                         l3883 0D2C                         l3965 0E7C  
                       l3895 0D52                         _ADIF 007CF6                         l3977 0ED6  
                       l3987 0F08                         l3989 0F1E                         l3999 0F50  
                       STR_1 7F00                         STR_2 7EE6                         STR_3 7FB9  
                       STR_4 7F34                         STR_5 7F1A                         STR_6 7ECA  
                       STR_7 7F65                         STR_8 7F7B                         STR_9 7EAC  
                       _LATB 000F8A                         u3111 2128                         _LATC 000F8B  
                       _LATD 000F8C                         u3130 2172                         u2421 1890  
                       u2431 18AE                         u3135 2168                         u3340 2DDE  
                       u3350 2E08                         u2631 1FCA                         u3600 026C  
                       u3347 2DD4                         u2651 2004                         u3357 2DFE  
                       u2901 1CA4                         u3605 0260                         u2921 1CDE  
                       u4450 0D6E                         u4371 0B98                         u3820 0786  
                       u4381 0BAA                         u4391 0BBC                         _RBPU 007F8F  
                       _main 0B58                 ___ftpack@arg 0060           __size_of_LCD_Clear 0008  
               ___ftpack@exp 0063                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0059                 i2___ftadd@f1 0027                 i2___ftadd@f2 002A  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
            __end_of_MSdelay 2EA6                __CFG_IESO$OFF 000000                 _ADC_ISR$1155 0043  
               _sprintf$1159 00AC                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0081  
               i2___ftmul@f1 0009                 i2___ftmul@f2 000C                 ___param_bank 000000  
               ___ftmul@sign 0082                 ___fttol@exp1 0098                 ___fttol@lval 0094  
           __end_of_LCD_Char 2D0C             __end_of_LCD_Init 2F7A                __CFG_PLLDIV$1 000000  
             __CFG_CCP2MX$ON 000000                        ?_main 0001              __end_of___awdiv 2924  
            __end_of___ftadd 1AE2                        STR_10 7E8D                        STR_11 7FA5  
                      STR_12 7F4D                        STR_13 7FED                        STR_14 7F90  
                      STR_15 7FED                        STR_16 7F90                        STR_17 7FDC  
                      STR_18 7FCB              __end_of___awmod 2B30              __end_of___ftdiv 279E  
            __end_of___ftneg 2FAA              __end_of___lldiv 29E0              __end_of___ftmul 2112  
            ___awdiv@divisor 0068              __end_of___llmod 2BCA              __end_of___ftsub 2E5C  
            __end_of___fttol 2256                        _LATD0 007C60                        _LATD1 007C61  
                      i2l601 1B50                        i2l612 1C00                        i2l621 1C1C  
                      i2l632 276C                        i2l574 2A6E                        i2l597 1B26  
            ___awdiv@counter 006A                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0070               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
               main@pass_cmp 00CC                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000           _ADC_Interrupt_Init 2FD4               __CFG_EBTRB$OFF 000000  
              ___awtoft@sign 000C              __end_of_dpowers 7E3F                        _scale 1120  
            __end_of_keyfind 2392              __end_of_isdigit 2FD4                ___ftpack@sign 0064  
                      pclath 000FFA                        tablat 000FF5                        plusw1 000FE3  
                      plusw2 000FDB          ?_ADC_Interrupt_Init 0001                        status 000FD8  
        __size_of_LCD_String 0054              __end_of_sprintf 0B58               __CFG_ICPRT$OFF 000000  
         __size_ofi2___ftadd 01AC           __size_ofi2___ftmul 00F4              __initialization 2C46  
               __end_of_main 1120                i2___ftmul@exp 0012                    ??_ADC_ISR 0033  
                ?i2___ftpack 0001         ??_ADC_Interrupt_Init 0060                       ??_main 00C5  
              ___fttol@sign1 0093            __end_of_LCD_Clear 300E                __activetblptr 000002  
       __size_of__tdiv_to_l_ 019E                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0             ___llmod@dividend 0060                       ?_scale 0083  
                     _ADRESH 000FC4                       _ADRESL 000FC3             ___awdiv@dividend 0066  
           __end_of___awtoft 2EDE             __end_of___ftpack 25C4             __end_of___lltoft 2C46  
                  ??_MSdelay 0062                       i2l3161 2A3C                       i2l3153 29FE  
                     i2l3163 2A5A                       i2l3155 2A08                       i2l3165 2A64  
                     i2l3157 2A26                       i2l3149 29F0                       i2l3631 2708  
                     i2l3625 26E0                       i2l3713 1BB0                       i2l3651 2746  
                     i2l3715 1BBA                       i2l3707 1B8E                       i2l3733 1C38  
                     i2l3725 1BEE                       i2l3717 1BC4                       i2l3743 1C68  
                     i2l3727 1BF8                       i2l3719 1BCC                       i2l3673 2EBA  
                     i2l3753 25EC                       i2l3691 1B5E                       i2l3685 1B34  
                     i2l3773 2646                       i2l3783 266E                       i2l3759 2614  
                     i2l3777 2656                       i2l3787 267E                       u410_41 1AF2  
                     u411_41 1B06                       u404_41 26C8                       u406_41 26F0  
                     u431_41 25D4                       u433_41 25FC                       _OSCCON 000FD3  
             __CFG_XINST$OFF 000000             __end_of__powers_ 7E8D                       ___ftge 279E  
                     ___wmul 2EDE                    ??___awdiv 006A                    ??___ftadd 0093  
             __CFG_STVREN$ON 000000                    ??___awmod 0064                    ??___ftdiv 001E  
                  ??___ftneg 0063                    ??___lldiv 0068                    ??___ftmul 007A  
                  ??___llmod 0068                    ??___ftsub 009F                    ??___fttol 008E  
                     _buffer 0100                       _keypad 0046                       _memset 2F14  
                     _fround 15CE                       clear_0 2C8C                       clear_1 2C98  
           ___awdiv@quotient 006C              ___awmod@divisor 0062              ___awmod@counter 0064  
                     _rowloc 00F1         __size_of_LCD_Command 005A                       _strcmp 2D66  
      ___ftmul@f3_as_product 007E                 __pdataCOMRAM 0046                    ??_keyfind 0066  
                  ??_isdigit 0060            __end_ofi2___ftadd 1C8E               i2___ftadd@exp1 0032  
             i2___ftadd@exp2 0031            __end_ofi2___ftmul 26B8               i2___ftadd@sign 0030  
               __mediumconst 7E16                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_sprintf 00A6                    ?_LCD_Char 0001  
                 __accesstop 0060      __end_of__initialization 2CA4                    ?_LCD_Init 0001  
            __CFG_PBADEN$OFF 000000                   ___ftadd@f1 008D                   ___ftadd@f2 0090  
        __size_ofi2___ftpack 00AE                   ___ftge@ff1 0060                   ___ftge@ff2 0063  
              ___rparam_used 000001                   ___ftdiv@f1 0018                   ___ftdiv@f2 001B  
                 ___ftdiv@f3 0022                   ___ftneg@f1 0060                   ___awtoft@c 0009  
             i2___ftpack@arg 0001               i2___ftpack@exp 0004                   ___ftmul@f1 0074  
                 ___ftmul@f2 0077                   ___ftsub@f1 0099                   ___ftsub@f2 009C  
                 ___fttol@f1 008A               __pcstackCOMRAM 0001                 __pidataBANK0 300E  
                 ___lltoft@c 0068               i2___ftmul@cntr 0016                __end_of_scale 15CE  
             i2___ftmul@sign 0017                 ??_LCD_String 006A                   __div_to_l_ 1E2C  
            __div_to_l_@exp1 006B              __div_to_l_@cntr 006A                      ??_scale 0086  
            __div_to_l_@quot 0066                 sprintf@width 00BD                   __pbssBANK0 00DF  
                 __pbssBANK1 0100                   ??_LCD_Char 0066                   ??_LCD_Init 0068  
         __end_of_LCD_String 2E10                __div_to_l_@f1 0060                __div_to_l_@f2 0063  
                    ?___ftge 0060                      ?___wmul 006E                      _ADC_ISR 0008  
                    ?_memset 0060                      ?_fround 0083                    ?___awtoft 0009  
                  ?___ftpack 0060                    ?___lltoft 0068                      ?_strcmp 0060  
             main@count_fail 00DA                      _MSdelay 2E5C              __CFG_VREGEN$OFF 000000  
              LCD_String@msg 0068            __end_of__npowers_ 7E66                      __Hparam 0000  
                 _scale$1158 0086                      __Lparam 0000              __size_of___ftge 00C8  
                    ___awdiv 2866                      ___ftadd 187A                      ___awmod 2A8E  
                    ___ftdiv 26B8                      ___ftneg 2F7A                      ___lldiv 2924  
            __size_of___wmul 0036                      ___ftmul 1FB4                      ___llmod 2B30  
                    ___ftsub 2E10                      ___fttol 2112                      __pcinit 2C46  
               ??i2___ftpack 0006                   ??___awtoft 000C                   ??___ftpack 0065  
            __size_of_memset 0034              __size_of_fround 02AC      i2___ftmul@f3_as_product 0013  
                    __ramtop 0800                   ??___lltoft 006C                      __ptext0 0B58  
                    __ptext1 2D66                      __ptext2 0012                      __ptext3 1120  
                    __ptext4 2FAA                      __ptext5 15CE                      __ptext6 2EDE  
                    __ptext7 1FB4                      __ptext8 2A8E                      __ptext9 2866  
                    _col_loc 00F0              __size_of_strcmp 0056                  ?__div_to_l_ 0060  
                    _dpowers 7E17                      _keyfind 2256                      _isdigit 2FAA  
           ___awmod@dividend 0060                    _LCD_Clear 3006                      _sprintf 0012  
                    main@key 00DC               __pintcode_body 2392         end_of_initialization 2CA4  
                    memset@c 0062                      memset@n 0064                      memset@p 0066  
             LCD_Command@cmd 0067                __Lmediumconst 7E16                      int_func 2392  
         __end_ofi2___ftpack 2A8E              ___lldiv@divisor 0064              ___lldiv@counter 006C  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0060               __tdiv_to_l_@f2 0063  
                    strcmp@r 0065                ??__tdiv_to_l_ 0066  __size_of_ADC_Interrupt_Init 0022  
                  _PORTAbits 000F80                    _PORTEbits 000F84                   _tempurture 00ED  
                 ?_LCD_Clear 0001                    i2___ftadd 1AE2                    i2___ftmul 25C4  
                ___ftdiv@exp 0025            __size_of_LCD_Char 005A              i2___ftpack@sign 0005  
          __size_of_LCD_Init 0032          __size_of__div_to_l_ 0188                  ___ftmul@exp 007D  
              ??_LCD_Command 0066               __end_of___ftge 2866               __end_of___wmul 2F14  
              __pidataCOMRAM 2FF6               __end_of_memset 2F48               __end_of_fround 187A  
             __end_of_strcmp 2DBC          start_initialization 2C46          __end_of__tdiv_to_l_ 1E2C  
                 ?i2___ftadd 0027                   ?i2___ftmul 0009              ___llmod@divisor 0064  
            ___llmod@counter 0068                     ??___ftge 0066                     ??___wmul 0072  
                __pdataBANK0 00F3             __CFG_LPT1OSC$OFF 000000                     ?_ADC_ISR 0001  
                   ??_memset 0066                     ??_fround 0086                sprintf@tmpval 00B5  
                   ??_strcmp 0064                   fround@prec 008C            __size_of___awtoft 0038  
          __size_of___ftpack 010C          __end_of_LCD_Command 2D66            __size_of___lltoft 007C  
                __pbssCOMRAM 0056                __pcstackBANK0 0060                  ??_LCD_Clear 0068  
                   ?_MSdelay 0060                  sprintf@flag 00BB                  sprintf@fval 00BF  
                sprintf@prec 00C2                    __pintcode 0008                __pmediumconst 7E16  
                   ?___awdiv 0066                     ?___ftadd 008D                     ?___awmod 0060  
                   ?___ftdiv 0018                     ?___ftneg 0060                     ?___lldiv 0060  
                   ?___ftmul 0074                     ?___llmod 0060                     ?___ftsub 0099  
                  __npowers_ 7E3F                     ?___fttol 008A                  __tdiv_to_l_ 1C8E  
               ??__div_to_l_ 0066                     ?_keyfind 0001                     ?_isdigit 0001  
                ??i2___ftadd 002D                     ?_sprintf 009F                  ??i2___ftmul 000F  
             __size_of_scale 04AE                     MSdelay@i 0062                     MSdelay@j 0064  
                   _LCD_Char 2CB2                     _LCD_Init 2F48               ___wmul@product 0072  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     _PIR1bits 000F9E  
         __end_of__div_to_l_ 1FB4             __CFG_WDTPS$32768 000000                    _value_adc 0056  
                  main@F3964 00DF                    main@F3966 00E6                    main@F3968 00F3  
                _LCD_Command 2D0C             __size_of_ADC_ISR 24B0                   _ADCON0bits 000FC2  
          ___wmul@multiplier 006E                    main@count 00DD                    copy_data0 2C5A  
                  copy_data1 2C7A             __size_of_MSdelay 004A                     __Hrparam 0000  
                   __Lrparam 0000   __end_of_ADC_Interrupt_Init 2FF6             __size_of___awdiv 00BE  
           __size_of___ftadd 0268             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0030             __size_of___lldiv 00BC             __size_of___ftmul 015E  
           __size_of___llmod 009A             __size_of___ftsub 004C             __size_of___fttol 0144  
            main@pass_verify 00C5                     ___awtoft 2EA6                     ___ftpack 24B8  
                _fround$1156 0089                  _fround$1157 0086                     ___lltoft 2BCA  
                _isdigit$826 0061                   sprintf@exp 00B9                   sprintf@val 00B1  
           __size_of_keyfind 013C             __size_of_isdigit 002A                     __ptext10 1C8E  
                   __ptext11 1E2C                     __ptext20 279E                     __ptext12 2BCA  
                   __ptext21 2F14                     __ptext13 2B30                     __ptext22 2256  
                   __ptext14 2924                     __ptext31 25C4                     __ptext23 2DBC  
                   __ptext15 2112                     __ptext32 1AE2                     __ptext24 2CB2  
                   __ptext16 2E10                     __ptext33 26B8                     __ptext25 2F48  
                   __ptext17 187A                     __ptext34 2EA6                     __ptext26 3006  
                   __ptext18 24B8                     __ptext35 29E0                     __ptext27 2D0C  
                   __ptext19 2F7A                     __ptext28 2E5C                     __ptext29 2FD4  
                   __powers_ 7E66             __size_of_sprintf 0B46                __size_of_main 05C8  
                 MSdelay@val 0060                     _temp_col 00F2                     int$flags 0059  
                   main@pass 00D3                   _LCD_String 2DBC        __CFG_CPUDIV$OSC1_PLL2 000000  
                 _INTCONbits 000FF2                     isdigit@c 0062                     memset@p1 0060  
                   scale@scl 0089                     intlevel2 0000                    sprintf@ap 00AF  
           __tdiv_to_l_@exp1 006E                    sprintf@sp 009F             __tdiv_to_l_@cntr 006D  
           __tdiv_to_l_@quot 0069             ___lldiv@dividend 0060                 ?__tdiv_to_l_ 0060  
        __CFG_FOSC$INTOSC_EC 000000                     sprintf@c 00C4                     sprintf@f 00A1  
                   strcmp@s1 0060                     strcmp@s2 0062             ___lldiv@quotient 0068  
